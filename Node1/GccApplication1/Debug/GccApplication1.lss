
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001e50  00001ee4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  008001aa  008001aa  00001f8e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f8e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003a8  00000000  00000000  00001fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030fe  00000000  00000000  00002392  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000151d  00000000  00000000  00005490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017f2  00000000  00000000  000069ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000964  00000000  00000000  000081a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009c6  00000000  00000000  00008b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000197e  00000000  00000000  000094ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f8  00000000  00000000  0000ae48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <ir_beam_blocked+0x1a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e5       	ldi	r30, 0x50	; 80
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 3a       	cpi	r26, 0xAA	; 170
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	aa ea       	ldi	r26, 0xAA	; 170
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a3 3c       	cpi	r26, 0xC3	; 195
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 cb 06 	call	0xd96	; 0xd96 <main>
     39e:	0c 94 26 0f 	jmp	0x1e4c	; 0x1e4c <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:

#include <stdlib.h>
#include <avr/io.h>

void can_init(void){
	mcp_init();
     3a6:	0e 94 aa 03 	call	0x754	; 0x754 <mcp_init>
	mcp_bitModify(MCP_RXB0CTRL, MCP_RXBCTRL_MASK, 0xff);
     3aa:	4f ef       	ldi	r20, 0xFF	; 255
     3ac:	60 e6       	ldi	r22, 0x60	; 96
     3ae:	80 e6       	ldi	r24, 0x60	; 96
     3b0:	0e 94 86 03 	call	0x70c	; 0x70c <mcp_bitModify>
	mcp_bitModify(MCP_RXB1CTRL, MCP_RXBCTRL_MASK, 0xff);	
     3b4:	4f ef       	ldi	r20, 0xFF	; 255
     3b6:	60 e6       	ldi	r22, 0x60	; 96
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	0e 94 86 03 	call	0x70c	; 0x70c <mcp_bitModify>
	
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	60 ee       	ldi	r22, 0xE0	; 224
     3c2:	8f e0       	ldi	r24, 0x0F	; 15
     3c4:	0c 94 86 03 	jmp	0x70c	; 0x70c <mcp_bitModify>

000003c8 <can_write>:
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
	return msg;
}

//tx_buffer is the address of the control register
void can_write(can_message *msg, uint8_t tx_buffer){
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	f6 2e       	mov	r15, r22
	while(mcp_read(tx_buffer) & (1 << MCP_TEXREQ));	//wait for previous message to send
     3d8:	8f 2d       	mov	r24, r15
     3da:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mcp_read>
     3de:	83 fd       	sbrc	r24, 3
     3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <can_write+0x10>
	
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
     3e2:	68 81       	ld	r22, Y
     3e4:	79 81       	ldd	r23, Y+1	; 0x01
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	76 95       	lsr	r23
     3ea:	67 95       	ror	r22
     3ec:	8a 95       	dec	r24
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <can_write+0x20>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	8f 0d       	add	r24, r15
     3f4:	0e 94 67 03 	call	0x6ce	; 0x6ce <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
     3f8:	68 81       	ld	r22, Y
     3fa:	62 95       	swap	r22
     3fc:	66 0f       	add	r22, r22
     3fe:	60 7e       	andi	r22, 0xE0	; 224
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	8f 0d       	add	r24, r15
     404:	0e 94 67 03 	call	0x6ce	; 0x6ce <mcp_write>
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
     408:	6a 81       	ldd	r22, Y+2	; 0x02
     40a:	6f 70       	andi	r22, 0x0F	; 15
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	8f 0d       	add	r24, r15
     410:	0e 94 67 03 	call	0x6ce	; 0x6ce <mcp_write>
	
	for(int i = 0; i < msg->length; i++){
     414:	00 e0       	ldi	r16, 0x00	; 0
     416:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     418:	96 e0       	ldi	r25, 0x06	; 6
     41a:	e9 2e       	mov	r14, r25
     41c:	ef 0c       	add	r14, r15
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     41e:	2a 81       	ldd	r18, Y+2	; 0x02
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 17       	cp	r16, r18
     424:	13 07       	cpc	r17, r19
     426:	5c f4       	brge	.+22     	; 0x43e <can_write+0x76>
     428:	fe 01       	movw	r30, r28
     42a:	e0 0f       	add	r30, r16
     42c:	f1 1f       	adc	r31, r17
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     42e:	63 81       	ldd	r22, Z+3	; 0x03
     430:	8e 2d       	mov	r24, r14
     432:	80 0f       	add	r24, r16
     434:	0e 94 67 03 	call	0x6ce	; 0x6ce <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     438:	0f 5f       	subi	r16, 0xFF	; 255
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	f0 cf       	rjmp	.-32     	; 0x41e <can_write+0x56>
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     43e:	8f 2d       	mov	r24, r15
     440:	82 95       	swap	r24
     442:	8f 70       	andi	r24, 0x0F	; 15
     444:	82 58       	subi	r24, 0x82	; 130
	
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
	
	for(int i = 0; i < msg->length; i++){
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     452:	0c 94 a5 03 	jmp	0x74a	; 0x74a <mcp_requestToSend>

00000456 <can_pollInterrupt>:
	
}

uint8_t can_pollInterrupt(void){
	if(PIND | (1 << PB3)){ //Check for interrupts
     456:	80 b3       	in	r24, 0x10	; 16
		uint8_t interrupt_register = mcp_read(MCP_CANINTF);
     458:	8c e2       	ldi	r24, 0x2C	; 44
     45a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mcp_read>
     45e:	98 2f       	mov	r25, r24
		//Finds the register that sent an interrupt signal
		if(interrupt_register & MCP_RX0IF){
     460:	80 ff       	sbrs	r24, 0
     462:	07 c0       	rjmp	.+14     	; 0x472 <can_pollInterrupt+0x1c>
			mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0xFF);
     464:	4f ef       	ldi	r20, 0xFF	; 255
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	8c e2       	ldi	r24, 0x2C	; 44
     46a:	0e 94 86 03 	call	0x70c	; 0x70c <mcp_bitModify>
			return MCP_RXB0CTRL;
     46e:	80 e6       	ldi	r24, 0x60	; 96
     470:	08 95       	ret
		}
		
		else if(interrupt_register & MCP_RX1IF){
     472:	82 70       	andi	r24, 0x02	; 2
     474:	91 ff       	sbrs	r25, 1
     476:	06 c0       	rjmp	.+12     	; 0x484 <can_pollInterrupt+0x2e>
			mcp_bitModify(MCP_CANINTF, MCP_RX1IF, 0xFF);
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	62 e0       	ldi	r22, 0x02	; 2
     47c:	8c e2       	ldi	r24, 0x2C	; 44
     47e:	0e 94 86 03 	call	0x70c	; 0x70c <mcp_bitModify>
			return MCP_RXB1CTRL;
     482:	80 e7       	ldi	r24, 0x70	; 112
		}	
	}
	
	return 0x00;
	
}
     484:	08 95       	ret

00000486 <can_read>:
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
	
	
}

can_message can_read(void){
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	2b 97       	sbiw	r28, 0x0b	; 11
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	6c 01       	movw	r12, r24
	can_message msg;
	uint8_t bufferSelect = can_pollInterrupt();
     4b4:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     4b8:	78 2e       	mov	r7, r24
	/*
	if(!bufferSelect){
		printf("No interrupt detected!");
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	87 0d       	add	r24, r7
     4be:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mcp_read>
     4c2:	e8 2e       	mov	r14, r24
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	87 0d       	add	r24, r7
     4c8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mcp_read>
     4cc:	82 95       	swap	r24
     4ce:	86 95       	lsr	r24
     4d0:	87 70       	andi	r24, 0x07	; 7
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	e9 9e       	mul	r14, r25
     4d6:	70 01       	movw	r14, r0
     4d8:	11 24       	eor	r1, r1
     4da:	e8 2a       	or	r14, r24
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	87 0d       	add	r24, r7
     4e0:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mcp_read>
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	68 2e       	mov	r6, r24
     4e8:	5e 01       	movw	r10, r28
     4ea:	e4 e0       	ldi	r30, 0x04	; 4
     4ec:	ae 0e       	add	r10, r30
     4ee:	b1 1c       	adc	r11, r1
	
	for(int i = 0; i < msg.length; i++){
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	88 2e       	mov	r8, r24
     4f6:	91 2c       	mov	r9, r1
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     4f8:	f6 e0       	ldi	r31, 0x06	; 6
     4fa:	7f 0e       	add	r7, r31
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     4fc:	08 15       	cp	r16, r8
     4fe:	19 05       	cpc	r17, r9
     500:	54 f4       	brge	.+20     	; 0x516 <__stack+0x17>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     502:	87 2d       	mov	r24, r7
     504:	80 0f       	add	r24, r16
     506:	0e 94 58 03 	call	0x6b0	; 0x6b0 <mcp_read>
     50a:	f5 01       	movw	r30, r10
     50c:	81 93       	st	Z+, r24
     50e:	5f 01       	movw	r10, r30
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     510:	0f 5f       	subi	r16, 0xFF	; 255
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	f3 cf       	rjmp	.-26     	; 0x4fc <can_read+0x76>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
	}
	
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	8c e2       	ldi	r24, 0x2C	; 44
     51c:	0e 94 86 03 	call	0x70c	; 0x70c <mcp_bitModify>
	return msg;
     520:	fa 82       	std	Y+2, r15	; 0x02
     522:	e9 82       	std	Y+1, r14	; 0x01
     524:	6b 82       	std	Y+3, r6	; 0x03
     526:	8b e0       	ldi	r24, 0x0B	; 11
     528:	fe 01       	movw	r30, r28
     52a:	31 96       	adiw	r30, 0x01	; 1
     52c:	d6 01       	movw	r26, r12
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	8a 95       	dec	r24
     534:	e1 f7       	brne	.-8      	; 0x52e <__stack+0x2f>
}
     536:	c6 01       	movw	r24, r12
     538:	2b 96       	adiw	r28, 0x0b	; 11
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	9f 90       	pop	r9
     55a:	8f 90       	pop	r8
     55c:	7f 90       	pop	r7
     55e:	6f 90       	pop	r6
     560:	08 95       	ret

00000562 <new_can_message>:
		printf("%c", msg.data[i]);
	}
	printf("\n");
}

can_message new_can_message(uint16_t id, uint8_t length, uint8_t* data){
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	2b 97       	sbiw	r28, 0x0b	; 11
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	de 01       	movw	r26, r28
     580:	14 96       	adiw	r26, 0x04	; 4
	can_message m;
	m.id = id;
	m.length = length;
	for(int i = 0; i < length; i++){
     582:	f9 01       	movw	r30, r18
     584:	04 2f       	mov	r16, r20
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	7f 01       	movw	r14, r30
     58a:	e2 1a       	sub	r14, r18
     58c:	f3 0a       	sbc	r15, r19
     58e:	e0 16       	cp	r14, r16
     590:	f1 06       	cpc	r15, r17
     592:	1c f4       	brge	.+6      	; 0x59a <new_can_message+0x38>
		m.data[i] = data[i];	
     594:	51 91       	ld	r21, Z+
     596:	5d 93       	st	X+, r21
     598:	f7 cf       	rjmp	.-18     	; 0x588 <new_can_message+0x26>
	}
	
	
	return m;
     59a:	7a 83       	std	Y+2, r23	; 0x02
     59c:	69 83       	std	Y+1, r22	; 0x01
     59e:	4b 83       	std	Y+3, r20	; 0x03
     5a0:	2b e0       	ldi	r18, 0x0B	; 11
     5a2:	fe 01       	movw	r30, r28
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	dc 01       	movw	r26, r24
     5a8:	01 90       	ld	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	2a 95       	dec	r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <new_can_message+0x46>
}
     5b0:	2b 96       	adiw	r28, 0x0b	; 11
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	08 95       	ret

000005ca <can_send_joystick_message>:

void can_send_joystick_message(){
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	64 97       	sbiw	r28, 0x14	; 20
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
	Joystick joy;
	JOY_read_joystick(&joy);
     5de:	ce 01       	movw	r24, r28
     5e0:	0c 96       	adiw	r24, 0x0c	; 12
     5e2:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <JOY_read_joystick>
	uint8_t joy_data[1] = {joy.x};
     5e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     5ea:	8c 8b       	std	Y+20, r24	; 0x14
	can_message msg = new_can_message(MCP_JOYSTICK_MESSAGE, 1, joy_data);
     5ec:	9e 01       	movw	r18, r28
     5ee:	2c 5e       	subi	r18, 0xEC	; 236
     5f0:	3f 4f       	sbci	r19, 0xFF	; 255
     5f2:	41 e0       	ldi	r20, 0x01	; 1
     5f4:	65 e5       	ldi	r22, 0x55	; 85
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	ce 01       	movw	r24, r28
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     600:	60 e3       	ldi	r22, 0x30	; 48
     602:	ce 01       	movw	r24, r28
     604:	01 96       	adiw	r24, 0x01	; 1
     606:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     60a:	64 96       	adiw	r28, 0x14	; 20
     60c:	0f b6       	in	r0, 0x3f	; 63
     60e:	f8 94       	cli
     610:	de bf       	out	0x3e, r29	; 62
     612:	0f be       	out	0x3f, r0	; 63
     614:	cd bf       	out	0x3d, r28	; 61
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <can_send_slider_message>:

void can_send_slider_message(){
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	2c 97       	sbiw	r28, 0x0c	; 12
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg_data = JOY_read_left_slider();
     630:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <JOY_read_left_slider>
     634:	8c 87       	std	Y+12, r24	; 0x0c
	can_message msg = new_can_message(MCP_SLIDER_MESSAGE, 1, &msg_data);
     636:	9e 01       	movw	r18, r28
     638:	24 5f       	subi	r18, 0xF4	; 244
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	41 e0       	ldi	r20, 0x01	; 1
     63e:	68 e8       	ldi	r22, 0x88	; 136
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	ce 01       	movw	r24, r28
     644:	01 96       	adiw	r24, 0x01	; 1
     646:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     64a:	60 e3       	ldi	r22, 0x30	; 48
     64c:	ce 01       	movw	r24, r28
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     654:	2c 96       	adiw	r28, 0x0c	; 12
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <can_send_button_message>:
void can_send_button_message(){
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	2c 97       	sbiw	r28, 0x0c	; 12
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg_data= JOY_read_right_button();
     67a:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <JOY_read_right_button>
     67e:	8c 87       	std	Y+12, r24	; 0x0c
	can_message msg = new_can_message(MCP_SOLENOID_MESSAGE, 1, &msg_data);
     680:	9e 01       	movw	r18, r28
     682:	24 5f       	subi	r18, 0xF4	; 244
     684:	3f 4f       	sbci	r19, 0xFF	; 255
     686:	41 e0       	ldi	r20, 0x01	; 1
     688:	67 e7       	ldi	r22, 0x77	; 119
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	ce 01       	movw	r24, r28
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     694:	60 e3       	ldi	r22, 0x30	; 48
     696:	ce 01       	movw	r24, r28
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
     69e:	2c 96       	adiw	r28, 0x0c	; 12
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <mcp_read>:
#include "mcp.h"
#include "mcp_defines.h"
#include "../../spi/spi.h"
#include <avr/io.h>

char mcp_read(uint8_t address){
     6b0:	cf 93       	push	r28
     6b2:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << MCP_CS);
     6b4:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(MCP_READ);
     6b6:	83 e0       	ldi	r24, 0x03	; 3
     6b8:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	SPI_transmit(address);
     6bc:	8c 2f       	mov	r24, r28
     6be:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	
	char data = SPI_transmit(0x00);
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	PORTB |= (1 << MCP_CS);
     6c8:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
     6ca:	cf 91       	pop	r28
     6cc:	08 95       	ret

000006ce <mcp_write>:
void mcp_write(uint8_t address, char data){
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	1f 92       	push	r1
     6d6:	cd b7       	in	r28, 0x3d	; 61
     6d8:	de b7       	in	r29, 0x3e	; 62
     6da:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     6dc:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_WRITE);
     6de:	82 e0       	ldi	r24, 0x02	; 2
     6e0:	69 83       	std	Y+1, r22	; 0x01
     6e2:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	SPI_transmit(address);
     6e6:	81 2f       	mov	r24, r17
     6e8:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	SPI_transmit(data);
     6ec:	69 81       	ldd	r22, Y+1	; 0x01
     6ee:	86 2f       	mov	r24, r22
     6f0:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     6f4:	c4 9a       	sbi	0x18, 4	; 24
}	
     6f6:	0f 90       	pop	r0
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	1f 91       	pop	r17
     6fe:	08 95       	ret

00000700 <mcp_reset>:
void mcp_reset(){
	PORTB &= ~(1 << MCP_CS);
     700:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_RESET);
     702:	80 ec       	ldi	r24, 0xC0	; 192
     704:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     708:	c4 9a       	sbi	0x18, 4	; 24
     70a:	08 95       	ret

0000070c <mcp_bitModify>:
}	
void mcp_bitModify(uint8_t address, uint8_t mask, char data){
     70c:	1f 93       	push	r17
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	00 d0       	rcall	.+0      	; 0x714 <mcp_bitModify+0x8>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     71a:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_BIT_MODIFY);
     71c:	85 e0       	ldi	r24, 0x05	; 5
     71e:	4a 83       	std	Y+2, r20	; 0x02
     720:	69 83       	std	Y+1, r22	; 0x01
     722:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	SPI_transmit(address);
     726:	81 2f       	mov	r24, r17
     728:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	SPI_transmit(mask);
     72c:	69 81       	ldd	r22, Y+1	; 0x01
     72e:	86 2f       	mov	r24, r22
     730:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	SPI_transmit(data);
     734:	4a 81       	ldd	r20, Y+2	; 0x02
     736:	84 2f       	mov	r24, r20
     738:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     73c:	c4 9a       	sbi	0x18, 4	; 24
}
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	1f 91       	pop	r17
     748:	08 95       	ret

0000074a <mcp_requestToSend>:
void mcp_requestToSend(uint8_t buffer){
	PORTB &= ~(1 << MCP_CS);
     74a:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(buffer);
     74c:	0e 94 b4 03 	call	0x768	; 0x768 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     750:	c4 9a       	sbi	0x18, 4	; 24
     752:	08 95       	ret

00000754 <mcp_init>:
	
	return status;
}

void mcp_init(void){
	SPI_masterInit();
     754:	0e 94 ae 03 	call	0x75c	; 0x75c <SPI_masterInit>
	mcp_reset();
     758:	0c 94 80 03 	jmp	0x700	; 0x700 <mcp_reset>

0000075c <SPI_masterInit>:
#include <stdio.h>
#include <stdlib.h>

void SPI_masterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5)|(1 << PB7)|(1 << PB4); //4 = SS, 5 = MOSI, 7 = SCK
     75c:	80 eb       	ldi	r24, 0xB0	; 176
     75e:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6); //DDRB6
     760:	be 98       	cbi	0x17, 6	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     762:	81 e5       	ldi	r24, 0x51	; 81
     764:	8d b9       	out	0x0d, r24	; 13
     766:	08 95       	ret

00000768 <SPI_transmit>:
}
uint8_t SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
     768:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     76a:	77 9b       	sbis	0x0e, 7	; 14
     76c:	fe cf       	rjmp	.-4      	; 0x76a <SPI_transmit+0x2>
	return SPDR;
     76e:	8f b1       	in	r24, 0x0f	; 15
     770:	08 95       	ret

00000772 <USART_Init>:
	_delay_ms(100);
}
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     772:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     774:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     776:	8a b1       	in	r24, 0x0a	; 10
     778:	88 61       	ori	r24, 0x18	; 24
     77a:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     77c:	80 b5       	in	r24, 0x20	; 32
     77e:	86 68       	ori	r24, 0x86	; 134
     780:	80 bd       	out	0x20, r24	; 32
     782:	08 95       	ret

00000784 <USART_Transmit>:
}
void USART_Transmit(unsigned char data){
	/*Wait for empty transmit buffer*/
	while( !(UCSR0A & (1<<UDRE0)) );
     784:	5d 9b       	sbis	0x0b, 5	; 11
     786:	fe cf       	rjmp	.-4      	; 0x784 <USART_Transmit>
	
	/*Put data into buffer, sends the data*/
	UDR0 = data;
     788:	8c b9       	out	0x0c, r24	; 12
     78a:	08 95       	ret

0000078c <USART_Receive>:
}
unsigned char USART_Receive(void){
	/*Wait for data to be received*/
	while( !(UCSR0A & (1<<RXC0)) );
     78c:	5f 9b       	sbis	0x0b, 7	; 11
     78e:	fe cf       	rjmp	.-4      	; 0x78c <USART_Receive>
	
	
	/*Get and return received data from buffer*/
	return UDR0;
     790:	8c b1       	in	r24, 0x0c	; 12
     792:	08 95       	ret

00000794 <EEPROM_write>:
#include <avr/io.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     794:	e1 99       	sbic	0x1c, 1	; 28
     796:	fe cf       	rjmp	.-4      	; 0x794 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     798:	9f bb       	out	0x1f, r25	; 31
     79a:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     79c:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     79e:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     7a0:	e1 9a       	sbi	0x1c, 1	; 28
     7a2:	08 95       	ret

000007a4 <SRAM_init>:
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n% 4d errors in retrieval phase \n\n", write_errors, retrieval_errors);
}
void SRAM_init(void){
	MCUCR |= (1 << SRE);
     7a4:	85 b7       	in	r24, 0x35	; 53
     7a6:	80 68       	ori	r24, 0x80	; 128
     7a8:	85 bf       	out	0x35, r24	; 53
     7aa:	08 95       	ret

000007ac <JOY_read_x>:
		return NEUTRAL;
	}		
}

uint8_t JOY_read_x(void){
	*adc_data = 0x04;
     7ac:	84 e0       	ldi	r24, 0x04	; 4
     7ae:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b2:	82 e6       	ldi	r24, 0x62	; 98
     7b4:	8a 95       	dec	r24
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <JOY_read_x+0x8>
     7b8:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     7ba:	80 91 00 14 	lds	r24, 0x1400
}
     7be:	08 95       	ret

000007c0 <JOY_read_y>:
uint8_t JOY_read_y(void){
	*adc_data = 0x05;
     7c0:	85 e0       	ldi	r24, 0x05	; 5
     7c2:	80 93 00 14 	sts	0x1400, r24
     7c6:	82 e6       	ldi	r24, 0x62	; 98
     7c8:	8a 95       	dec	r24
     7ca:	f1 f7       	brne	.-4      	; 0x7c8 <JOY_read_y+0x8>
     7cc:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     7ce:	80 91 00 14 	lds	r24, 0x1400
}
     7d2:	08 95       	ret

000007d4 <JOY_toPercent>:
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
	DDRD &= ~(1 << DDD2);
	PORTD |= (1 << PD2);
}
void JOY_toPercent(Joystick* joy){
     7d4:	cf 92       	push	r12
     7d6:	df 92       	push	r13
     7d8:	ef 92       	push	r14
     7da:	ff 92       	push	r15
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	ec 01       	movw	r28, r24
	joy->x = (int8_t)((100.0*(JOY_read_x() - joy->offset_x))/((float)255-joy->offset_x));
     7e6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <JOY_read_x>
     7ea:	0c 81       	ldd	r16, Y+4	; 0x04
     7ec:	1d 81       	ldd	r17, Y+5	; 0x05
     7ee:	68 2f       	mov	r22, r24
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	60 1b       	sub	r22, r16
     7f4:	71 0b       	sbc	r23, r17
     7f6:	88 27       	eor	r24, r24
     7f8:	77 fd       	sbrc	r23, 7
     7fa:	80 95       	com	r24
     7fc:	98 2f       	mov	r25, r24
     7fe:	0e 94 9e 09 	call	0x133c	; 0x133c <__floatsisf>
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	48 ec       	ldi	r20, 0xC8	; 200
     808:	52 e4       	ldi	r21, 0x42	; 66
     80a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3>
     80e:	6b 01       	movw	r12, r22
     810:	7c 01       	movw	r14, r24
     812:	b8 01       	movw	r22, r16
     814:	88 27       	eor	r24, r24
     816:	77 fd       	sbrc	r23, 7
     818:	80 95       	com	r24
     81a:	98 2f       	mov	r25, r24
     81c:	0e 94 9e 09 	call	0x133c	; 0x133c <__floatsisf>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	8f e7       	ldi	r24, 0x7F	; 127
     82a:	93 e4       	ldi	r25, 0x43	; 67
     82c:	0e 94 9e 08 	call	0x113c	; 0x113c <__subsf3>
     830:	9b 01       	movw	r18, r22
     832:	ac 01       	movw	r20, r24
     834:	c7 01       	movw	r24, r14
     836:	b6 01       	movw	r22, r12
     838:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3>
     83c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixsfsi>
     840:	77 27       	eor	r23, r23
     842:	67 fd       	sbrc	r22, 7
     844:	70 95       	com	r23
     846:	79 83       	std	Y+1, r23	; 0x01
     848:	68 83       	st	Y, r22
	joy->y = (int8_t)((100.0*(JOY_read_y() - joy->offset_y))/((float)255-joy->offset_y));
     84a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <JOY_read_y>
     84e:	0e 81       	ldd	r16, Y+6	; 0x06
     850:	1f 81       	ldd	r17, Y+7	; 0x07
     852:	68 2f       	mov	r22, r24
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	60 1b       	sub	r22, r16
     858:	71 0b       	sbc	r23, r17
     85a:	88 27       	eor	r24, r24
     85c:	77 fd       	sbrc	r23, 7
     85e:	80 95       	com	r24
     860:	98 2f       	mov	r25, r24
     862:	0e 94 9e 09 	call	0x133c	; 0x133c <__floatsisf>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	48 ec       	ldi	r20, 0xC8	; 200
     86c:	52 e4       	ldi	r21, 0x42	; 66
     86e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <__mulsf3>
     872:	6b 01       	movw	r12, r22
     874:	7c 01       	movw	r14, r24
     876:	b8 01       	movw	r22, r16
     878:	88 27       	eor	r24, r24
     87a:	77 fd       	sbrc	r23, 7
     87c:	80 95       	com	r24
     87e:	98 2f       	mov	r25, r24
     880:	0e 94 9e 09 	call	0x133c	; 0x133c <__floatsisf>
     884:	9b 01       	movw	r18, r22
     886:	ac 01       	movw	r20, r24
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	8f e7       	ldi	r24, 0x7F	; 127
     88e:	93 e4       	ldi	r25, 0x43	; 67
     890:	0e 94 9e 08 	call	0x113c	; 0x113c <__subsf3>
     894:	9b 01       	movw	r18, r22
     896:	ac 01       	movw	r20, r24
     898:	c7 01       	movw	r24, r14
     89a:	b6 01       	movw	r22, r12
     89c:	0e 94 03 09 	call	0x1206	; 0x1206 <__divsf3>
     8a0:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__fixsfsi>
     8a4:	77 27       	eor	r23, r23
     8a6:	67 fd       	sbrc	r22, 7
     8a8:	70 95       	com	r23
     8aa:	7b 83       	std	Y+3, r23	; 0x03
     8ac:	6a 83       	std	Y+2, r22	; 0x02
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	08 95       	ret

000008c0 <JOY_get_direction>:
	j.offset_x = offset_x;
	j.offset_y = offset_y;
	
	return j;
}
direction JOY_get_direction(Joystick joy){
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	28 97       	sbiw	r28, 0x08	; 8
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	29 83       	std	Y+1, r18	; 0x01
     8d6:	3a 83       	std	Y+2, r19	; 0x02
     8d8:	4b 83       	std	Y+3, r20	; 0x03
     8da:	5c 83       	std	Y+4, r21	; 0x04
     8dc:	6d 83       	std	Y+5, r22	; 0x05
     8de:	7e 83       	std	Y+6, r23	; 0x06
     8e0:	8f 83       	std	Y+7, r24	; 0x07
     8e2:	98 87       	std	Y+8, r25	; 0x08
	JOY_toPercent(&joy);
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <JOY_toPercent>
	if(joy.x >= 90){
     8ec:	89 81       	ldd	r24, Y+1	; 0x01
     8ee:	9a 81       	ldd	r25, Y+2	; 0x02
     8f0:	8a 35       	cpi	r24, 0x5A	; 90
     8f2:	91 05       	cpc	r25, r1
     8f4:	8c f4       	brge	.+34     	; 0x918 <JOY_get_direction+0x58>
		return RIGHT;
	}else if(joy.x <= -90){
     8f6:	89 81       	ldd	r24, Y+1	; 0x01
     8f8:	9a 81       	ldd	r25, Y+2	; 0x02
     8fa:	87 3a       	cpi	r24, 0xA7	; 167
     8fc:	9f 4f       	sbci	r25, 0xFF	; 255
     8fe:	74 f0       	brlt	.+28     	; 0x91c <JOY_get_direction+0x5c>
		return LEFT;
	}else if(joy.y >= 90){
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	8a 35       	cpi	r24, 0x5A	; 90
     906:	91 05       	cpc	r25, r1
     908:	5c f4       	brge	.+22     	; 0x920 <JOY_get_direction+0x60>
		return UP;
	}else if(joy.y <= -90){
     90a:	8b 81       	ldd	r24, Y+3	; 0x03
     90c:	9c 81       	ldd	r25, Y+4	; 0x04
     90e:	87 3a       	cpi	r24, 0xA7	; 167
     910:	9f 4f       	sbci	r25, 0xFF	; 255
     912:	44 f4       	brge	.+16     	; 0x924 <JOY_get_direction+0x64>
		return DOWN;
     914:	82 e0       	ldi	r24, 0x02	; 2
     916:	07 c0       	rjmp	.+14     	; 0x926 <JOY_get_direction+0x66>
	return j;
}
direction JOY_get_direction(Joystick joy){
	JOY_toPercent(&joy);
	if(joy.x >= 90){
		return RIGHT;
     918:	84 e0       	ldi	r24, 0x04	; 4
     91a:	05 c0       	rjmp	.+10     	; 0x926 <JOY_get_direction+0x66>
	}else if(joy.x <= -90){
		return LEFT;
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	03 c0       	rjmp	.+6      	; 0x926 <JOY_get_direction+0x66>
	}else if(joy.y >= 90){
		return UP;
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	01 c0       	rjmp	.+2      	; 0x926 <JOY_get_direction+0x66>
	}else if(joy.y <= -90){
		return DOWN;
	}else{
		return NEUTRAL;
     924:	80 e0       	ldi	r24, 0x00	; 0
	}		
}
     926:	28 96       	adiw	r28, 0x08	; 8
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	08 95       	ret

00000938 <JOY_calibrate>:
}
void JOY_toPercent(Joystick* joy){
	joy->x = (int8_t)((100.0*(JOY_read_x() - joy->offset_x))/((float)255-joy->offset_x));
	joy->y = (int8_t)((100.0*(JOY_read_y() - joy->offset_y))/((float)255-joy->offset_y));
}
void JOY_calibrate(Joystick* joy){
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ec 01       	movw	r28, r24
	joy->offset_x = JOY_read_x();
     93e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <JOY_read_x>
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	3d 83       	std	Y+5, r19	; 0x05
     948:	2c 83       	std	Y+4, r18	; 0x04
	printf("X zero: %d\n", joy->offset_x);
     94a:	1f 92       	push	r1
     94c:	8f 93       	push	r24
     94e:	84 e1       	ldi	r24, 0x14	; 20
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	0e 94 13 0c 	call	0x1826	; 0x1826 <printf>
	joy->offset_y = JOY_read_y();
     95a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <JOY_read_y>
     95e:	28 2f       	mov	r18, r24
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	3f 83       	std	Y+7, r19	; 0x07
     964:	2e 83       	std	Y+6, r18	; 0x06
	printf("Y zero: %d\n", joy->offset_y);
     966:	1f 92       	push	r1
     968:	8f 93       	push	r24
     96a:	80 e2       	ldi	r24, 0x20	; 32
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	0e 94 13 0c 	call	0x1826	; 0x1826 <printf>
     976:	8d b7       	in	r24, 0x3d	; 61
     978:	9e b7       	in	r25, 0x3e	; 62
     97a:	08 96       	adiw	r24, 0x08	; 8
     97c:	0f b6       	in	r0, 0x3f	; 63
     97e:	f8 94       	cli
     980:	9e bf       	out	0x3e, r25	; 62
     982:	0f be       	out	0x3f, r0	; 63
     984:	8d bf       	out	0x3d, r24	; 61
}
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <JOY_init>:
void JOY_init(Joystick* joy){
	//MCUCR |=
	//GICR |= (1 << INT0);		<-- Interrupts
	//sei();
	
	JOY_calibrate(joy);
     98c:	0e 94 9c 04 	call	0x938	; 0x938 <JOY_calibrate>
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
     990:	87 b3       	in	r24, 0x17	; 23
     992:	88 7f       	andi	r24, 0xF8	; 248
     994:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
     996:	88 b3       	in	r24, 0x18	; 24
     998:	87 60       	ori	r24, 0x07	; 7
     99a:	88 bb       	out	0x18, r24	; 24
	DDRD &= ~(1 << DDD2);
     99c:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     99e:	92 9a       	sbi	0x12, 2	; 18
     9a0:	08 95       	ret

000009a2 <JOY_read_joystick>:
	joy->offset_x = JOY_read_x();
	printf("X zero: %d\n", joy->offset_x);
	joy->offset_y = JOY_read_y();
	printf("Y zero: %d\n", joy->offset_y);
}
void JOY_read_joystick(Joystick* joy){
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	ec 01       	movw	r28, r24
	joy->x = JOY_read_x();
     9a8:	0e 94 d6 03 	call	0x7ac	; 0x7ac <JOY_read_x>
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	99 83       	std	Y+1, r25	; 0x01
     9b0:	88 83       	st	Y, r24
	joy->y = JOY_read_y();
     9b2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <JOY_read_y>
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	9b 83       	std	Y+3, r25	; 0x03
     9ba:	8a 83       	std	Y+2, r24	; 0x02

}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <JOY_read_left_slider>:
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
}
uint8_t JOY_read_left_slider(void){
	volatile char *ext_joy = (char *) adc_data;	//MUX Address
	ext_joy[0] = 0x07;							//Enable CH4
     9c2:	87 e0       	ldi	r24, 0x07	; 7
     9c4:	80 93 00 14 	sts	0x1400, r24
     9c8:	81 e4       	ldi	r24, 0x41	; 65
     9ca:	8a 95       	dec	r24
     9cc:	f1 f7       	brne	.-4      	; 0x9ca <JOY_read_left_slider+0x8>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <JOY_read_left_slider+0xe>
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
     9d0:	80 91 00 14 	lds	r24, 0x1400
}
     9d4:	08 95       	ret

000009d6 <JOY_read_right_button>:
int JOY_read_left_button(void){
	return (PINB & (1 << PINB1)) >> PINB1;
}
int JOY_read_right_button(void){
	return (PINB & (1 << PINB0)) >> PINB0;
     9d6:	86 b3       	in	r24, 0x16	; 22
}
     9d8:	81 70       	andi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	08 95       	ret

000009de <oled_write>:
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = selector[col];
		
	}
}
void oled_write(uint8_t character){	
     9de:	28 e0       	ldi	r18, 0x08	; 8
     9e0:	82 9f       	mul	r24, r18
     9e2:	c0 01       	movw	r24, r0
     9e4:	11 24       	eor	r1, r1
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	80 59       	subi	r24, 0x90	; 144
     9ec:	90 40       	sbci	r25, 0x00	; 0
     9ee:	fc 01       	movw	r30, r24
     9f0:	e2 0f       	add	r30, r18
     9f2:	f3 1f       	adc	r31, r19
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = pgm_read_byte(&font[character-' '][col]);
     9f4:	e4 91       	lpm	r30, Z
     9f6:	e0 93 00 12 	sts	0x1200, r30
     9fa:	2f 5f       	subi	r18, 0xFF	; 255
     9fc:	3f 4f       	sbci	r19, 0xFF	; 255
		*oled_data = selector[col];
		
	}
}
void oled_write(uint8_t character){	
	for(uint8_t col = 0; col < font_width; col++){
     9fe:	28 30       	cpi	r18, 0x08	; 8
     a00:	31 05       	cpc	r19, r1
     a02:	a9 f7       	brne	.-22     	; 0x9ee <oled_write+0x10>
		*oled_data = pgm_read_byte(&font[character-' '][col]);
		
	}
}
     a04:	08 95       	ret

00000a06 <oled_control_assign>:
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     a06:	80 93 00 10 	sts	0x1000, r24
     a0a:	08 95       	ret

00000a0c <oled_write_selector>:
}
void oled_write_selector(){
     a0c:	ec e2       	ldi	r30, 0x2C	; 44
     a0e:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = selector[col];
     a10:	81 91       	ld	r24, Z+
     a12:	80 93 00 12 	sts	0x1200, r24
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
}
void oled_write_selector(){
	for(uint8_t col = 0; col < font_width; col++){
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	e4 33       	cpi	r30, 0x34	; 52
     a1a:	f8 07       	cpc	r31, r24
     a1c:	c9 f7       	brne	.-14     	; 0xa10 <oled_write_selector+0x4>
		*oled_data = selector[col];
		
	}
}
     a1e:	08 95       	ret

00000a20 <oled_set_start_col>:
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     a20:	e0 e0       	ldi	r30, 0x00	; 0
     a22:	f0 e1       	ldi	r31, 0x10	; 16
     a24:	91 e2       	ldi	r25, 0x21	; 33
     a26:	90 83       	st	Z, r25
     a28:	80 83       	st	Z, r24
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	80 83       	st	Z, r24
     a2e:	08 95       	ret

00000a30 <oled_write_string>:
	oled_control_assign(0x21);
	oled_control_assign(start_col);
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
	oled_control_assign(0xb0 + line_nbr);
     a34:	60 55       	subi	r22, 0x50	; 80
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     a36:	60 93 00 10 	sts	0x1000, r22
     a3a:	ec 01       	movw	r28, r24
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
	oled_control_assign(0xb0 + line_nbr);
	for(int i = 0; str[i] != '\0'; i++){
     a3c:	89 91       	ld	r24, Y+
     a3e:	88 23       	and	r24, r24
     a40:	19 f0       	breq	.+6      	; 0xa48 <oled_write_string+0x18>
		oled_write(str[i]);
     a42:	0e 94 ef 04 	call	0x9de	; 0x9de <oled_write>
     a46:	fa cf       	rjmp	.-12     	; 0xa3c <oled_write_string+0xc>
	}
}
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <oled_clear_screen>:
void oled_clear_screen(){
     a4e:	20 eb       	ldi	r18, 0xB0	; 176
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     a50:	20 93 00 10 	sts	0x1000, r18
     a54:	80 e8       	ldi	r24, 0x80	; 128
     a56:	90 e0       	ldi	r25, 0x00	; 0
}
void oled_clear_screen(){
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
     a58:	10 92 00 12 	sts	0x1200, r1
     a5c:	01 97       	sbiw	r24, 0x01	; 1
	}
}
void oled_clear_screen(){
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
     a5e:	00 97       	sbiw	r24, 0x00	; 0
     a60:	d9 f7       	brne	.-10     	; 0xa58 <oled_clear_screen+0xa>
     a62:	2f 5f       	subi	r18, 0xFF	; 255
	for(int i = 0; str[i] != '\0'; i++){
		oled_write(str[i]);
	}
}
void oled_clear_screen(){
	for(int page = 0; page < 8; page++){
     a64:	28 3b       	cpi	r18, 0xB8	; 184
     a66:	a1 f7       	brne	.-24     	; 0xa50 <oled_clear_screen+0x2>
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
		}
		
	}
}
     a68:	08 95       	ret

00000a6a <oled_init>:
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     a6a:	e0 e0       	ldi	r30, 0x00	; 0
     a6c:	f0 e1       	ldi	r31, 0x10	; 16
     a6e:	8e ea       	ldi	r24, 0xAE	; 174
     a70:	80 83       	st	Z, r24
     a72:	81 ea       	ldi	r24, 0xA1	; 161
     a74:	80 83       	st	Z, r24
     a76:	8a ed       	ldi	r24, 0xDA	; 218
     a78:	80 83       	st	Z, r24
     a7a:	82 e1       	ldi	r24, 0x12	; 18
     a7c:	80 83       	st	Z, r24
     a7e:	88 ec       	ldi	r24, 0xC8	; 200
     a80:	80 83       	st	Z, r24
     a82:	88 ea       	ldi	r24, 0xA8	; 168
     a84:	80 83       	st	Z, r24
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	80 83       	st	Z, r24
     a8a:	85 ed       	ldi	r24, 0xD5	; 213
     a8c:	80 83       	st	Z, r24
     a8e:	80 e8       	ldi	r24, 0x80	; 128
     a90:	80 83       	st	Z, r24
     a92:	81 e8       	ldi	r24, 0x81	; 129
     a94:	80 83       	st	Z, r24
     a96:	80 e5       	ldi	r24, 0x50	; 80
     a98:	80 83       	st	Z, r24
     a9a:	89 ed       	ldi	r24, 0xD9	; 217
     a9c:	80 83       	st	Z, r24
     a9e:	81 e2       	ldi	r24, 0x21	; 33
     aa0:	80 83       	st	Z, r24
     aa2:	80 e2       	ldi	r24, 0x20	; 32
     aa4:	80 83       	st	Z, r24
     aa6:	82 e0       	ldi	r24, 0x02	; 2
     aa8:	80 83       	st	Z, r24
     aaa:	8b ed       	ldi	r24, 0xDB	; 219
     aac:	80 83       	st	Z, r24
     aae:	80 e3       	ldi	r24, 0x30	; 48
     ab0:	80 83       	st	Z, r24
     ab2:	8d ea       	ldi	r24, 0xAD	; 173
     ab4:	80 83       	st	Z, r24
     ab6:	10 82       	st	Z, r1
     ab8:	84 ea       	ldi	r24, 0xA4	; 164
     aba:	80 83       	st	Z, r24
     abc:	86 ea       	ldi	r24, 0xA6	; 166
     abe:	80 83       	st	Z, r24
     ac0:	8f ea       	ldi	r24, 0xAF	; 175
     ac2:	80 83       	st	Z, r24
	oled_control_assign(0xad);    //master configuration
	oled_control_assign(0x00);
	oled_control_assign(0xa4);    //out follows RAM content
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
     ac4:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <oled_clear_screen>

00000ac8 <oled_initiate_party_mode>:
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     ac8:	86 ea       	ldi	r24, 0xA6	; 166
     aca:	80 93 00 10 	sts	0x1000, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ace:	2f ef       	ldi	r18, 0xFF	; 255
     ad0:	8f e7       	ldi	r24, 0x7F	; 127
     ad2:	91 e0       	ldi	r25, 0x01	; 1
     ad4:	21 50       	subi	r18, 0x01	; 1
     ad6:	80 40       	sbci	r24, 0x00	; 0
     ad8:	90 40       	sbci	r25, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <oled_initiate_party_mode+0xc>
     adc:	00 c0       	rjmp	.+0      	; 0xade <oled_initiate_party_mode+0x16>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <oled_initiate_party_mode+0x18>
     ae0:	87 ea       	ldi	r24, 0xA7	; 167
     ae2:	80 93 00 10 	sts	0x1000, r24
     ae6:	2f ef       	ldi	r18, 0xFF	; 255
     ae8:	8f e7       	ldi	r24, 0x7F	; 127
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	21 50       	subi	r18, 0x01	; 1
     aee:	80 40       	sbci	r24, 0x00	; 0
     af0:	90 40       	sbci	r25, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <oled_initiate_party_mode+0x24>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <oled_initiate_party_mode+0x2e>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <oled_initiate_party_mode+0x30>
     af8:	08 95       	ret

00000afa <oled_printf>:
	_delay_ms(100);
	oled_control_assign(0xa7);
	_delay_ms(100);
}

void oled_printf(char* fmt, ...){
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	fe 01       	movw	r30, r28
     b04:	35 96       	adiw	r30, 0x05	; 5
     b06:	61 91       	ld	r22, Z+
     b08:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     b0a:	af 01       	movw	r20, r30
     b0c:	86 e0       	ldi	r24, 0x06	; 6
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vfprintf>
	va_end(v);
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <ir_init>:
#include "ir.h"

ir_state ir;

void ir_init(void){
	ir = new_ir_state(0, 0, 0);
     b1a:	ec ea       	ldi	r30, 0xAC	; 172
     b1c:	f1 e0       	ldi	r31, 0x01	; 1
     b1e:	10 82       	st	Z, r1
     b20:	12 82       	std	Z+2, r1	; 0x02
     b22:	11 82       	std	Z+1, r1	; 0x01
     b24:	13 82       	std	Z+3, r1	; 0x03
     b26:	08 95       	ret

00000b28 <ir_beam_blocked>:
}

uint8_t ir_beam_blocked(uint8_t ir_value){
	uint8_t newState = 0;
	ir.sum += ir_value;
     b28:	20 91 ad 01 	lds	r18, 0x01AD
     b2c:	30 91 ae 01 	lds	r19, 0x01AE
     b30:	28 0f       	add	r18, r24
     b32:	31 1d       	adc	r19, r1
     b34:	30 93 ae 01 	sts	0x01AE, r19
     b38:	20 93 ad 01 	sts	0x01AD, r18
	(ir.samples)++;
     b3c:	80 91 ac 01 	lds	r24, 0x01AC
     b40:	8f 5f       	subi	r24, 0xFF	; 255
     b42:	80 93 ac 01 	sts	0x01AC, r24
	
	//Check state every 20 measures
	if(ir.samples == 20){
     b46:	84 31       	cpi	r24, 0x14	; 20
     b48:	89 f4       	brne	.+34     	; 0xb6c <ir_beam_blocked+0x44>
		ir.sum = ir.sum/ir.samples;
     b4a:	c9 01       	movw	r24, r18
     b4c:	64 e1       	ldi	r22, 0x14	; 20
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	0e 94 8d 0a 	call	0x151a	; 0x151a <__udivmodhi4>
     b54:	70 93 ae 01 	sts	0x01AE, r23
     b58:	60 93 ad 01 	sts	0x01AD, r22
		ir.samples = 1;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	80 93 ac 01 	sts	0x01AC, r24
		
		//Beam blocked continously
		if(ir.sum < 100){
     b62:	64 36       	cpi	r22, 0x64	; 100
     b64:	71 05       	cpc	r23, r1
     b66:	20 f0       	brcs	.+8      	; 0xb70 <ir_beam_blocked+0x48>
			newState = 1;
		}
		else{
			ir.beam_blocked = 0;
     b68:	10 92 af 01 	sts	0x01AF, r1
void ir_init(void){
	ir = new_ir_state(0, 0, 0);
}

uint8_t ir_beam_blocked(uint8_t ir_value){
	uint8_t newState = 0;
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	01 c0       	rjmp	.+2      	; 0xb72 <ir_beam_blocked+0x4a>
		ir.sum = ir.sum/ir.samples;
		ir.samples = 1;
		
		//Beam blocked continously
		if(ir.sum < 100){
			newState = 1;
     b70:	81 e0       	ldi	r24, 0x01	; 1
			newState = 0;
		}
	}
	
	//IR beam blocked for more than 20 samples
	if(!ir.beam_blocked && newState){
     b72:	90 91 af 01 	lds	r25, 0x01AF
     b76:	91 11       	cpse	r25, r1
     b78:	06 c0       	rjmp	.+12     	; 0xb86 <ir_beam_blocked+0x5e>
     b7a:	88 23       	and	r24, r24
     b7c:	21 f0       	breq	.+8      	; 0xb86 <ir_beam_blocked+0x5e>
		ir.beam_blocked = 1;
     b7e:	81 e0       	ldi	r24, 0x01	; 1
     b80:	80 93 af 01 	sts	0x01AF, r24
		return 1;
     b84:	08 95       	ret
	}
	return 0;
     b86:	80 e0       	ldi	r24, 0x00	; 0

}
     b88:	08 95       	ret

00000b8a <timer_init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdlib.h>

void timer_init() {
	TCCR3A &= ~(1<<WGM30);
     b8a:	eb e8       	ldi	r30, 0x8B	; 139
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM31);
     b94:	80 81       	ld	r24, Z
     b96:	8d 7f       	andi	r24, 0xFD	; 253
     b98:	80 83       	st	Z, r24
	TCCR3B |=  (1<<WGM32);
     b9a:	ea e8       	ldi	r30, 0x8A	; 138
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	80 81       	ld	r24, Z
     ba0:	88 60       	ori	r24, 0x08	; 8
     ba2:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<WGM33);
     ba4:	80 81       	ld	r24, Z
     ba6:	8f 7e       	andi	r24, 0xEF	; 239
     ba8:	80 83       	st	Z, r24
	
	OCR3A = 49; //68 for 70Hz, 4760 for 1Hz
     baa:	81 e3       	ldi	r24, 0x31	; 49
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	90 93 87 00 	sts	0x0087, r25
     bb2:	80 93 86 00 	sts	0x0086, r24
	
	//enable interrupt on OCR3A compare
	ETIMSK |= (1<<OCIE3A);
     bb6:	ed e7       	ldi	r30, 0x7D	; 125
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 61       	ori	r24, 0x10	; 16
     bbe:	80 83       	st	Z, r24
	TIFR |= (1<<ICF1);
     bc0:	88 b7       	in	r24, 0x38	; 56
     bc2:	88 60       	ori	r24, 0x08	; 8
     bc4:	88 bf       	out	0x38, r24	; 56
	
	sei();
     bc6:	78 94       	sei
     bc8:	08 95       	ret

00000bca <timer_enable>:
}

void timer_enable(){
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR3B |=  (1<<CS32) | (1<<CS30);
     bca:	ea e8       	ldi	r30, 0x8A	; 138
     bcc:	f0 e0       	ldi	r31, 0x00	; 0
     bce:	80 81       	ld	r24, Z
     bd0:	85 60       	ori	r24, 0x05	; 5
     bd2:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
     bd4:	80 81       	ld	r24, Z
     bd6:	8d 7f       	andi	r24, 0xFD	; 253
     bd8:	80 83       	st	Z, r24
     bda:	08 95       	ret

00000bdc <timer_disable>:
}

void timer_disable(){
	TCCR3B &= ~((1<<CS30) | (1<<CS31) | (1<<CS32));
     bdc:	ea e8       	ldi	r30, 0x8A	; 138
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	88 7f       	andi	r24, 0xF8	; 248
     be4:	80 83       	st	Z, r24
     be6:	08 95       	ret

00000be8 <__vector_7>:
	else{
		timer_disable();
	}
}

ISR(TIMER3_COMPA_vect){
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	2f 93       	push	r18
     bf4:	3f 93       	push	r19
     bf6:	4f 93       	push	r20
     bf8:	5f 93       	push	r21
     bfa:	6f 93       	push	r22
     bfc:	7f 93       	push	r23
     bfe:	8f 93       	push	r24
     c00:	9f 93       	push	r25
     c02:	af 93       	push	r26
     c04:	bf 93       	push	r27
     c06:	ef 93       	push	r30
     c08:	ff 93       	push	r31
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	2b 97       	sbiw	r28, 0x0b	; 11
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	cd bf       	out	0x3d, r28	; 61
	can_message msg = new_can_message(0, 0, NULL);
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	uint8_t game_lost = 0;
	
	if(can_pollInterrupt()){
     c2a:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     c2e:	88 23       	and	r24, r24
     c30:	21 f0       	breq	.+8      	; 0xc3a <__vector_7+0x52>
		msg = can_read();
     c32:	ce 01       	movw	r24, r28
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	0e 94 43 02 	call	0x486	; 0x486 <can_read>
	}
	
	if(msg.id == MCP_IR_MESSAGE){
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	9a 81       	ldd	r25, Y+2	; 0x02
     c3e:	86 36       	cpi	r24, 0x66	; 102
     c40:	91 05       	cpc	r25, r1
     c42:	19 f0       	breq	.+6      	; 0xc4a <__vector_7+0x62>
		game_lost = ir_beam_blocked(msg.data[0]);
	}
	
	if (!game_lost){	
		game_track_score(); 
     c44:	0e 94 49 06 	call	0xc92	; 0xc92 <game_track_score>
     c48:	05 c0       	rjmp	.+10     	; 0xc54 <__vector_7+0x6c>
	if(can_pollInterrupt()){
		msg = can_read();
	}
	
	if(msg.id == MCP_IR_MESSAGE){
		game_lost = ir_beam_blocked(msg.data[0]);
     c4a:	8c 81       	ldd	r24, Y+4	; 0x04
     c4c:	0e 94 94 05 	call	0xb28	; 0xb28 <ir_beam_blocked>
	}
	
	if (!game_lost){	
     c50:	88 23       	and	r24, r24
     c52:	c1 f3       	breq	.-16     	; 0xc44 <__vector_7+0x5c>
		game_track_score(); 
	}
	
	can_send_joystick_message();
     c54:	0e 94 e5 02 	call	0x5ca	; 0x5ca <can_send_joystick_message>
	can_send_slider_message();
     c58:	0e 94 0e 03 	call	0x61c	; 0x61c <can_send_slider_message>
	can_send_button_message();
     c5c:	0e 94 33 03 	call	0x666	; 0x666 <can_send_button_message>
	
     c60:	2b 96       	adiw	r28, 0x0b	; 11
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	f8 94       	cli
     c66:	de bf       	out	0x3e, r29	; 62
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	cd bf       	out	0x3d, r28	; 61
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	ff 91       	pop	r31
     c72:	ef 91       	pop	r30
     c74:	bf 91       	pop	r27
     c76:	af 91       	pop	r26
     c78:	9f 91       	pop	r25
     c7a:	8f 91       	pop	r24
     c7c:	7f 91       	pop	r23
     c7e:	6f 91       	pop	r22
     c80:	5f 91       	pop	r21
     c82:	4f 91       	pop	r20
     c84:	3f 91       	pop	r19
     c86:	2f 91       	pop	r18
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <game_track_score>:
	game_reset_score();
	oled_clear_screen();
}

void game_track_score(){
	game_score_counter++;
     c92:	80 91 b1 01 	lds	r24, 0x01B1
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	80 93 b1 01 	sts	0x01B1, r24
	
	//Using 70 Hz clock
	if(game_score_counter > 7){
     c9c:	88 30       	cpi	r24, 0x08	; 8
     c9e:	c8 f0       	brcs	.+50     	; 0xcd2 <game_track_score+0x40>
		game_score++;
     ca0:	80 91 b0 01 	lds	r24, 0x01B0
     ca4:	8f 5f       	subi	r24, 0xFF	; 255
     ca6:	80 93 b0 01 	sts	0x01B0, r24
		game_score_counter = 0;
     caa:	10 92 b1 01 	sts	0x01B1, r1
		oled_set_start_col(16);
     cae:	80 e1       	ldi	r24, 0x10	; 16
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 10 05 	call	0xa20	; 0xa20 <oled_set_start_col>
		oled_printf("%d", game_score);
     cb6:	80 91 b0 01 	lds	r24, 0x01B0
     cba:	1f 92       	push	r1
     cbc:	8f 93       	push	r24
     cbe:	84 e3       	ldi	r24, 0x34	; 52
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	9f 93       	push	r25
     cc4:	8f 93       	push	r24
     cc6:	0e 94 7d 05 	call	0xafa	; 0xafa <oled_printf>
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	08 95       	ret

00000cd4 <game_end>:
	}
}

void game_end(void){
	timer_disable();
     cd4:	0e 94 ee 05 	call	0xbdc	; 0xbdc <timer_disable>
	oled_clear_screen();
     cd8:	0e 94 27 05 	call	0xa4e	; 0xa4e <oled_clear_screen>
	highscore_update(game_score);
     cdc:	80 91 b0 01 	lds	r24, 0x01B0
     ce0:	0c 94 8c 06 	jmp	0xd18	; 0xd18 <highscore_update>

00000ce4 <game_reset_score>:
}

void game_reset_score(void){
	game_score = 0;
     ce4:	10 92 b0 01 	sts	0x01B0, r1
	game_score_counter = 0;
     ce8:	10 92 b1 01 	sts	0x01B1, r1
     cec:	08 95       	ret

00000cee <game_start>:

uint8_t game_score;
uint8_t game_score_counter;

void game_start(void){
	game_lost = 0;
     cee:	10 92 ab 01 	sts	0x01AB, r1
     cf2:	10 92 aa 01 	sts	0x01AA, r1
	timer_enable();
     cf6:	0e 94 e5 05 	call	0xbca	; 0xbca <timer_enable>
	game_reset_score();
     cfa:	0e 94 72 06 	call	0xce4	; 0xce4 <game_reset_score>
	oled_clear_screen();
     cfe:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <oled_clear_screen>

00000d02 <game_main>:
	game_score = 0;
	game_score_counter = 0;
}

void game_main(void){
	game_start();
     d02:	0e 94 77 06 	call	0xcee	; 0xcee <game_start>
	while(!game_lost){
     d06:	80 91 aa 01 	lds	r24, 0x01AA
     d0a:	90 91 ab 01 	lds	r25, 0x01AB
     d0e:	89 2b       	or	r24, r25
     d10:	09 f4       	brne	.+2      	; 0xd14 <game_main+0x12>
     d12:	ff cf       	rjmp	.-2      	; 0xd12 <game_main+0x10>
	}
	
	game_end();
     d14:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <game_end>

00000d18 <highscore_update>:
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
	}
}
	
void highscore_update(uint8_t score){
     d18:	df 92       	push	r13
     d1a:	ef 92       	push	r14
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	d8 2e       	mov	r13, r24
     d28:	e2 eb       	ldi	r30, 0xB2	; 178
     d2a:	f1 e0       	ldi	r31, 0x01	; 1
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
     d2c:	c0 e0       	ldi	r28, 0x00	; 0
     d2e:	d0 e0       	ldi	r29, 0x00	; 0
		if(score > highscores[i]){
     d30:	81 91       	ld	r24, Z+
     d32:	8d 15       	cp	r24, r13
     d34:	20 f5       	brcc	.+72     	; 0xd7e <highscore_update+0x66>
     d36:	88 eb       	ldi	r24, 0xB8	; 184
     d38:	e8 2e       	mov	r14, r24
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	f8 2e       	mov	r15, r24
     d3e:	8e 01       	movw	r16, r28
     d40:	0e 54       	subi	r16, 0x4E	; 78
     d42:	1e 4f       	sbci	r17, 0xFE	; 254
     d44:	97 01       	movw	r18, r14
     d46:	22 5b       	subi	r18, 0xB2	; 178
     d48:	31 40       	sbci	r19, 0x01	; 1
			for(int j = NUMBER_OF_HIGHSCORES - 1; j == i; j--){
				highscores[j - 1] = highscores[j];
     d4a:	f8 01       	movw	r30, r16
}
	
void highscore_update(uint8_t score){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
		if(score > highscores[i]){
			for(int j = NUMBER_OF_HIGHSCORES - 1; j == i; j--){
     d4c:	2c 17       	cp	r18, r28
     d4e:	3d 07       	cpc	r19, r29
     d50:	51 f4       	brne	.+20     	; 0xd66 <highscore_update+0x4e>
				highscores[j - 1] = highscores[j];
     d52:	80 81       	ld	r24, Z
     d54:	f7 01       	movw	r30, r14
     d56:	82 93       	st	-Z, r24
     d58:	7f 01       	movw	r14, r30
				EEPROM_write(HIGHSCORE_START_ADDR + j, highscores[j]);
     d5a:	f8 01       	movw	r30, r16
     d5c:	60 81       	ld	r22, Z
     d5e:	ce 01       	movw	r24, r28
     d60:	0e 94 ca 03 	call	0x794	; 0x794 <EEPROM_write>
     d64:	ef cf       	rjmp	.-34     	; 0xd44 <highscore_update+0x2c>
			}
			highscores[i] = score;
     d66:	d0 82       	st	Z, r13
			EEPROM_write(HIGHSCORE_START_ADDR + i, highscores[i]);
     d68:	6d 2d       	mov	r22, r13
     d6a:	ce 01       	movw	r24, r28
			break;
		}
	}
}
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
			for(int j = NUMBER_OF_HIGHSCORES - 1; j == i; j--){
				highscores[j - 1] = highscores[j];
				EEPROM_write(HIGHSCORE_START_ADDR + j, highscores[j]);
			}
			highscores[i] = score;
			EEPROM_write(HIGHSCORE_START_ADDR + i, highscores[i]);
     d7a:	0c 94 ca 03 	jmp	0x794	; 0x794 <EEPROM_write>
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
	}
}
	
void highscore_update(uint8_t score){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
     d7e:	21 96       	adiw	r28, 0x01	; 1
     d80:	c7 30       	cpi	r28, 0x07	; 7
     d82:	d1 05       	cpc	r29, r1
     d84:	a9 f6       	brne	.-86     	; 0xd30 <highscore_update+0x18>
			highscores[i] = score;
			EEPROM_write(HIGHSCORE_START_ADDR + i, highscores[i]);
			break;
		}
	}
}
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	df 90       	pop	r13
     d94:	08 95       	ret

00000d96 <main>:
#include "Drivers/timer/timer.h"
#include "Game/game.h"
#include "Interface/interface.h"

int main(void)
{
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	67 97       	sbiw	r28, 0x17	; 23
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	f8 94       	cli
     da4:	de bf       	out	0x3e, r29	; 62
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cd bf       	out	0x3d, r28	; 61
	Joystick joy_position;
	volatile int select_pos = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9f 8b       	std	Y+23, r25	; 0x17
     db0:	8e 8b       	std	Y+22, r24	; 0x16
	Menu *current_menu;
	
	USART_Init(MYUBRR);
     db2:	8f e1       	ldi	r24, 0x1F	; 31
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 b9 03 	call	0x772	; 0x772 <USART_Init>
	fdevopen((int (*)(char,  struct __file *))USART_Transmit, (int (*)(struct __file *))USART_Receive);
     dba:	66 ec       	ldi	r22, 0xC6	; 198
     dbc:	73 e0       	ldi	r23, 0x03	; 3
     dbe:	82 ec       	ldi	r24, 0xC2	; 194
     dc0:	93 e0       	ldi	r25, 0x03	; 3
     dc2:	0e 94 c8 0b 	call	0x1790	; 0x1790 <fdevopen>
	printf("UART setup done\n");
     dc6:	87 e3       	ldi	r24, 0x37	; 55
     dc8:	91 e0       	ldi	r25, 0x01	; 1
     dca:	0e 94 27 0c 	call	0x184e	; 0x184e <puts>
	SRAM_init();
     dce:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <SRAM_init>
	printf("SRAM setup done\n");
     dd2:	87 e4       	ldi	r24, 0x47	; 71
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	0e 94 27 0c 	call	0x184e	; 0x184e <puts>
	JOY_init(&joy_position);
     dda:	ce 01       	movw	r24, r28
     ddc:	0c 96       	adiw	r24, 0x0c	; 12
     dde:	0e 94 c6 04 	call	0x98c	; 0x98c <JOY_init>
	printf("JOY setup done\n");
     de2:	87 e5       	ldi	r24, 0x57	; 87
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	0e 94 27 0c 	call	0x184e	; 0x184e <puts>
	oled_init();
     dea:	0e 94 35 05 	call	0xa6a	; 0xa6a <oled_init>
	can_init();
     dee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	timer_init();
     df2:	0e 94 c5 05 	call	0xb8a	; 0xb8a <timer_init>
	ir_init();
     df6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <ir_init>
	printf("Initialization done\n");
     dfa:	86 e6       	ldi	r24, 0x66	; 102
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 27 0c 	call	0x184e	; 0x184e <puts>
	current_menu = interface_init();
     e02:	0e 94 ac 07 	call	0xf58	; 0xf58 <interface_init>
     e06:	9d 8b       	std	Y+21, r25	; 0x15
     e08:	8c 8b       	std	Y+20, r24	; 0x14
	can_message msg;
	
    while(1)
        {	
			
			JOY_read_joystick(&joy_position);
     e0a:	ce 01       	movw	r24, r28
     e0c:	0c 96       	adiw	r24, 0x0c	; 12
     e0e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <JOY_read_joystick>
			interface_select(joy_position, &select_pos, &current_menu);
     e12:	ce 01       	movw	r24, r28
     e14:	44 96       	adiw	r24, 0x14	; 20
     e16:	7c 01       	movw	r14, r24
     e18:	8e 01       	movw	r16, r28
     e1a:	0a 5e       	subi	r16, 0xEA	; 234
     e1c:	1f 4f       	sbci	r17, 0xFF	; 255
     e1e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e20:	3d 85       	ldd	r19, Y+13	; 0x0d
     e22:	4e 85       	ldd	r20, Y+14	; 0x0e
     e24:	5f 85       	ldd	r21, Y+15	; 0x0f
     e26:	68 89       	ldd	r22, Y+16	; 0x10
     e28:	79 89       	ldd	r23, Y+17	; 0x11
     e2a:	8a 89       	ldd	r24, Y+18	; 0x12
     e2c:	9b 89       	ldd	r25, Y+19	; 0x13
     e2e:	0e 94 f7 07 	call	0xfee	; 0xfee <interface_select>
			
			if(can_pollInterrupt()){
     e32:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     e36:	88 23       	and	r24, r24
     e38:	21 f0       	breq	.+8      	; 0xe42 <main+0xac>
				msg = can_read();
     e3a:	ce 01       	movw	r24, r28
     e3c:	01 96       	adiw	r24, 0x01	; 1
     e3e:	0e 94 43 02 	call	0x486	; 0x486 <can_read>
			}
			game_main();
     e42:	0e 94 81 06 	call	0xd02	; 0xd02 <game_main>
     e46:	e1 cf       	rjmp	.-62     	; 0xe0a <main+0x74>

00000e48 <new_Menu>:
	
	
	interface_print(mainMenu);
	return mainMenu;
}
Menu* new_Menu(char* title, void(*action)(void), uint8_t num_submenus){
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	1f 92       	push	r1
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	8c 01       	movw	r16, r24
     e60:	7b 01       	movw	r14, r22
	Menu* m = malloc(sizeof(Menu));
     e62:	89 e0       	ldi	r24, 0x09	; 9
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	49 83       	std	Y+1, r20	; 0x01
     e68:	0e 94 a1 0a 	call	0x1542	; 0x1542 <malloc>
     e6c:	6c 01       	movw	r12, r24
	
	m->title = title;
     e6e:	fc 01       	movw	r30, r24
     e70:	16 83       	std	Z+6, r17	; 0x06
     e72:	05 83       	std	Z+5, r16	; 0x05
	m->num_submenus = num_submenus;
     e74:	49 81       	ldd	r20, Y+1	; 0x01
     e76:	40 83       	st	Z, r20
	m->action = action;
     e78:	f0 86       	std	Z+8, r15	; 0x08
     e7a:	e7 82       	std	Z+7, r14	; 0x07
	m->submenus = malloc(sizeof(Menu)*num_submenus);
     e7c:	f9 e0       	ldi	r31, 0x09	; 9
     e7e:	4f 9f       	mul	r20, r31
     e80:	c0 01       	movw	r24, r0
     e82:	11 24       	eor	r1, r1
     e84:	0e 94 a1 0a 	call	0x1542	; 0x1542 <malloc>
     e88:	f6 01       	movw	r30, r12
     e8a:	92 83       	std	Z+2, r25	; 0x02
     e8c:	81 83       	std	Z+1, r24	; 0x01
	return m;
}
     e8e:	c6 01       	movw	r24, r12
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	08 95       	ret

00000ea4 <interface_draw_selector>:
	}
	
	interface_draw_selector(1);
	
}
void interface_draw_selector(int select_pos){
     ea4:	cf 93       	push	r28
     ea6:	c8 2f       	mov	r28, r24
	oled_set_start_col(0);
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 10 05 	call	0xa20	; 0xa20 <oled_set_start_col>
	oled_write(' ');
     eb0:	80 e2       	ldi	r24, 0x20	; 32
     eb2:	0e 94 ef 04 	call	0x9de	; 0x9de <oled_write>
	
	oled_set_start_col(0);
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 10 05 	call	0xa20	; 0xa20 <oled_set_start_col>
	oled_control_assign(0xb0 + select_pos);
     ebe:	80 eb       	ldi	r24, 0xB0	; 176
     ec0:	8c 0f       	add	r24, r28
     ec2:	0e 94 03 05 	call	0xa06	; 0xa06 <oled_control_assign>
	oled_write_selector();
     ec6:	0e 94 06 05 	call	0xa0c	; 0xa0c <oled_write_selector>
	
	oled_set_start_col(8);
     eca:	88 e0       	ldi	r24, 0x08	; 8
     ecc:	90 e0       	ldi	r25, 0x00	; 0
}
     ece:	cf 91       	pop	r28
	
	oled_set_start_col(0);
	oled_control_assign(0xb0 + select_pos);
	oled_write_selector();
	
	oled_set_start_col(8);
     ed0:	0c 94 10 05 	jmp	0xa20	; 0xa20 <oled_set_start_col>

00000ed4 <interface_print>:
	m->num_submenus = num_submenus;
	m->action = action;
	m->submenus = malloc(sizeof(Menu)*num_submenus);
	return m;
}
void interface_print(Menu *menu){
     ed4:	ef 92       	push	r14
     ed6:	ff 92       	push	r15
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	8c 01       	movw	r16, r24
	oled_clear_screen();
     ee2:	0e 94 27 05 	call	0xa4e	; 0xa4e <oled_clear_screen>
	oled_set_start_col(0);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 10 05 	call	0xa20	; 0xa20 <oled_set_start_col>
	oled_write_string(menu->title, 0);
     eee:	60 e0       	ldi	r22, 0x00	; 0
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	d8 01       	movw	r26, r16
     ef4:	15 96       	adiw	r26, 0x05	; 5
     ef6:	8d 91       	ld	r24, X+
     ef8:	9c 91       	ld	r25, X
     efa:	16 97       	sbiw	r26, 0x06	; 6
     efc:	0e 94 18 05 	call	0xa30	; 0xa30 <oled_write_string>
	
	for(int i = 0; i < menu->num_submenus; i++){
     f00:	e1 2c       	mov	r14, r1
     f02:	f1 2c       	mov	r15, r1
     f04:	c0 e0       	ldi	r28, 0x00	; 0
     f06:	d0 e0       	ldi	r29, 0x00	; 0
     f08:	f8 01       	movw	r30, r16
     f0a:	80 81       	ld	r24, Z
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	c8 17       	cp	r28, r24
     f10:	d9 07       	cpc	r29, r25
     f12:	c4 f4       	brge	.+48     	; 0xf44 <interface_print+0x70>
		oled_set_start_col(10);
     f14:	8a e0       	ldi	r24, 0x0A	; 10
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 10 05 	call	0xa20	; 0xa20 <oled_set_start_col>
		oled_write_string(menu->submenus[i]->title, i + 1);
     f1c:	21 96       	adiw	r28, 0x01	; 1
     f1e:	d8 01       	movw	r26, r16
     f20:	11 96       	adiw	r26, 0x01	; 1
     f22:	ed 91       	ld	r30, X+
     f24:	fc 91       	ld	r31, X
     f26:	12 97       	sbiw	r26, 0x02	; 2
     f28:	ee 0d       	add	r30, r14
     f2a:	ff 1d       	adc	r31, r15
     f2c:	01 90       	ld	r0, Z+
     f2e:	f0 81       	ld	r31, Z
     f30:	e0 2d       	mov	r30, r0
     f32:	be 01       	movw	r22, r28
     f34:	85 81       	ldd	r24, Z+5	; 0x05
     f36:	96 81       	ldd	r25, Z+6	; 0x06
     f38:	0e 94 18 05 	call	0xa30	; 0xa30 <oled_write_string>
     f3c:	b2 e0       	ldi	r27, 0x02	; 2
     f3e:	eb 0e       	add	r14, r27
     f40:	f1 1c       	adc	r15, r1
     f42:	e2 cf       	rjmp	.-60     	; 0xf08 <interface_print+0x34>
	}
	
	interface_draw_selector(1);
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
	
}
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	1f 91       	pop	r17
     f4e:	0f 91       	pop	r16
     f50:	ff 90       	pop	r15
     f52:	ef 90       	pop	r14
	for(int i = 0; i < menu->num_submenus; i++){
		oled_set_start_col(10);
		oled_write_string(menu->submenus[i]->title, i + 1);
	}
	
	interface_draw_selector(1);
     f54:	0c 94 52 07 	jmp	0xea4	; 0xea4 <interface_draw_selector>

00000f58 <interface_init>:
#include <stdint.h>
#include <avr/io.h>
#include <stdio.h>
#include <stdlib.h>

Menu* interface_init(){
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
	Menu *mainMenu = new_Menu("Main menu", NULL, 2);
     f64:	42 e0       	ldi	r20, 0x02	; 2
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	8a e7       	ldi	r24, 0x7A	; 122
     f6c:	91 e0       	ldi	r25, 0x01	; 1
     f6e:	0e 94 24 07 	call	0xe48	; 0xe48 <new_Menu>
     f72:	ec 01       	movw	r28, r24
	Menu *menu1 = new_Menu("Screen options", NULL, 1);
     f74:	41 e0       	ldi	r20, 0x01	; 1
     f76:	60 e0       	ldi	r22, 0x00	; 0
     f78:	70 e0       	ldi	r23, 0x00	; 0
     f7a:	84 e8       	ldi	r24, 0x84	; 132
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	0e 94 24 07 	call	0xe48	; 0xe48 <new_Menu>
     f82:	8c 01       	movw	r16, r24
	Menu *menu2 = new_Menu("High scores", NULL, 1);
     f84:	41 e0       	ldi	r20, 0x01	; 1
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	83 e9       	ldi	r24, 0x93	; 147
     f8c:	91 e0       	ldi	r25, 0x01	; 1
     f8e:	0e 94 24 07 	call	0xe48	; 0xe48 <new_Menu>
     f92:	7c 01       	movw	r14, r24
	Menu *menu11 = new_Menu("Party mode", oled_initiate_party_mode, 0);
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	64 e6       	ldi	r22, 0x64	; 100
     f98:	75 e0       	ldi	r23, 0x05	; 5
     f9a:	8f e9       	ldi	r24, 0x9F	; 159
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	0e 94 24 07 	call	0xe48	; 0xe48 <new_Menu>
	mainMenu->submenus[0] = menu1, mainMenu->submenus[1] = menu2;
     fa2:	e9 81       	ldd	r30, Y+1	; 0x01
     fa4:	fa 81       	ldd	r31, Y+2	; 0x02
     fa6:	11 83       	std	Z+1, r17	; 0x01
     fa8:	00 83       	st	Z, r16
     faa:	e9 81       	ldd	r30, Y+1	; 0x01
     fac:	fa 81       	ldd	r31, Y+2	; 0x02
     fae:	f3 82       	std	Z+3, r15	; 0x03
     fb0:	e2 82       	std	Z+2, r14	; 0x02
	menu1->submenus[0] = menu11, menu1->prev = mainMenu;
     fb2:	d8 01       	movw	r26, r16
     fb4:	11 96       	adiw	r26, 0x01	; 1
     fb6:	ed 91       	ld	r30, X+
     fb8:	fc 91       	ld	r31, X
     fba:	12 97       	sbiw	r26, 0x02	; 2
     fbc:	91 83       	std	Z+1, r25	; 0x01
     fbe:	80 83       	st	Z, r24
     fc0:	14 96       	adiw	r26, 0x04	; 4
     fc2:	dc 93       	st	X, r29
     fc4:	ce 93       	st	-X, r28
     fc6:	13 97       	sbiw	r26, 0x03	; 3
	menu2->prev = mainMenu;
     fc8:	f7 01       	movw	r30, r14
     fca:	d4 83       	std	Z+4, r29	; 0x04
     fcc:	c3 83       	std	Z+3, r28	; 0x03
	menu11->submenus = NULL;
     fce:	dc 01       	movw	r26, r24
     fd0:	12 96       	adiw	r26, 0x02	; 2
     fd2:	1c 92       	st	X, r1
     fd4:	1e 92       	st	-X, r1
     fd6:	11 97       	sbiw	r26, 0x01	; 1
	
	
	interface_print(mainMenu);
     fd8:	ce 01       	movw	r24, r28
     fda:	0e 94 6a 07 	call	0xed4	; 0xed4 <interface_print>
	return mainMenu;
}
     fde:	ce 01       	movw	r24, r28
     fe0:	df 91       	pop	r29
     fe2:	cf 91       	pop	r28
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	08 95       	ret

00000fee <interface_select>:
	oled_control_assign(0xb0 + select_pos);
	oled_write_selector();
	
	oled_set_start_col(8);
}
void interface_select(Joystick joy, int *select_pos, Menu *(*current_menu)){
     fee:	df 92       	push	r13
     ff0:	ef 92       	push	r14
     ff2:	ff 92       	push	r15
     ff4:	0f 93       	push	r16
     ff6:	1f 93       	push	r17
     ff8:	cf 93       	push	r28
     ffa:	df 93       	push	r29
     ffc:	cd b7       	in	r28, 0x3d	; 61
     ffe:	de b7       	in	r29, 0x3e	; 62
    1000:	28 97       	sbiw	r28, 0x08	; 8
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	f8 94       	cli
    1006:	de bf       	out	0x3e, r29	; 62
    1008:	0f be       	out	0x3f, r0	; 63
    100a:	cd bf       	out	0x3d, r28	; 61
    100c:	29 83       	std	Y+1, r18	; 0x01
    100e:	3a 83       	std	Y+2, r19	; 0x02
    1010:	4b 83       	std	Y+3, r20	; 0x03
    1012:	5c 83       	std	Y+4, r21	; 0x04
    1014:	6d 83       	std	Y+5, r22	; 0x05
    1016:	7e 83       	std	Y+6, r23	; 0x06
    1018:	8f 83       	std	Y+7, r24	; 0x07
    101a:	98 87       	std	Y+8, r25	; 0x08
	direction previous_direction = NEUTRAL;
    101c:	d1 2c       	mov	r13, r1

	while(JOY_get_direction(joy) != NEUTRAL){
    101e:	29 81       	ldd	r18, Y+1	; 0x01
    1020:	3a 81       	ldd	r19, Y+2	; 0x02
    1022:	4b 81       	ldd	r20, Y+3	; 0x03
    1024:	5c 81       	ldd	r21, Y+4	; 0x04
    1026:	6d 81       	ldd	r22, Y+5	; 0x05
    1028:	7e 81       	ldd	r23, Y+6	; 0x06
    102a:	8f 81       	ldd	r24, Y+7	; 0x07
    102c:	98 85       	ldd	r25, Y+8	; 0x08
    102e:	0e 94 60 04 	call	0x8c0	; 0x8c0 <JOY_get_direction>
    1032:	88 23       	and	r24, r24
    1034:	81 f0       	breq	.+32     	; 0x1056 <interface_select+0x68>
		previous_direction = JOY_get_direction(joy);
    1036:	29 81       	ldd	r18, Y+1	; 0x01
    1038:	3a 81       	ldd	r19, Y+2	; 0x02
    103a:	4b 81       	ldd	r20, Y+3	; 0x03
    103c:	5c 81       	ldd	r21, Y+4	; 0x04
    103e:	6d 81       	ldd	r22, Y+5	; 0x05
    1040:	7e 81       	ldd	r23, Y+6	; 0x06
    1042:	8f 81       	ldd	r24, Y+7	; 0x07
    1044:	98 85       	ldd	r25, Y+8	; 0x08
    1046:	0e 94 60 04 	call	0x8c0	; 0x8c0 <JOY_get_direction>
    104a:	d8 2e       	mov	r13, r24
		JOY_read_joystick(&joy);
    104c:	ce 01       	movw	r24, r28
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <JOY_read_joystick>
    1054:	e4 cf       	rjmp	.-56     	; 0x101e <interface_select+0x30>
	} //Wait for joy to reach neutral position.
	
	switch(previous_direction){
    1056:	82 e0       	ldi	r24, 0x02	; 2
    1058:	d8 16       	cp	r13, r24
    105a:	d1 f0       	breq	.+52     	; 0x1090 <interface_select+0xa2>
    105c:	8d 15       	cp	r24, r13
    105e:	20 f0       	brcs	.+8      	; 0x1068 <interface_select+0x7a>
    1060:	a1 e0       	ldi	r26, 0x01	; 1
    1062:	da 16       	cp	r13, r26
    1064:	49 f0       	breq	.+18     	; 0x1078 <interface_select+0x8a>
    1066:	5c c0       	rjmp	.+184    	; 0x1120 <interface_select+0x132>
    1068:	b3 e0       	ldi	r27, 0x03	; 3
    106a:	db 16       	cp	r13, r27
    106c:	09 f4       	brne	.+2      	; 0x1070 <interface_select+0x82>
    106e:	47 c0       	rjmp	.+142    	; 0x10fe <interface_select+0x110>
    1070:	e4 e0       	ldi	r30, 0x04	; 4
    1072:	de 16       	cp	r13, r30
    1074:	f9 f0       	breq	.+62     	; 0x10b4 <interface_select+0xc6>
    1076:	54 c0       	rjmp	.+168    	; 0x1120 <interface_select+0x132>
		case UP:
			if(*select_pos != 1){
    1078:	d8 01       	movw	r26, r16
    107a:	8d 91       	ld	r24, X+
    107c:	9c 91       	ld	r25, X
    107e:	11 97       	sbiw	r26, 0x01	; 1
    1080:	81 30       	cpi	r24, 0x01	; 1
    1082:	91 05       	cpc	r25, r1
    1084:	09 f4       	brne	.+2      	; 0x1088 <interface_select+0x9a>
    1086:	4c c0       	rjmp	.+152    	; 0x1120 <interface_select+0x132>
				(*select_pos)--;
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	8d 93       	st	X+, r24
    108c:	9c 93       	st	X, r25
    108e:	0f c0       	rjmp	.+30     	; 0x10ae <interface_select+0xc0>
				interface_draw_selector(*select_pos);
			}
			break;
			
		case DOWN:
			if((*current_menu)->num_submenus != *select_pos){
    1090:	f8 01       	movw	r30, r16
    1092:	80 81       	ld	r24, Z
    1094:	91 81       	ldd	r25, Z+1	; 0x01
    1096:	d7 01       	movw	r26, r14
    1098:	ed 91       	ld	r30, X+
    109a:	fc 91       	ld	r31, X
    109c:	20 81       	ld	r18, Z
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	28 17       	cp	r18, r24
    10a2:	39 07       	cpc	r19, r25
    10a4:	e9 f1       	breq	.+122    	; 0x1120 <interface_select+0x132>
				(*select_pos)++;
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	f8 01       	movw	r30, r16
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
				interface_draw_selector(*select_pos);
    10ae:	0e 94 52 07 	call	0xea4	; 0xea4 <interface_draw_selector>
    10b2:	36 c0       	rjmp	.+108    	; 0x1120 <interface_select+0x132>
			}
			break;
			
		case RIGHT:
			if((*current_menu)->submenus[*select_pos-1]->num_submenus){
    10b4:	d7 01       	movw	r26, r14
    10b6:	ed 91       	ld	r30, X+
    10b8:	fc 91       	ld	r31, X
    10ba:	d8 01       	movw	r26, r16
    10bc:	8d 91       	ld	r24, X+
    10be:	9c 91       	ld	r25, X
    10c0:	81 50       	subi	r24, 0x01	; 1
    10c2:	90 48       	sbci	r25, 0x80	; 128
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	01 80       	ldd	r0, Z+1	; 0x01
    10ca:	f2 81       	ldd	r31, Z+2	; 0x02
    10cc:	e0 2d       	mov	r30, r0
    10ce:	e8 0f       	add	r30, r24
    10d0:	f9 1f       	adc	r31, r25
    10d2:	80 81       	ld	r24, Z
    10d4:	91 81       	ldd	r25, Z+1	; 0x01
    10d6:	fc 01       	movw	r30, r24
    10d8:	20 81       	ld	r18, Z
    10da:	22 23       	and	r18, r18
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <interface_select+0x106>
				(*current_menu) = (*current_menu)->submenus[*select_pos-1];
    10de:	d7 01       	movw	r26, r14
    10e0:	8d 93       	st	X+, r24
    10e2:	9c 93       	st	X, r25
				interface_print((*current_menu));
    10e4:	0e 94 6a 07 	call	0xed4	; 0xed4 <interface_print>
				*select_pos = 1;
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	f8 01       	movw	r30, r16
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	80 83       	st	Z, r24
    10f2:	16 c0       	rjmp	.+44     	; 0x1120 <interface_select+0x132>
				
			}
			else{
				(*current_menu)->submenus[*select_pos-1]->action();
    10f4:	07 80       	ldd	r0, Z+7	; 0x07
    10f6:	f0 85       	ldd	r31, Z+8	; 0x08
    10f8:	e0 2d       	mov	r30, r0
    10fa:	09 95       	icall
    10fc:	11 c0       	rjmp	.+34     	; 0x1120 <interface_select+0x132>
			}
			
			break;
			
		case LEFT:
			if((*current_menu)->prev){
    10fe:	d7 01       	movw	r26, r14
    1100:	ed 91       	ld	r30, X+
    1102:	fc 91       	ld	r31, X
    1104:	11 97       	sbiw	r26, 0x01	; 1
    1106:	83 81       	ldd	r24, Z+3	; 0x03
    1108:	94 81       	ldd	r25, Z+4	; 0x04
    110a:	00 97       	sbiw	r24, 0x00	; 0
    110c:	49 f0       	breq	.+18     	; 0x1120 <interface_select+0x132>
				*select_pos = 1;
    110e:	21 e0       	ldi	r18, 0x01	; 1
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	f8 01       	movw	r30, r16
    1114:	31 83       	std	Z+1, r19	; 0x01
    1116:	20 83       	st	Z, r18
				(*current_menu) = (*current_menu)->prev;
    1118:	8d 93       	st	X+, r24
    111a:	9c 93       	st	X, r25
				interface_print((*current_menu));
    111c:	0e 94 6a 07 	call	0xed4	; 0xed4 <interface_print>
			break;
		case NEUTRAL:
			break;
		
	}
    1120:	28 96       	adiw	r28, 0x08	; 8
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	df 90       	pop	r13
    113a:	08 95       	ret

0000113c <__subsf3>:
    113c:	50 58       	subi	r21, 0x80	; 128

0000113e <__addsf3>:
    113e:	bb 27       	eor	r27, r27
    1140:	aa 27       	eor	r26, r26
    1142:	0e d0       	rcall	.+28     	; 0x1160 <__addsf3x>
    1144:	4d c1       	rjmp	.+666    	; 0x13e0 <__fp_round>
    1146:	3e d1       	rcall	.+636    	; 0x13c4 <__fp_pscA>
    1148:	30 f0       	brcs	.+12     	; 0x1156 <__addsf3+0x18>
    114a:	43 d1       	rcall	.+646    	; 0x13d2 <__fp_pscB>
    114c:	20 f0       	brcs	.+8      	; 0x1156 <__addsf3+0x18>
    114e:	31 f4       	brne	.+12     	; 0x115c <__addsf3+0x1e>
    1150:	9f 3f       	cpi	r25, 0xFF	; 255
    1152:	11 f4       	brne	.+4      	; 0x1158 <__addsf3+0x1a>
    1154:	1e f4       	brtc	.+6      	; 0x115c <__addsf3+0x1e>
    1156:	33 c1       	rjmp	.+614    	; 0x13be <__fp_nan>
    1158:	0e f4       	brtc	.+2      	; 0x115c <__addsf3+0x1e>
    115a:	e0 95       	com	r30
    115c:	e7 fb       	bst	r30, 7
    115e:	29 c1       	rjmp	.+594    	; 0x13b2 <__fp_inf>

00001160 <__addsf3x>:
    1160:	e9 2f       	mov	r30, r25
    1162:	4f d1       	rcall	.+670    	; 0x1402 <__fp_split3>
    1164:	80 f3       	brcs	.-32     	; 0x1146 <__addsf3+0x8>
    1166:	ba 17       	cp	r27, r26
    1168:	62 07       	cpc	r22, r18
    116a:	73 07       	cpc	r23, r19
    116c:	84 07       	cpc	r24, r20
    116e:	95 07       	cpc	r25, r21
    1170:	18 f0       	brcs	.+6      	; 0x1178 <__addsf3x+0x18>
    1172:	71 f4       	brne	.+28     	; 0x1190 <__addsf3x+0x30>
    1174:	9e f5       	brtc	.+102    	; 0x11dc <__addsf3x+0x7c>
    1176:	67 c1       	rjmp	.+718    	; 0x1446 <__fp_zero>
    1178:	0e f4       	brtc	.+2      	; 0x117c <__addsf3x+0x1c>
    117a:	e0 95       	com	r30
    117c:	0b 2e       	mov	r0, r27
    117e:	ba 2f       	mov	r27, r26
    1180:	a0 2d       	mov	r26, r0
    1182:	0b 01       	movw	r0, r22
    1184:	b9 01       	movw	r22, r18
    1186:	90 01       	movw	r18, r0
    1188:	0c 01       	movw	r0, r24
    118a:	ca 01       	movw	r24, r20
    118c:	a0 01       	movw	r20, r0
    118e:	11 24       	eor	r1, r1
    1190:	ff 27       	eor	r31, r31
    1192:	59 1b       	sub	r21, r25
    1194:	99 f0       	breq	.+38     	; 0x11bc <__addsf3x+0x5c>
    1196:	59 3f       	cpi	r21, 0xF9	; 249
    1198:	50 f4       	brcc	.+20     	; 0x11ae <__addsf3x+0x4e>
    119a:	50 3e       	cpi	r21, 0xE0	; 224
    119c:	68 f1       	brcs	.+90     	; 0x11f8 <__addsf3x+0x98>
    119e:	1a 16       	cp	r1, r26
    11a0:	f0 40       	sbci	r31, 0x00	; 0
    11a2:	a2 2f       	mov	r26, r18
    11a4:	23 2f       	mov	r18, r19
    11a6:	34 2f       	mov	r19, r20
    11a8:	44 27       	eor	r20, r20
    11aa:	58 5f       	subi	r21, 0xF8	; 248
    11ac:	f3 cf       	rjmp	.-26     	; 0x1194 <__addsf3x+0x34>
    11ae:	46 95       	lsr	r20
    11b0:	37 95       	ror	r19
    11b2:	27 95       	ror	r18
    11b4:	a7 95       	ror	r26
    11b6:	f0 40       	sbci	r31, 0x00	; 0
    11b8:	53 95       	inc	r21
    11ba:	c9 f7       	brne	.-14     	; 0x11ae <__addsf3x+0x4e>
    11bc:	7e f4       	brtc	.+30     	; 0x11dc <__addsf3x+0x7c>
    11be:	1f 16       	cp	r1, r31
    11c0:	ba 0b       	sbc	r27, r26
    11c2:	62 0b       	sbc	r22, r18
    11c4:	73 0b       	sbc	r23, r19
    11c6:	84 0b       	sbc	r24, r20
    11c8:	ba f0       	brmi	.+46     	; 0x11f8 <__addsf3x+0x98>
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	a1 f0       	breq	.+40     	; 0x11f6 <__addsf3x+0x96>
    11ce:	ff 0f       	add	r31, r31
    11d0:	bb 1f       	adc	r27, r27
    11d2:	66 1f       	adc	r22, r22
    11d4:	77 1f       	adc	r23, r23
    11d6:	88 1f       	adc	r24, r24
    11d8:	c2 f7       	brpl	.-16     	; 0x11ca <__addsf3x+0x6a>
    11da:	0e c0       	rjmp	.+28     	; 0x11f8 <__addsf3x+0x98>
    11dc:	ba 0f       	add	r27, r26
    11de:	62 1f       	adc	r22, r18
    11e0:	73 1f       	adc	r23, r19
    11e2:	84 1f       	adc	r24, r20
    11e4:	48 f4       	brcc	.+18     	; 0x11f8 <__addsf3x+0x98>
    11e6:	87 95       	ror	r24
    11e8:	77 95       	ror	r23
    11ea:	67 95       	ror	r22
    11ec:	b7 95       	ror	r27
    11ee:	f7 95       	ror	r31
    11f0:	9e 3f       	cpi	r25, 0xFE	; 254
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <__addsf3x+0x96>
    11f4:	b3 cf       	rjmp	.-154    	; 0x115c <__addsf3+0x1e>
    11f6:	93 95       	inc	r25
    11f8:	88 0f       	add	r24, r24
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <__addsf3x+0x9e>
    11fc:	99 27       	eor	r25, r25
    11fe:	ee 0f       	add	r30, r30
    1200:	97 95       	ror	r25
    1202:	87 95       	ror	r24
    1204:	08 95       	ret

00001206 <__divsf3>:
    1206:	0c d0       	rcall	.+24     	; 0x1220 <__divsf3x>
    1208:	eb c0       	rjmp	.+470    	; 0x13e0 <__fp_round>
    120a:	e3 d0       	rcall	.+454    	; 0x13d2 <__fp_pscB>
    120c:	40 f0       	brcs	.+16     	; 0x121e <__divsf3+0x18>
    120e:	da d0       	rcall	.+436    	; 0x13c4 <__fp_pscA>
    1210:	30 f0       	brcs	.+12     	; 0x121e <__divsf3+0x18>
    1212:	21 f4       	brne	.+8      	; 0x121c <__divsf3+0x16>
    1214:	5f 3f       	cpi	r21, 0xFF	; 255
    1216:	19 f0       	breq	.+6      	; 0x121e <__divsf3+0x18>
    1218:	cc c0       	rjmp	.+408    	; 0x13b2 <__fp_inf>
    121a:	51 11       	cpse	r21, r1
    121c:	15 c1       	rjmp	.+554    	; 0x1448 <__fp_szero>
    121e:	cf c0       	rjmp	.+414    	; 0x13be <__fp_nan>

00001220 <__divsf3x>:
    1220:	f0 d0       	rcall	.+480    	; 0x1402 <__fp_split3>
    1222:	98 f3       	brcs	.-26     	; 0x120a <__divsf3+0x4>

00001224 <__divsf3_pse>:
    1224:	99 23       	and	r25, r25
    1226:	c9 f3       	breq	.-14     	; 0x121a <__divsf3+0x14>
    1228:	55 23       	and	r21, r21
    122a:	b1 f3       	breq	.-20     	; 0x1218 <__divsf3+0x12>
    122c:	95 1b       	sub	r25, r21
    122e:	55 0b       	sbc	r21, r21
    1230:	bb 27       	eor	r27, r27
    1232:	aa 27       	eor	r26, r26
    1234:	62 17       	cp	r22, r18
    1236:	73 07       	cpc	r23, r19
    1238:	84 07       	cpc	r24, r20
    123a:	38 f0       	brcs	.+14     	; 0x124a <__divsf3_pse+0x26>
    123c:	9f 5f       	subi	r25, 0xFF	; 255
    123e:	5f 4f       	sbci	r21, 0xFF	; 255
    1240:	22 0f       	add	r18, r18
    1242:	33 1f       	adc	r19, r19
    1244:	44 1f       	adc	r20, r20
    1246:	aa 1f       	adc	r26, r26
    1248:	a9 f3       	breq	.-22     	; 0x1234 <__divsf3_pse+0x10>
    124a:	33 d0       	rcall	.+102    	; 0x12b2 <__divsf3_pse+0x8e>
    124c:	0e 2e       	mov	r0, r30
    124e:	3a f0       	brmi	.+14     	; 0x125e <__divsf3_pse+0x3a>
    1250:	e0 e8       	ldi	r30, 0x80	; 128
    1252:	30 d0       	rcall	.+96     	; 0x12b4 <__divsf3_pse+0x90>
    1254:	91 50       	subi	r25, 0x01	; 1
    1256:	50 40       	sbci	r21, 0x00	; 0
    1258:	e6 95       	lsr	r30
    125a:	00 1c       	adc	r0, r0
    125c:	ca f7       	brpl	.-14     	; 0x1250 <__divsf3_pse+0x2c>
    125e:	29 d0       	rcall	.+82     	; 0x12b2 <__divsf3_pse+0x8e>
    1260:	fe 2f       	mov	r31, r30
    1262:	27 d0       	rcall	.+78     	; 0x12b2 <__divsf3_pse+0x8e>
    1264:	66 0f       	add	r22, r22
    1266:	77 1f       	adc	r23, r23
    1268:	88 1f       	adc	r24, r24
    126a:	bb 1f       	adc	r27, r27
    126c:	26 17       	cp	r18, r22
    126e:	37 07       	cpc	r19, r23
    1270:	48 07       	cpc	r20, r24
    1272:	ab 07       	cpc	r26, r27
    1274:	b0 e8       	ldi	r27, 0x80	; 128
    1276:	09 f0       	breq	.+2      	; 0x127a <__divsf3_pse+0x56>
    1278:	bb 0b       	sbc	r27, r27
    127a:	80 2d       	mov	r24, r0
    127c:	bf 01       	movw	r22, r30
    127e:	ff 27       	eor	r31, r31
    1280:	93 58       	subi	r25, 0x83	; 131
    1282:	5f 4f       	sbci	r21, 0xFF	; 255
    1284:	2a f0       	brmi	.+10     	; 0x1290 <__divsf3_pse+0x6c>
    1286:	9e 3f       	cpi	r25, 0xFE	; 254
    1288:	51 05       	cpc	r21, r1
    128a:	68 f0       	brcs	.+26     	; 0x12a6 <__divsf3_pse+0x82>
    128c:	92 c0       	rjmp	.+292    	; 0x13b2 <__fp_inf>
    128e:	dc c0       	rjmp	.+440    	; 0x1448 <__fp_szero>
    1290:	5f 3f       	cpi	r21, 0xFF	; 255
    1292:	ec f3       	brlt	.-6      	; 0x128e <__divsf3_pse+0x6a>
    1294:	98 3e       	cpi	r25, 0xE8	; 232
    1296:	dc f3       	brlt	.-10     	; 0x128e <__divsf3_pse+0x6a>
    1298:	86 95       	lsr	r24
    129a:	77 95       	ror	r23
    129c:	67 95       	ror	r22
    129e:	b7 95       	ror	r27
    12a0:	f7 95       	ror	r31
    12a2:	9f 5f       	subi	r25, 0xFF	; 255
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__divsf3_pse+0x74>
    12a6:	88 0f       	add	r24, r24
    12a8:	91 1d       	adc	r25, r1
    12aa:	96 95       	lsr	r25
    12ac:	87 95       	ror	r24
    12ae:	97 f9       	bld	r25, 7
    12b0:	08 95       	ret
    12b2:	e1 e0       	ldi	r30, 0x01	; 1
    12b4:	66 0f       	add	r22, r22
    12b6:	77 1f       	adc	r23, r23
    12b8:	88 1f       	adc	r24, r24
    12ba:	bb 1f       	adc	r27, r27
    12bc:	62 17       	cp	r22, r18
    12be:	73 07       	cpc	r23, r19
    12c0:	84 07       	cpc	r24, r20
    12c2:	ba 07       	cpc	r27, r26
    12c4:	20 f0       	brcs	.+8      	; 0x12ce <__divsf3_pse+0xaa>
    12c6:	62 1b       	sub	r22, r18
    12c8:	73 0b       	sbc	r23, r19
    12ca:	84 0b       	sbc	r24, r20
    12cc:	ba 0b       	sbc	r27, r26
    12ce:	ee 1f       	adc	r30, r30
    12d0:	88 f7       	brcc	.-30     	; 0x12b4 <__divsf3_pse+0x90>
    12d2:	e0 95       	com	r30
    12d4:	08 95       	ret

000012d6 <__fixsfsi>:
    12d6:	04 d0       	rcall	.+8      	; 0x12e0 <__fixunssfsi>
    12d8:	68 94       	set
    12da:	b1 11       	cpse	r27, r1
    12dc:	b5 c0       	rjmp	.+362    	; 0x1448 <__fp_szero>
    12de:	08 95       	ret

000012e0 <__fixunssfsi>:
    12e0:	98 d0       	rcall	.+304    	; 0x1412 <__fp_splitA>
    12e2:	88 f0       	brcs	.+34     	; 0x1306 <__fixunssfsi+0x26>
    12e4:	9f 57       	subi	r25, 0x7F	; 127
    12e6:	90 f0       	brcs	.+36     	; 0x130c <__fixunssfsi+0x2c>
    12e8:	b9 2f       	mov	r27, r25
    12ea:	99 27       	eor	r25, r25
    12ec:	b7 51       	subi	r27, 0x17	; 23
    12ee:	a0 f0       	brcs	.+40     	; 0x1318 <__fixunssfsi+0x38>
    12f0:	d1 f0       	breq	.+52     	; 0x1326 <__fixunssfsi+0x46>
    12f2:	66 0f       	add	r22, r22
    12f4:	77 1f       	adc	r23, r23
    12f6:	88 1f       	adc	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	1a f0       	brmi	.+6      	; 0x1302 <__fixunssfsi+0x22>
    12fc:	ba 95       	dec	r27
    12fe:	c9 f7       	brne	.-14     	; 0x12f2 <__fixunssfsi+0x12>
    1300:	12 c0       	rjmp	.+36     	; 0x1326 <__fixunssfsi+0x46>
    1302:	b1 30       	cpi	r27, 0x01	; 1
    1304:	81 f0       	breq	.+32     	; 0x1326 <__fixunssfsi+0x46>
    1306:	9f d0       	rcall	.+318    	; 0x1446 <__fp_zero>
    1308:	b1 e0       	ldi	r27, 0x01	; 1
    130a:	08 95       	ret
    130c:	9c c0       	rjmp	.+312    	; 0x1446 <__fp_zero>
    130e:	67 2f       	mov	r22, r23
    1310:	78 2f       	mov	r23, r24
    1312:	88 27       	eor	r24, r24
    1314:	b8 5f       	subi	r27, 0xF8	; 248
    1316:	39 f0       	breq	.+14     	; 0x1326 <__fixunssfsi+0x46>
    1318:	b9 3f       	cpi	r27, 0xF9	; 249
    131a:	cc f3       	brlt	.-14     	; 0x130e <__fixunssfsi+0x2e>
    131c:	86 95       	lsr	r24
    131e:	77 95       	ror	r23
    1320:	67 95       	ror	r22
    1322:	b3 95       	inc	r27
    1324:	d9 f7       	brne	.-10     	; 0x131c <__fixunssfsi+0x3c>
    1326:	3e f4       	brtc	.+14     	; 0x1336 <__fixunssfsi+0x56>
    1328:	90 95       	com	r25
    132a:	80 95       	com	r24
    132c:	70 95       	com	r23
    132e:	61 95       	neg	r22
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	08 95       	ret

00001338 <__floatunsisf>:
    1338:	e8 94       	clt
    133a:	09 c0       	rjmp	.+18     	; 0x134e <__floatsisf+0x12>

0000133c <__floatsisf>:
    133c:	97 fb       	bst	r25, 7
    133e:	3e f4       	brtc	.+14     	; 0x134e <__floatsisf+0x12>
    1340:	90 95       	com	r25
    1342:	80 95       	com	r24
    1344:	70 95       	com	r23
    1346:	61 95       	neg	r22
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	8f 4f       	sbci	r24, 0xFF	; 255
    134c:	9f 4f       	sbci	r25, 0xFF	; 255
    134e:	99 23       	and	r25, r25
    1350:	a9 f0       	breq	.+42     	; 0x137c <__floatsisf+0x40>
    1352:	f9 2f       	mov	r31, r25
    1354:	96 e9       	ldi	r25, 0x96	; 150
    1356:	bb 27       	eor	r27, r27
    1358:	93 95       	inc	r25
    135a:	f6 95       	lsr	r31
    135c:	87 95       	ror	r24
    135e:	77 95       	ror	r23
    1360:	67 95       	ror	r22
    1362:	b7 95       	ror	r27
    1364:	f1 11       	cpse	r31, r1
    1366:	f8 cf       	rjmp	.-16     	; 0x1358 <__floatsisf+0x1c>
    1368:	fa f4       	brpl	.+62     	; 0x13a8 <__floatsisf+0x6c>
    136a:	bb 0f       	add	r27, r27
    136c:	11 f4       	brne	.+4      	; 0x1372 <__floatsisf+0x36>
    136e:	60 ff       	sbrs	r22, 0
    1370:	1b c0       	rjmp	.+54     	; 0x13a8 <__floatsisf+0x6c>
    1372:	6f 5f       	subi	r22, 0xFF	; 255
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	8f 4f       	sbci	r24, 0xFF	; 255
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	16 c0       	rjmp	.+44     	; 0x13a8 <__floatsisf+0x6c>
    137c:	88 23       	and	r24, r24
    137e:	11 f0       	breq	.+4      	; 0x1384 <__floatsisf+0x48>
    1380:	96 e9       	ldi	r25, 0x96	; 150
    1382:	11 c0       	rjmp	.+34     	; 0x13a6 <__floatsisf+0x6a>
    1384:	77 23       	and	r23, r23
    1386:	21 f0       	breq	.+8      	; 0x1390 <__floatsisf+0x54>
    1388:	9e e8       	ldi	r25, 0x8E	; 142
    138a:	87 2f       	mov	r24, r23
    138c:	76 2f       	mov	r23, r22
    138e:	05 c0       	rjmp	.+10     	; 0x139a <__floatsisf+0x5e>
    1390:	66 23       	and	r22, r22
    1392:	71 f0       	breq	.+28     	; 0x13b0 <__floatsisf+0x74>
    1394:	96 e8       	ldi	r25, 0x86	; 134
    1396:	86 2f       	mov	r24, r22
    1398:	70 e0       	ldi	r23, 0x00	; 0
    139a:	60 e0       	ldi	r22, 0x00	; 0
    139c:	2a f0       	brmi	.+10     	; 0x13a8 <__floatsisf+0x6c>
    139e:	9a 95       	dec	r25
    13a0:	66 0f       	add	r22, r22
    13a2:	77 1f       	adc	r23, r23
    13a4:	88 1f       	adc	r24, r24
    13a6:	da f7       	brpl	.-10     	; 0x139e <__floatsisf+0x62>
    13a8:	88 0f       	add	r24, r24
    13aa:	96 95       	lsr	r25
    13ac:	87 95       	ror	r24
    13ae:	97 f9       	bld	r25, 7
    13b0:	08 95       	ret

000013b2 <__fp_inf>:
    13b2:	97 f9       	bld	r25, 7
    13b4:	9f 67       	ori	r25, 0x7F	; 127
    13b6:	80 e8       	ldi	r24, 0x80	; 128
    13b8:	70 e0       	ldi	r23, 0x00	; 0
    13ba:	60 e0       	ldi	r22, 0x00	; 0
    13bc:	08 95       	ret

000013be <__fp_nan>:
    13be:	9f ef       	ldi	r25, 0xFF	; 255
    13c0:	80 ec       	ldi	r24, 0xC0	; 192
    13c2:	08 95       	ret

000013c4 <__fp_pscA>:
    13c4:	00 24       	eor	r0, r0
    13c6:	0a 94       	dec	r0
    13c8:	16 16       	cp	r1, r22
    13ca:	17 06       	cpc	r1, r23
    13cc:	18 06       	cpc	r1, r24
    13ce:	09 06       	cpc	r0, r25
    13d0:	08 95       	ret

000013d2 <__fp_pscB>:
    13d2:	00 24       	eor	r0, r0
    13d4:	0a 94       	dec	r0
    13d6:	12 16       	cp	r1, r18
    13d8:	13 06       	cpc	r1, r19
    13da:	14 06       	cpc	r1, r20
    13dc:	05 06       	cpc	r0, r21
    13de:	08 95       	ret

000013e0 <__fp_round>:
    13e0:	09 2e       	mov	r0, r25
    13e2:	03 94       	inc	r0
    13e4:	00 0c       	add	r0, r0
    13e6:	11 f4       	brne	.+4      	; 0x13ec <__fp_round+0xc>
    13e8:	88 23       	and	r24, r24
    13ea:	52 f0       	brmi	.+20     	; 0x1400 <__fp_round+0x20>
    13ec:	bb 0f       	add	r27, r27
    13ee:	40 f4       	brcc	.+16     	; 0x1400 <__fp_round+0x20>
    13f0:	bf 2b       	or	r27, r31
    13f2:	11 f4       	brne	.+4      	; 0x13f8 <__fp_round+0x18>
    13f4:	60 ff       	sbrs	r22, 0
    13f6:	04 c0       	rjmp	.+8      	; 0x1400 <__fp_round+0x20>
    13f8:	6f 5f       	subi	r22, 0xFF	; 255
    13fa:	7f 4f       	sbci	r23, 0xFF	; 255
    13fc:	8f 4f       	sbci	r24, 0xFF	; 255
    13fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1400:	08 95       	ret

00001402 <__fp_split3>:
    1402:	57 fd       	sbrc	r21, 7
    1404:	90 58       	subi	r25, 0x80	; 128
    1406:	44 0f       	add	r20, r20
    1408:	55 1f       	adc	r21, r21
    140a:	59 f0       	breq	.+22     	; 0x1422 <__fp_splitA+0x10>
    140c:	5f 3f       	cpi	r21, 0xFF	; 255
    140e:	71 f0       	breq	.+28     	; 0x142c <__fp_splitA+0x1a>
    1410:	47 95       	ror	r20

00001412 <__fp_splitA>:
    1412:	88 0f       	add	r24, r24
    1414:	97 fb       	bst	r25, 7
    1416:	99 1f       	adc	r25, r25
    1418:	61 f0       	breq	.+24     	; 0x1432 <__fp_splitA+0x20>
    141a:	9f 3f       	cpi	r25, 0xFF	; 255
    141c:	79 f0       	breq	.+30     	; 0x143c <__fp_splitA+0x2a>
    141e:	87 95       	ror	r24
    1420:	08 95       	ret
    1422:	12 16       	cp	r1, r18
    1424:	13 06       	cpc	r1, r19
    1426:	14 06       	cpc	r1, r20
    1428:	55 1f       	adc	r21, r21
    142a:	f2 cf       	rjmp	.-28     	; 0x1410 <__fp_split3+0xe>
    142c:	46 95       	lsr	r20
    142e:	f1 df       	rcall	.-30     	; 0x1412 <__fp_splitA>
    1430:	08 c0       	rjmp	.+16     	; 0x1442 <__fp_splitA+0x30>
    1432:	16 16       	cp	r1, r22
    1434:	17 06       	cpc	r1, r23
    1436:	18 06       	cpc	r1, r24
    1438:	99 1f       	adc	r25, r25
    143a:	f1 cf       	rjmp	.-30     	; 0x141e <__fp_splitA+0xc>
    143c:	86 95       	lsr	r24
    143e:	71 05       	cpc	r23, r1
    1440:	61 05       	cpc	r22, r1
    1442:	08 94       	sec
    1444:	08 95       	ret

00001446 <__fp_zero>:
    1446:	e8 94       	clt

00001448 <__fp_szero>:
    1448:	bb 27       	eor	r27, r27
    144a:	66 27       	eor	r22, r22
    144c:	77 27       	eor	r23, r23
    144e:	cb 01       	movw	r24, r22
    1450:	97 f9       	bld	r25, 7
    1452:	08 95       	ret

00001454 <__mulsf3>:
    1454:	0b d0       	rcall	.+22     	; 0x146c <__mulsf3x>
    1456:	c4 cf       	rjmp	.-120    	; 0x13e0 <__fp_round>
    1458:	b5 df       	rcall	.-150    	; 0x13c4 <__fp_pscA>
    145a:	28 f0       	brcs	.+10     	; 0x1466 <__mulsf3+0x12>
    145c:	ba df       	rcall	.-140    	; 0x13d2 <__fp_pscB>
    145e:	18 f0       	brcs	.+6      	; 0x1466 <__mulsf3+0x12>
    1460:	95 23       	and	r25, r21
    1462:	09 f0       	breq	.+2      	; 0x1466 <__mulsf3+0x12>
    1464:	a6 cf       	rjmp	.-180    	; 0x13b2 <__fp_inf>
    1466:	ab cf       	rjmp	.-170    	; 0x13be <__fp_nan>
    1468:	11 24       	eor	r1, r1
    146a:	ee cf       	rjmp	.-36     	; 0x1448 <__fp_szero>

0000146c <__mulsf3x>:
    146c:	ca df       	rcall	.-108    	; 0x1402 <__fp_split3>
    146e:	a0 f3       	brcs	.-24     	; 0x1458 <__mulsf3+0x4>

00001470 <__mulsf3_pse>:
    1470:	95 9f       	mul	r25, r21
    1472:	d1 f3       	breq	.-12     	; 0x1468 <__mulsf3+0x14>
    1474:	95 0f       	add	r25, r21
    1476:	50 e0       	ldi	r21, 0x00	; 0
    1478:	55 1f       	adc	r21, r21
    147a:	62 9f       	mul	r22, r18
    147c:	f0 01       	movw	r30, r0
    147e:	72 9f       	mul	r23, r18
    1480:	bb 27       	eor	r27, r27
    1482:	f0 0d       	add	r31, r0
    1484:	b1 1d       	adc	r27, r1
    1486:	63 9f       	mul	r22, r19
    1488:	aa 27       	eor	r26, r26
    148a:	f0 0d       	add	r31, r0
    148c:	b1 1d       	adc	r27, r1
    148e:	aa 1f       	adc	r26, r26
    1490:	64 9f       	mul	r22, r20
    1492:	66 27       	eor	r22, r22
    1494:	b0 0d       	add	r27, r0
    1496:	a1 1d       	adc	r26, r1
    1498:	66 1f       	adc	r22, r22
    149a:	82 9f       	mul	r24, r18
    149c:	22 27       	eor	r18, r18
    149e:	b0 0d       	add	r27, r0
    14a0:	a1 1d       	adc	r26, r1
    14a2:	62 1f       	adc	r22, r18
    14a4:	73 9f       	mul	r23, r19
    14a6:	b0 0d       	add	r27, r0
    14a8:	a1 1d       	adc	r26, r1
    14aa:	62 1f       	adc	r22, r18
    14ac:	83 9f       	mul	r24, r19
    14ae:	a0 0d       	add	r26, r0
    14b0:	61 1d       	adc	r22, r1
    14b2:	22 1f       	adc	r18, r18
    14b4:	74 9f       	mul	r23, r20
    14b6:	33 27       	eor	r19, r19
    14b8:	a0 0d       	add	r26, r0
    14ba:	61 1d       	adc	r22, r1
    14bc:	23 1f       	adc	r18, r19
    14be:	84 9f       	mul	r24, r20
    14c0:	60 0d       	add	r22, r0
    14c2:	21 1d       	adc	r18, r1
    14c4:	82 2f       	mov	r24, r18
    14c6:	76 2f       	mov	r23, r22
    14c8:	6a 2f       	mov	r22, r26
    14ca:	11 24       	eor	r1, r1
    14cc:	9f 57       	subi	r25, 0x7F	; 127
    14ce:	50 40       	sbci	r21, 0x00	; 0
    14d0:	8a f0       	brmi	.+34     	; 0x14f4 <__mulsf3_pse+0x84>
    14d2:	e1 f0       	breq	.+56     	; 0x150c <__mulsf3_pse+0x9c>
    14d4:	88 23       	and	r24, r24
    14d6:	4a f0       	brmi	.+18     	; 0x14ea <__mulsf3_pse+0x7a>
    14d8:	ee 0f       	add	r30, r30
    14da:	ff 1f       	adc	r31, r31
    14dc:	bb 1f       	adc	r27, r27
    14de:	66 1f       	adc	r22, r22
    14e0:	77 1f       	adc	r23, r23
    14e2:	88 1f       	adc	r24, r24
    14e4:	91 50       	subi	r25, 0x01	; 1
    14e6:	50 40       	sbci	r21, 0x00	; 0
    14e8:	a9 f7       	brne	.-22     	; 0x14d4 <__mulsf3_pse+0x64>
    14ea:	9e 3f       	cpi	r25, 0xFE	; 254
    14ec:	51 05       	cpc	r21, r1
    14ee:	70 f0       	brcs	.+28     	; 0x150c <__mulsf3_pse+0x9c>
    14f0:	60 cf       	rjmp	.-320    	; 0x13b2 <__fp_inf>
    14f2:	aa cf       	rjmp	.-172    	; 0x1448 <__fp_szero>
    14f4:	5f 3f       	cpi	r21, 0xFF	; 255
    14f6:	ec f3       	brlt	.-6      	; 0x14f2 <__mulsf3_pse+0x82>
    14f8:	98 3e       	cpi	r25, 0xE8	; 232
    14fa:	dc f3       	brlt	.-10     	; 0x14f2 <__mulsf3_pse+0x82>
    14fc:	86 95       	lsr	r24
    14fe:	77 95       	ror	r23
    1500:	67 95       	ror	r22
    1502:	b7 95       	ror	r27
    1504:	f7 95       	ror	r31
    1506:	e7 95       	ror	r30
    1508:	9f 5f       	subi	r25, 0xFF	; 255
    150a:	c1 f7       	brne	.-16     	; 0x14fc <__mulsf3_pse+0x8c>
    150c:	fe 2b       	or	r31, r30
    150e:	88 0f       	add	r24, r24
    1510:	91 1d       	adc	r25, r1
    1512:	96 95       	lsr	r25
    1514:	87 95       	ror	r24
    1516:	97 f9       	bld	r25, 7
    1518:	08 95       	ret

0000151a <__udivmodhi4>:
    151a:	aa 1b       	sub	r26, r26
    151c:	bb 1b       	sub	r27, r27
    151e:	51 e1       	ldi	r21, 0x11	; 17
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <__udivmodhi4_ep>

00001522 <__udivmodhi4_loop>:
    1522:	aa 1f       	adc	r26, r26
    1524:	bb 1f       	adc	r27, r27
    1526:	a6 17       	cp	r26, r22
    1528:	b7 07       	cpc	r27, r23
    152a:	10 f0       	brcs	.+4      	; 0x1530 <__udivmodhi4_ep>
    152c:	a6 1b       	sub	r26, r22
    152e:	b7 0b       	sbc	r27, r23

00001530 <__udivmodhi4_ep>:
    1530:	88 1f       	adc	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	5a 95       	dec	r21
    1536:	a9 f7       	brne	.-22     	; 0x1522 <__udivmodhi4_loop>
    1538:	80 95       	com	r24
    153a:	90 95       	com	r25
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	08 95       	ret

00001542 <malloc>:
    1542:	cf 93       	push	r28
    1544:	df 93       	push	r29
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	91 05       	cpc	r25, r1
    154a:	10 f4       	brcc	.+4      	; 0x1550 <malloc+0xe>
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	e0 91 bb 01 	lds	r30, 0x01BB
    1554:	f0 91 bc 01 	lds	r31, 0x01BC
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	a0 e0       	ldi	r26, 0x00	; 0
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	30 97       	sbiw	r30, 0x00	; 0
    1562:	39 f1       	breq	.+78     	; 0x15b2 <malloc+0x70>
    1564:	40 81       	ld	r20, Z
    1566:	51 81       	ldd	r21, Z+1	; 0x01
    1568:	48 17       	cp	r20, r24
    156a:	59 07       	cpc	r21, r25
    156c:	b8 f0       	brcs	.+46     	; 0x159c <malloc+0x5a>
    156e:	48 17       	cp	r20, r24
    1570:	59 07       	cpc	r21, r25
    1572:	71 f4       	brne	.+28     	; 0x1590 <malloc+0x4e>
    1574:	82 81       	ldd	r24, Z+2	; 0x02
    1576:	93 81       	ldd	r25, Z+3	; 0x03
    1578:	10 97       	sbiw	r26, 0x00	; 0
    157a:	29 f0       	breq	.+10     	; 0x1586 <malloc+0x44>
    157c:	13 96       	adiw	r26, 0x03	; 3
    157e:	9c 93       	st	X, r25
    1580:	8e 93       	st	-X, r24
    1582:	12 97       	sbiw	r26, 0x02	; 2
    1584:	2c c0       	rjmp	.+88     	; 0x15de <malloc+0x9c>
    1586:	90 93 bc 01 	sts	0x01BC, r25
    158a:	80 93 bb 01 	sts	0x01BB, r24
    158e:	27 c0       	rjmp	.+78     	; 0x15de <malloc+0x9c>
    1590:	21 15       	cp	r18, r1
    1592:	31 05       	cpc	r19, r1
    1594:	31 f0       	breq	.+12     	; 0x15a2 <malloc+0x60>
    1596:	42 17       	cp	r20, r18
    1598:	53 07       	cpc	r21, r19
    159a:	18 f0       	brcs	.+6      	; 0x15a2 <malloc+0x60>
    159c:	a9 01       	movw	r20, r18
    159e:	db 01       	movw	r26, r22
    15a0:	01 c0       	rjmp	.+2      	; 0x15a4 <malloc+0x62>
    15a2:	ef 01       	movw	r28, r30
    15a4:	9a 01       	movw	r18, r20
    15a6:	bd 01       	movw	r22, r26
    15a8:	df 01       	movw	r26, r30
    15aa:	02 80       	ldd	r0, Z+2	; 0x02
    15ac:	f3 81       	ldd	r31, Z+3	; 0x03
    15ae:	e0 2d       	mov	r30, r0
    15b0:	d7 cf       	rjmp	.-82     	; 0x1560 <malloc+0x1e>
    15b2:	21 15       	cp	r18, r1
    15b4:	31 05       	cpc	r19, r1
    15b6:	f9 f0       	breq	.+62     	; 0x15f6 <malloc+0xb4>
    15b8:	28 1b       	sub	r18, r24
    15ba:	39 0b       	sbc	r19, r25
    15bc:	24 30       	cpi	r18, 0x04	; 4
    15be:	31 05       	cpc	r19, r1
    15c0:	80 f4       	brcc	.+32     	; 0x15e2 <malloc+0xa0>
    15c2:	8a 81       	ldd	r24, Y+2	; 0x02
    15c4:	9b 81       	ldd	r25, Y+3	; 0x03
    15c6:	61 15       	cp	r22, r1
    15c8:	71 05       	cpc	r23, r1
    15ca:	21 f0       	breq	.+8      	; 0x15d4 <malloc+0x92>
    15cc:	fb 01       	movw	r30, r22
    15ce:	93 83       	std	Z+3, r25	; 0x03
    15d0:	82 83       	std	Z+2, r24	; 0x02
    15d2:	04 c0       	rjmp	.+8      	; 0x15dc <malloc+0x9a>
    15d4:	90 93 bc 01 	sts	0x01BC, r25
    15d8:	80 93 bb 01 	sts	0x01BB, r24
    15dc:	fe 01       	movw	r30, r28
    15de:	32 96       	adiw	r30, 0x02	; 2
    15e0:	44 c0       	rjmp	.+136    	; 0x166a <malloc+0x128>
    15e2:	fe 01       	movw	r30, r28
    15e4:	e2 0f       	add	r30, r18
    15e6:	f3 1f       	adc	r31, r19
    15e8:	81 93       	st	Z+, r24
    15ea:	91 93       	st	Z+, r25
    15ec:	22 50       	subi	r18, 0x02	; 2
    15ee:	31 09       	sbc	r19, r1
    15f0:	39 83       	std	Y+1, r19	; 0x01
    15f2:	28 83       	st	Y, r18
    15f4:	3a c0       	rjmp	.+116    	; 0x166a <malloc+0x128>
    15f6:	20 91 b9 01 	lds	r18, 0x01B9
    15fa:	30 91 ba 01 	lds	r19, 0x01BA
    15fe:	23 2b       	or	r18, r19
    1600:	41 f4       	brne	.+16     	; 0x1612 <malloc+0xd0>
    1602:	20 91 02 01 	lds	r18, 0x0102
    1606:	30 91 03 01 	lds	r19, 0x0103
    160a:	30 93 ba 01 	sts	0x01BA, r19
    160e:	20 93 b9 01 	sts	0x01B9, r18
    1612:	20 91 00 01 	lds	r18, 0x0100
    1616:	30 91 01 01 	lds	r19, 0x0101
    161a:	21 15       	cp	r18, r1
    161c:	31 05       	cpc	r19, r1
    161e:	41 f4       	brne	.+16     	; 0x1630 <malloc+0xee>
    1620:	2d b7       	in	r18, 0x3d	; 61
    1622:	3e b7       	in	r19, 0x3e	; 62
    1624:	40 91 04 01 	lds	r20, 0x0104
    1628:	50 91 05 01 	lds	r21, 0x0105
    162c:	24 1b       	sub	r18, r20
    162e:	35 0b       	sbc	r19, r21
    1630:	e0 91 b9 01 	lds	r30, 0x01B9
    1634:	f0 91 ba 01 	lds	r31, 0x01BA
    1638:	e2 17       	cp	r30, r18
    163a:	f3 07       	cpc	r31, r19
    163c:	a0 f4       	brcc	.+40     	; 0x1666 <malloc+0x124>
    163e:	2e 1b       	sub	r18, r30
    1640:	3f 0b       	sbc	r19, r31
    1642:	28 17       	cp	r18, r24
    1644:	39 07       	cpc	r19, r25
    1646:	78 f0       	brcs	.+30     	; 0x1666 <malloc+0x124>
    1648:	ac 01       	movw	r20, r24
    164a:	4e 5f       	subi	r20, 0xFE	; 254
    164c:	5f 4f       	sbci	r21, 0xFF	; 255
    164e:	24 17       	cp	r18, r20
    1650:	35 07       	cpc	r19, r21
    1652:	48 f0       	brcs	.+18     	; 0x1666 <malloc+0x124>
    1654:	4e 0f       	add	r20, r30
    1656:	5f 1f       	adc	r21, r31
    1658:	50 93 ba 01 	sts	0x01BA, r21
    165c:	40 93 b9 01 	sts	0x01B9, r20
    1660:	81 93       	st	Z+, r24
    1662:	91 93       	st	Z+, r25
    1664:	02 c0       	rjmp	.+4      	; 0x166a <malloc+0x128>
    1666:	e0 e0       	ldi	r30, 0x00	; 0
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	cf 01       	movw	r24, r30
    166c:	df 91       	pop	r29
    166e:	cf 91       	pop	r28
    1670:	08 95       	ret

00001672 <free>:
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	09 f4       	brne	.+2      	; 0x167c <free+0xa>
    167a:	87 c0       	rjmp	.+270    	; 0x178a <free+0x118>
    167c:	fc 01       	movw	r30, r24
    167e:	32 97       	sbiw	r30, 0x02	; 2
    1680:	13 82       	std	Z+3, r1	; 0x03
    1682:	12 82       	std	Z+2, r1	; 0x02
    1684:	c0 91 bb 01 	lds	r28, 0x01BB
    1688:	d0 91 bc 01 	lds	r29, 0x01BC
    168c:	20 97       	sbiw	r28, 0x00	; 0
    168e:	81 f4       	brne	.+32     	; 0x16b0 <free+0x3e>
    1690:	20 81       	ld	r18, Z
    1692:	31 81       	ldd	r19, Z+1	; 0x01
    1694:	28 0f       	add	r18, r24
    1696:	39 1f       	adc	r19, r25
    1698:	80 91 b9 01 	lds	r24, 0x01B9
    169c:	90 91 ba 01 	lds	r25, 0x01BA
    16a0:	82 17       	cp	r24, r18
    16a2:	93 07       	cpc	r25, r19
    16a4:	79 f5       	brne	.+94     	; 0x1704 <free+0x92>
    16a6:	f0 93 ba 01 	sts	0x01BA, r31
    16aa:	e0 93 b9 01 	sts	0x01B9, r30
    16ae:	6d c0       	rjmp	.+218    	; 0x178a <free+0x118>
    16b0:	de 01       	movw	r26, r28
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	ae 17       	cp	r26, r30
    16b8:	bf 07       	cpc	r27, r31
    16ba:	50 f4       	brcc	.+20     	; 0x16d0 <free+0x5e>
    16bc:	12 96       	adiw	r26, 0x02	; 2
    16be:	4d 91       	ld	r20, X+
    16c0:	5c 91       	ld	r21, X
    16c2:	13 97       	sbiw	r26, 0x03	; 3
    16c4:	9d 01       	movw	r18, r26
    16c6:	41 15       	cp	r20, r1
    16c8:	51 05       	cpc	r21, r1
    16ca:	09 f1       	breq	.+66     	; 0x170e <free+0x9c>
    16cc:	da 01       	movw	r26, r20
    16ce:	f3 cf       	rjmp	.-26     	; 0x16b6 <free+0x44>
    16d0:	b3 83       	std	Z+3, r27	; 0x03
    16d2:	a2 83       	std	Z+2, r26	; 0x02
    16d4:	40 81       	ld	r20, Z
    16d6:	51 81       	ldd	r21, Z+1	; 0x01
    16d8:	84 0f       	add	r24, r20
    16da:	95 1f       	adc	r25, r21
    16dc:	8a 17       	cp	r24, r26
    16de:	9b 07       	cpc	r25, r27
    16e0:	71 f4       	brne	.+28     	; 0x16fe <free+0x8c>
    16e2:	8d 91       	ld	r24, X+
    16e4:	9c 91       	ld	r25, X
    16e6:	11 97       	sbiw	r26, 0x01	; 1
    16e8:	84 0f       	add	r24, r20
    16ea:	95 1f       	adc	r25, r21
    16ec:	02 96       	adiw	r24, 0x02	; 2
    16ee:	91 83       	std	Z+1, r25	; 0x01
    16f0:	80 83       	st	Z, r24
    16f2:	12 96       	adiw	r26, 0x02	; 2
    16f4:	8d 91       	ld	r24, X+
    16f6:	9c 91       	ld	r25, X
    16f8:	13 97       	sbiw	r26, 0x03	; 3
    16fa:	93 83       	std	Z+3, r25	; 0x03
    16fc:	82 83       	std	Z+2, r24	; 0x02
    16fe:	21 15       	cp	r18, r1
    1700:	31 05       	cpc	r19, r1
    1702:	29 f4       	brne	.+10     	; 0x170e <free+0x9c>
    1704:	f0 93 bc 01 	sts	0x01BC, r31
    1708:	e0 93 bb 01 	sts	0x01BB, r30
    170c:	3e c0       	rjmp	.+124    	; 0x178a <free+0x118>
    170e:	d9 01       	movw	r26, r18
    1710:	13 96       	adiw	r26, 0x03	; 3
    1712:	fc 93       	st	X, r31
    1714:	ee 93       	st	-X, r30
    1716:	12 97       	sbiw	r26, 0x02	; 2
    1718:	4d 91       	ld	r20, X+
    171a:	5d 91       	ld	r21, X+
    171c:	a4 0f       	add	r26, r20
    171e:	b5 1f       	adc	r27, r21
    1720:	ea 17       	cp	r30, r26
    1722:	fb 07       	cpc	r31, r27
    1724:	79 f4       	brne	.+30     	; 0x1744 <free+0xd2>
    1726:	80 81       	ld	r24, Z
    1728:	91 81       	ldd	r25, Z+1	; 0x01
    172a:	84 0f       	add	r24, r20
    172c:	95 1f       	adc	r25, r21
    172e:	02 96       	adiw	r24, 0x02	; 2
    1730:	d9 01       	movw	r26, r18
    1732:	11 96       	adiw	r26, 0x01	; 1
    1734:	9c 93       	st	X, r25
    1736:	8e 93       	st	-X, r24
    1738:	82 81       	ldd	r24, Z+2	; 0x02
    173a:	93 81       	ldd	r25, Z+3	; 0x03
    173c:	13 96       	adiw	r26, 0x03	; 3
    173e:	9c 93       	st	X, r25
    1740:	8e 93       	st	-X, r24
    1742:	12 97       	sbiw	r26, 0x02	; 2
    1744:	e0 e0       	ldi	r30, 0x00	; 0
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	19 f0       	breq	.+6      	; 0x1756 <free+0xe4>
    1750:	fe 01       	movw	r30, r28
    1752:	ec 01       	movw	r28, r24
    1754:	f9 cf       	rjmp	.-14     	; 0x1748 <free+0xd6>
    1756:	ce 01       	movw	r24, r28
    1758:	02 96       	adiw	r24, 0x02	; 2
    175a:	28 81       	ld	r18, Y
    175c:	39 81       	ldd	r19, Y+1	; 0x01
    175e:	82 0f       	add	r24, r18
    1760:	93 1f       	adc	r25, r19
    1762:	20 91 b9 01 	lds	r18, 0x01B9
    1766:	30 91 ba 01 	lds	r19, 0x01BA
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	69 f4       	brne	.+26     	; 0x178a <free+0x118>
    1770:	30 97       	sbiw	r30, 0x00	; 0
    1772:	29 f4       	brne	.+10     	; 0x177e <free+0x10c>
    1774:	10 92 bc 01 	sts	0x01BC, r1
    1778:	10 92 bb 01 	sts	0x01BB, r1
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <free+0x110>
    177e:	13 82       	std	Z+3, r1	; 0x03
    1780:	12 82       	std	Z+2, r1	; 0x02
    1782:	d0 93 ba 01 	sts	0x01BA, r29
    1786:	c0 93 b9 01 	sts	0x01B9, r28
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <fdevopen>:
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	ec 01       	movw	r28, r24
    179a:	8b 01       	movw	r16, r22
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	31 f4       	brne	.+12     	; 0x17ac <fdevopen+0x1c>
    17a0:	61 15       	cp	r22, r1
    17a2:	71 05       	cpc	r23, r1
    17a4:	19 f4       	brne	.+6      	; 0x17ac <fdevopen+0x1c>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	38 c0       	rjmp	.+112    	; 0x181c <fdevopen+0x8c>
    17ac:	6e e0       	ldi	r22, 0x0E	; 14
    17ae:	70 e0       	ldi	r23, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <calloc>
    17b8:	fc 01       	movw	r30, r24
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	a1 f3       	breq	.-24     	; 0x17a6 <fdevopen+0x16>
    17be:	80 e8       	ldi	r24, 0x80	; 128
    17c0:	83 83       	std	Z+3, r24	; 0x03
    17c2:	01 15       	cp	r16, r1
    17c4:	11 05       	cpc	r17, r1
    17c6:	71 f0       	breq	.+28     	; 0x17e4 <fdevopen+0x54>
    17c8:	13 87       	std	Z+11, r17	; 0x0b
    17ca:	02 87       	std	Z+10, r16	; 0x0a
    17cc:	81 e8       	ldi	r24, 0x81	; 129
    17ce:	83 83       	std	Z+3, r24	; 0x03
    17d0:	80 91 bd 01 	lds	r24, 0x01BD
    17d4:	90 91 be 01 	lds	r25, 0x01BE
    17d8:	89 2b       	or	r24, r25
    17da:	21 f4       	brne	.+8      	; 0x17e4 <fdevopen+0x54>
    17dc:	f0 93 be 01 	sts	0x01BE, r31
    17e0:	e0 93 bd 01 	sts	0x01BD, r30
    17e4:	20 97       	sbiw	r28, 0x00	; 0
    17e6:	c9 f0       	breq	.+50     	; 0x181a <fdevopen+0x8a>
    17e8:	d1 87       	std	Z+9, r29	; 0x09
    17ea:	c0 87       	std	Z+8, r28	; 0x08
    17ec:	83 81       	ldd	r24, Z+3	; 0x03
    17ee:	82 60       	ori	r24, 0x02	; 2
    17f0:	83 83       	std	Z+3, r24	; 0x03
    17f2:	80 91 bf 01 	lds	r24, 0x01BF
    17f6:	90 91 c0 01 	lds	r25, 0x01C0
    17fa:	89 2b       	or	r24, r25
    17fc:	71 f4       	brne	.+28     	; 0x181a <fdevopen+0x8a>
    17fe:	f0 93 c0 01 	sts	0x01C0, r31
    1802:	e0 93 bf 01 	sts	0x01BF, r30
    1806:	80 91 c1 01 	lds	r24, 0x01C1
    180a:	90 91 c2 01 	lds	r25, 0x01C2
    180e:	89 2b       	or	r24, r25
    1810:	21 f4       	brne	.+8      	; 0x181a <fdevopen+0x8a>
    1812:	f0 93 c2 01 	sts	0x01C2, r31
    1816:	e0 93 c1 01 	sts	0x01C1, r30
    181a:	cf 01       	movw	r24, r30
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	08 95       	ret

00001826 <printf>:
    1826:	a0 e0       	ldi	r26, 0x00	; 0
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e9 e1       	ldi	r30, 0x19	; 25
    182c:	fc e0       	ldi	r31, 0x0C	; 12
    182e:	0c 94 ff 0e 	jmp	0x1dfe	; 0x1dfe <__prologue_saves__+0x20>
    1832:	fe 01       	movw	r30, r28
    1834:	35 96       	adiw	r30, 0x05	; 5
    1836:	61 91       	ld	r22, Z+
    1838:	71 91       	ld	r23, Z+
    183a:	af 01       	movw	r20, r30
    183c:	80 91 bf 01 	lds	r24, 0x01BF
    1840:	90 91 c0 01 	lds	r25, 0x01C0
    1844:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vfprintf>
    1848:	e2 e0       	ldi	r30, 0x02	; 2
    184a:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__epilogue_restores__+0x20>

0000184e <puts>:
    184e:	0f 93       	push	r16
    1850:	1f 93       	push	r17
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	e0 91 bf 01 	lds	r30, 0x01BF
    185a:	f0 91 c0 01 	lds	r31, 0x01C0
    185e:	23 81       	ldd	r18, Z+3	; 0x03
    1860:	21 ff       	sbrs	r18, 1
    1862:	1b c0       	rjmp	.+54     	; 0x189a <puts+0x4c>
    1864:	ec 01       	movw	r28, r24
    1866:	00 e0       	ldi	r16, 0x00	; 0
    1868:	10 e0       	ldi	r17, 0x00	; 0
    186a:	89 91       	ld	r24, Y+
    186c:	60 91 bf 01 	lds	r22, 0x01BF
    1870:	70 91 c0 01 	lds	r23, 0x01C0
    1874:	db 01       	movw	r26, r22
    1876:	18 96       	adiw	r26, 0x08	; 8
    1878:	ed 91       	ld	r30, X+
    187a:	fc 91       	ld	r31, X
    187c:	19 97       	sbiw	r26, 0x09	; 9
    187e:	88 23       	and	r24, r24
    1880:	31 f0       	breq	.+12     	; 0x188e <puts+0x40>
    1882:	09 95       	icall
    1884:	89 2b       	or	r24, r25
    1886:	89 f3       	breq	.-30     	; 0x186a <puts+0x1c>
    1888:	0f ef       	ldi	r16, 0xFF	; 255
    188a:	1f ef       	ldi	r17, 0xFF	; 255
    188c:	ee cf       	rjmp	.-36     	; 0x186a <puts+0x1c>
    188e:	8a e0       	ldi	r24, 0x0A	; 10
    1890:	09 95       	icall
    1892:	89 2b       	or	r24, r25
    1894:	11 f4       	brne	.+4      	; 0x189a <puts+0x4c>
    1896:	c8 01       	movw	r24, r16
    1898:	02 c0       	rjmp	.+4      	; 0x189e <puts+0x50>
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <vfprintf>:
    18a8:	ac e0       	ldi	r26, 0x0C	; 12
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	ea e5       	ldi	r30, 0x5A	; 90
    18ae:	fc e0       	ldi	r31, 0x0C	; 12
    18b0:	0c 94 ef 0e 	jmp	0x1dde	; 0x1dde <__prologue_saves__>
    18b4:	7c 01       	movw	r14, r24
    18b6:	6b 01       	movw	r12, r22
    18b8:	8a 01       	movw	r16, r20
    18ba:	fc 01       	movw	r30, r24
    18bc:	17 82       	std	Z+7, r1	; 0x07
    18be:	16 82       	std	Z+6, r1	; 0x06
    18c0:	83 81       	ldd	r24, Z+3	; 0x03
    18c2:	81 ff       	sbrs	r24, 1
    18c4:	bd c1       	rjmp	.+890    	; 0x1c40 <vfprintf+0x398>
    18c6:	ce 01       	movw	r24, r28
    18c8:	01 96       	adiw	r24, 0x01	; 1
    18ca:	4c 01       	movw	r8, r24
    18cc:	f7 01       	movw	r30, r14
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	f6 01       	movw	r30, r12
    18d2:	93 fd       	sbrc	r25, 3
    18d4:	85 91       	lpm	r24, Z+
    18d6:	93 ff       	sbrs	r25, 3
    18d8:	81 91       	ld	r24, Z+
    18da:	6f 01       	movw	r12, r30
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <vfprintf+0x3a>
    18e0:	ab c1       	rjmp	.+854    	; 0x1c38 <vfprintf+0x390>
    18e2:	85 32       	cpi	r24, 0x25	; 37
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <vfprintf+0x4c>
    18e6:	93 fd       	sbrc	r25, 3
    18e8:	85 91       	lpm	r24, Z+
    18ea:	93 ff       	sbrs	r25, 3
    18ec:	81 91       	ld	r24, Z+
    18ee:	6f 01       	movw	r12, r30
    18f0:	85 32       	cpi	r24, 0x25	; 37
    18f2:	29 f4       	brne	.+10     	; 0x18fe <vfprintf+0x56>
    18f4:	b7 01       	movw	r22, r14
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    18fc:	e7 cf       	rjmp	.-50     	; 0x18cc <vfprintf+0x24>
    18fe:	51 2c       	mov	r5, r1
    1900:	31 2c       	mov	r3, r1
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	20 32       	cpi	r18, 0x20	; 32
    1906:	a0 f4       	brcc	.+40     	; 0x1930 <vfprintf+0x88>
    1908:	8b 32       	cpi	r24, 0x2B	; 43
    190a:	69 f0       	breq	.+26     	; 0x1926 <vfprintf+0x7e>
    190c:	30 f4       	brcc	.+12     	; 0x191a <vfprintf+0x72>
    190e:	80 32       	cpi	r24, 0x20	; 32
    1910:	59 f0       	breq	.+22     	; 0x1928 <vfprintf+0x80>
    1912:	83 32       	cpi	r24, 0x23	; 35
    1914:	69 f4       	brne	.+26     	; 0x1930 <vfprintf+0x88>
    1916:	20 61       	ori	r18, 0x10	; 16
    1918:	2c c0       	rjmp	.+88     	; 0x1972 <vfprintf+0xca>
    191a:	8d 32       	cpi	r24, 0x2D	; 45
    191c:	39 f0       	breq	.+14     	; 0x192c <vfprintf+0x84>
    191e:	80 33       	cpi	r24, 0x30	; 48
    1920:	39 f4       	brne	.+14     	; 0x1930 <vfprintf+0x88>
    1922:	21 60       	ori	r18, 0x01	; 1
    1924:	26 c0       	rjmp	.+76     	; 0x1972 <vfprintf+0xca>
    1926:	22 60       	ori	r18, 0x02	; 2
    1928:	24 60       	ori	r18, 0x04	; 4
    192a:	23 c0       	rjmp	.+70     	; 0x1972 <vfprintf+0xca>
    192c:	28 60       	ori	r18, 0x08	; 8
    192e:	21 c0       	rjmp	.+66     	; 0x1972 <vfprintf+0xca>
    1930:	27 fd       	sbrc	r18, 7
    1932:	27 c0       	rjmp	.+78     	; 0x1982 <vfprintf+0xda>
    1934:	30 ed       	ldi	r19, 0xD0	; 208
    1936:	38 0f       	add	r19, r24
    1938:	3a 30       	cpi	r19, 0x0A	; 10
    193a:	78 f4       	brcc	.+30     	; 0x195a <vfprintf+0xb2>
    193c:	26 ff       	sbrs	r18, 6
    193e:	06 c0       	rjmp	.+12     	; 0x194c <vfprintf+0xa4>
    1940:	fa e0       	ldi	r31, 0x0A	; 10
    1942:	5f 9e       	mul	r5, r31
    1944:	30 0d       	add	r19, r0
    1946:	11 24       	eor	r1, r1
    1948:	53 2e       	mov	r5, r19
    194a:	13 c0       	rjmp	.+38     	; 0x1972 <vfprintf+0xca>
    194c:	8a e0       	ldi	r24, 0x0A	; 10
    194e:	38 9e       	mul	r3, r24
    1950:	30 0d       	add	r19, r0
    1952:	11 24       	eor	r1, r1
    1954:	33 2e       	mov	r3, r19
    1956:	20 62       	ori	r18, 0x20	; 32
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <vfprintf+0xca>
    195a:	8e 32       	cpi	r24, 0x2E	; 46
    195c:	21 f4       	brne	.+8      	; 0x1966 <vfprintf+0xbe>
    195e:	26 fd       	sbrc	r18, 6
    1960:	6b c1       	rjmp	.+726    	; 0x1c38 <vfprintf+0x390>
    1962:	20 64       	ori	r18, 0x40	; 64
    1964:	06 c0       	rjmp	.+12     	; 0x1972 <vfprintf+0xca>
    1966:	8c 36       	cpi	r24, 0x6C	; 108
    1968:	11 f4       	brne	.+4      	; 0x196e <vfprintf+0xc6>
    196a:	20 68       	ori	r18, 0x80	; 128
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <vfprintf+0xca>
    196e:	88 36       	cpi	r24, 0x68	; 104
    1970:	41 f4       	brne	.+16     	; 0x1982 <vfprintf+0xda>
    1972:	f6 01       	movw	r30, r12
    1974:	93 fd       	sbrc	r25, 3
    1976:	85 91       	lpm	r24, Z+
    1978:	93 ff       	sbrs	r25, 3
    197a:	81 91       	ld	r24, Z+
    197c:	6f 01       	movw	r12, r30
    197e:	81 11       	cpse	r24, r1
    1980:	c1 cf       	rjmp	.-126    	; 0x1904 <vfprintf+0x5c>
    1982:	98 2f       	mov	r25, r24
    1984:	9f 7d       	andi	r25, 0xDF	; 223
    1986:	95 54       	subi	r25, 0x45	; 69
    1988:	93 30       	cpi	r25, 0x03	; 3
    198a:	28 f4       	brcc	.+10     	; 0x1996 <vfprintf+0xee>
    198c:	0c 5f       	subi	r16, 0xFC	; 252
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	ff e3       	ldi	r31, 0x3F	; 63
    1992:	f9 83       	std	Y+1, r31	; 0x01
    1994:	0d c0       	rjmp	.+26     	; 0x19b0 <vfprintf+0x108>
    1996:	83 36       	cpi	r24, 0x63	; 99
    1998:	31 f0       	breq	.+12     	; 0x19a6 <vfprintf+0xfe>
    199a:	83 37       	cpi	r24, 0x73	; 115
    199c:	71 f0       	breq	.+28     	; 0x19ba <vfprintf+0x112>
    199e:	83 35       	cpi	r24, 0x53	; 83
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <vfprintf+0xfc>
    19a2:	5b c0       	rjmp	.+182    	; 0x1a5a <vfprintf+0x1b2>
    19a4:	22 c0       	rjmp	.+68     	; 0x19ea <vfprintf+0x142>
    19a6:	f8 01       	movw	r30, r16
    19a8:	80 81       	ld	r24, Z
    19aa:	89 83       	std	Y+1, r24	; 0x01
    19ac:	0e 5f       	subi	r16, 0xFE	; 254
    19ae:	1f 4f       	sbci	r17, 0xFF	; 255
    19b0:	44 24       	eor	r4, r4
    19b2:	43 94       	inc	r4
    19b4:	51 2c       	mov	r5, r1
    19b6:	54 01       	movw	r10, r8
    19b8:	15 c0       	rjmp	.+42     	; 0x19e4 <vfprintf+0x13c>
    19ba:	38 01       	movw	r6, r16
    19bc:	f2 e0       	ldi	r31, 0x02	; 2
    19be:	6f 0e       	add	r6, r31
    19c0:	71 1c       	adc	r7, r1
    19c2:	f8 01       	movw	r30, r16
    19c4:	a0 80       	ld	r10, Z
    19c6:	b1 80       	ldd	r11, Z+1	; 0x01
    19c8:	26 ff       	sbrs	r18, 6
    19ca:	03 c0       	rjmp	.+6      	; 0x19d2 <vfprintf+0x12a>
    19cc:	65 2d       	mov	r22, r5
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <vfprintf+0x12e>
    19d2:	6f ef       	ldi	r22, 0xFF	; 255
    19d4:	7f ef       	ldi	r23, 0xFF	; 255
    19d6:	c5 01       	movw	r24, r10
    19d8:	2c 87       	std	Y+12, r18	; 0x0c
    19da:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <strnlen>
    19de:	2c 01       	movw	r4, r24
    19e0:	83 01       	movw	r16, r6
    19e2:	2c 85       	ldd	r18, Y+12	; 0x0c
    19e4:	2f 77       	andi	r18, 0x7F	; 127
    19e6:	22 2e       	mov	r2, r18
    19e8:	17 c0       	rjmp	.+46     	; 0x1a18 <vfprintf+0x170>
    19ea:	38 01       	movw	r6, r16
    19ec:	f2 e0       	ldi	r31, 0x02	; 2
    19ee:	6f 0e       	add	r6, r31
    19f0:	71 1c       	adc	r7, r1
    19f2:	f8 01       	movw	r30, r16
    19f4:	a0 80       	ld	r10, Z
    19f6:	b1 80       	ldd	r11, Z+1	; 0x01
    19f8:	26 ff       	sbrs	r18, 6
    19fa:	03 c0       	rjmp	.+6      	; 0x1a02 <vfprintf+0x15a>
    19fc:	65 2d       	mov	r22, r5
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <vfprintf+0x15e>
    1a02:	6f ef       	ldi	r22, 0xFF	; 255
    1a04:	7f ef       	ldi	r23, 0xFF	; 255
    1a06:	c5 01       	movw	r24, r10
    1a08:	2c 87       	std	Y+12, r18	; 0x0c
    1a0a:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <strnlen_P>
    1a0e:	2c 01       	movw	r4, r24
    1a10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a12:	20 68       	ori	r18, 0x80	; 128
    1a14:	22 2e       	mov	r2, r18
    1a16:	83 01       	movw	r16, r6
    1a18:	23 fc       	sbrc	r2, 3
    1a1a:	1b c0       	rjmp	.+54     	; 0x1a52 <vfprintf+0x1aa>
    1a1c:	83 2d       	mov	r24, r3
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	48 16       	cp	r4, r24
    1a22:	59 06       	cpc	r5, r25
    1a24:	b0 f4       	brcc	.+44     	; 0x1a52 <vfprintf+0x1aa>
    1a26:	b7 01       	movw	r22, r14
    1a28:	80 e2       	ldi	r24, 0x20	; 32
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1a30:	3a 94       	dec	r3
    1a32:	f4 cf       	rjmp	.-24     	; 0x1a1c <vfprintf+0x174>
    1a34:	f5 01       	movw	r30, r10
    1a36:	27 fc       	sbrc	r2, 7
    1a38:	85 91       	lpm	r24, Z+
    1a3a:	27 fe       	sbrs	r2, 7
    1a3c:	81 91       	ld	r24, Z+
    1a3e:	5f 01       	movw	r10, r30
    1a40:	b7 01       	movw	r22, r14
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1a48:	31 10       	cpse	r3, r1
    1a4a:	3a 94       	dec	r3
    1a4c:	f1 e0       	ldi	r31, 0x01	; 1
    1a4e:	4f 1a       	sub	r4, r31
    1a50:	51 08       	sbc	r5, r1
    1a52:	41 14       	cp	r4, r1
    1a54:	51 04       	cpc	r5, r1
    1a56:	71 f7       	brne	.-36     	; 0x1a34 <vfprintf+0x18c>
    1a58:	e5 c0       	rjmp	.+458    	; 0x1c24 <vfprintf+0x37c>
    1a5a:	84 36       	cpi	r24, 0x64	; 100
    1a5c:	11 f0       	breq	.+4      	; 0x1a62 <vfprintf+0x1ba>
    1a5e:	89 36       	cpi	r24, 0x69	; 105
    1a60:	39 f5       	brne	.+78     	; 0x1ab0 <vfprintf+0x208>
    1a62:	f8 01       	movw	r30, r16
    1a64:	27 ff       	sbrs	r18, 7
    1a66:	07 c0       	rjmp	.+14     	; 0x1a76 <vfprintf+0x1ce>
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	0c 5f       	subi	r16, 0xFC	; 252
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255
    1a74:	08 c0       	rjmp	.+16     	; 0x1a86 <vfprintf+0x1de>
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	88 27       	eor	r24, r24
    1a7c:	77 fd       	sbrc	r23, 7
    1a7e:	80 95       	com	r24
    1a80:	98 2f       	mov	r25, r24
    1a82:	0e 5f       	subi	r16, 0xFE	; 254
    1a84:	1f 4f       	sbci	r17, 0xFF	; 255
    1a86:	2f 76       	andi	r18, 0x6F	; 111
    1a88:	b2 2e       	mov	r11, r18
    1a8a:	97 ff       	sbrs	r25, 7
    1a8c:	09 c0       	rjmp	.+18     	; 0x1aa0 <vfprintf+0x1f8>
    1a8e:	90 95       	com	r25
    1a90:	80 95       	com	r24
    1a92:	70 95       	com	r23
    1a94:	61 95       	neg	r22
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	8f 4f       	sbci	r24, 0xFF	; 255
    1a9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a9c:	20 68       	ori	r18, 0x80	; 128
    1a9e:	b2 2e       	mov	r11, r18
    1aa0:	2a e0       	ldi	r18, 0x0A	; 10
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	a4 01       	movw	r20, r8
    1aa6:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__ultoa_invert>
    1aaa:	a8 2e       	mov	r10, r24
    1aac:	a8 18       	sub	r10, r8
    1aae:	44 c0       	rjmp	.+136    	; 0x1b38 <vfprintf+0x290>
    1ab0:	85 37       	cpi	r24, 0x75	; 117
    1ab2:	29 f4       	brne	.+10     	; 0x1abe <vfprintf+0x216>
    1ab4:	2f 7e       	andi	r18, 0xEF	; 239
    1ab6:	b2 2e       	mov	r11, r18
    1ab8:	2a e0       	ldi	r18, 0x0A	; 10
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	25 c0       	rjmp	.+74     	; 0x1b08 <vfprintf+0x260>
    1abe:	f2 2f       	mov	r31, r18
    1ac0:	f9 7f       	andi	r31, 0xF9	; 249
    1ac2:	bf 2e       	mov	r11, r31
    1ac4:	8f 36       	cpi	r24, 0x6F	; 111
    1ac6:	c1 f0       	breq	.+48     	; 0x1af8 <vfprintf+0x250>
    1ac8:	18 f4       	brcc	.+6      	; 0x1ad0 <vfprintf+0x228>
    1aca:	88 35       	cpi	r24, 0x58	; 88
    1acc:	79 f0       	breq	.+30     	; 0x1aec <vfprintf+0x244>
    1ace:	b4 c0       	rjmp	.+360    	; 0x1c38 <vfprintf+0x390>
    1ad0:	80 37       	cpi	r24, 0x70	; 112
    1ad2:	19 f0       	breq	.+6      	; 0x1ada <vfprintf+0x232>
    1ad4:	88 37       	cpi	r24, 0x78	; 120
    1ad6:	21 f0       	breq	.+8      	; 0x1ae0 <vfprintf+0x238>
    1ad8:	af c0       	rjmp	.+350    	; 0x1c38 <vfprintf+0x390>
    1ada:	2f 2f       	mov	r18, r31
    1adc:	20 61       	ori	r18, 0x10	; 16
    1ade:	b2 2e       	mov	r11, r18
    1ae0:	b4 fe       	sbrs	r11, 4
    1ae2:	0d c0       	rjmp	.+26     	; 0x1afe <vfprintf+0x256>
    1ae4:	8b 2d       	mov	r24, r11
    1ae6:	84 60       	ori	r24, 0x04	; 4
    1ae8:	b8 2e       	mov	r11, r24
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <vfprintf+0x256>
    1aec:	24 ff       	sbrs	r18, 4
    1aee:	0a c0       	rjmp	.+20     	; 0x1b04 <vfprintf+0x25c>
    1af0:	9f 2f       	mov	r25, r31
    1af2:	96 60       	ori	r25, 0x06	; 6
    1af4:	b9 2e       	mov	r11, r25
    1af6:	06 c0       	rjmp	.+12     	; 0x1b04 <vfprintf+0x25c>
    1af8:	28 e0       	ldi	r18, 0x08	; 8
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <vfprintf+0x260>
    1afe:	20 e1       	ldi	r18, 0x10	; 16
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <vfprintf+0x260>
    1b04:	20 e1       	ldi	r18, 0x10	; 16
    1b06:	32 e0       	ldi	r19, 0x02	; 2
    1b08:	f8 01       	movw	r30, r16
    1b0a:	b7 fe       	sbrs	r11, 7
    1b0c:	07 c0       	rjmp	.+14     	; 0x1b1c <vfprintf+0x274>
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	0c 5f       	subi	r16, 0xFC	; 252
    1b18:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1a:	06 c0       	rjmp	.+12     	; 0x1b28 <vfprintf+0x280>
    1b1c:	60 81       	ld	r22, Z
    1b1e:	71 81       	ldd	r23, Z+1	; 0x01
    1b20:	80 e0       	ldi	r24, 0x00	; 0
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 5f       	subi	r16, 0xFE	; 254
    1b26:	1f 4f       	sbci	r17, 0xFF	; 255
    1b28:	a4 01       	movw	r20, r8
    1b2a:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__ultoa_invert>
    1b2e:	a8 2e       	mov	r10, r24
    1b30:	a8 18       	sub	r10, r8
    1b32:	fb 2d       	mov	r31, r11
    1b34:	ff 77       	andi	r31, 0x7F	; 127
    1b36:	bf 2e       	mov	r11, r31
    1b38:	b6 fe       	sbrs	r11, 6
    1b3a:	0b c0       	rjmp	.+22     	; 0x1b52 <vfprintf+0x2aa>
    1b3c:	2b 2d       	mov	r18, r11
    1b3e:	2e 7f       	andi	r18, 0xFE	; 254
    1b40:	a5 14       	cp	r10, r5
    1b42:	50 f4       	brcc	.+20     	; 0x1b58 <vfprintf+0x2b0>
    1b44:	b4 fe       	sbrs	r11, 4
    1b46:	0a c0       	rjmp	.+20     	; 0x1b5c <vfprintf+0x2b4>
    1b48:	b2 fc       	sbrc	r11, 2
    1b4a:	08 c0       	rjmp	.+16     	; 0x1b5c <vfprintf+0x2b4>
    1b4c:	2b 2d       	mov	r18, r11
    1b4e:	2e 7e       	andi	r18, 0xEE	; 238
    1b50:	05 c0       	rjmp	.+10     	; 0x1b5c <vfprintf+0x2b4>
    1b52:	7a 2c       	mov	r7, r10
    1b54:	2b 2d       	mov	r18, r11
    1b56:	03 c0       	rjmp	.+6      	; 0x1b5e <vfprintf+0x2b6>
    1b58:	7a 2c       	mov	r7, r10
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <vfprintf+0x2b6>
    1b5c:	75 2c       	mov	r7, r5
    1b5e:	24 ff       	sbrs	r18, 4
    1b60:	0d c0       	rjmp	.+26     	; 0x1b7c <vfprintf+0x2d4>
    1b62:	fe 01       	movw	r30, r28
    1b64:	ea 0d       	add	r30, r10
    1b66:	f1 1d       	adc	r31, r1
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 33       	cpi	r24, 0x30	; 48
    1b6c:	11 f4       	brne	.+4      	; 0x1b72 <vfprintf+0x2ca>
    1b6e:	29 7e       	andi	r18, 0xE9	; 233
    1b70:	09 c0       	rjmp	.+18     	; 0x1b84 <vfprintf+0x2dc>
    1b72:	22 ff       	sbrs	r18, 2
    1b74:	06 c0       	rjmp	.+12     	; 0x1b82 <vfprintf+0x2da>
    1b76:	73 94       	inc	r7
    1b78:	73 94       	inc	r7
    1b7a:	04 c0       	rjmp	.+8      	; 0x1b84 <vfprintf+0x2dc>
    1b7c:	82 2f       	mov	r24, r18
    1b7e:	86 78       	andi	r24, 0x86	; 134
    1b80:	09 f0       	breq	.+2      	; 0x1b84 <vfprintf+0x2dc>
    1b82:	73 94       	inc	r7
    1b84:	23 fd       	sbrc	r18, 3
    1b86:	13 c0       	rjmp	.+38     	; 0x1bae <vfprintf+0x306>
    1b88:	20 ff       	sbrs	r18, 0
    1b8a:	06 c0       	rjmp	.+12     	; 0x1b98 <vfprintf+0x2f0>
    1b8c:	5a 2c       	mov	r5, r10
    1b8e:	73 14       	cp	r7, r3
    1b90:	18 f4       	brcc	.+6      	; 0x1b98 <vfprintf+0x2f0>
    1b92:	53 0c       	add	r5, r3
    1b94:	57 18       	sub	r5, r7
    1b96:	73 2c       	mov	r7, r3
    1b98:	73 14       	cp	r7, r3
    1b9a:	68 f4       	brcc	.+26     	; 0x1bb6 <vfprintf+0x30e>
    1b9c:	b7 01       	movw	r22, r14
    1b9e:	80 e2       	ldi	r24, 0x20	; 32
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	2c 87       	std	Y+12, r18	; 0x0c
    1ba4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1ba8:	73 94       	inc	r7
    1baa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bac:	f5 cf       	rjmp	.-22     	; 0x1b98 <vfprintf+0x2f0>
    1bae:	73 14       	cp	r7, r3
    1bb0:	10 f4       	brcc	.+4      	; 0x1bb6 <vfprintf+0x30e>
    1bb2:	37 18       	sub	r3, r7
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <vfprintf+0x310>
    1bb6:	31 2c       	mov	r3, r1
    1bb8:	24 ff       	sbrs	r18, 4
    1bba:	12 c0       	rjmp	.+36     	; 0x1be0 <vfprintf+0x338>
    1bbc:	b7 01       	movw	r22, r14
    1bbe:	80 e3       	ldi	r24, 0x30	; 48
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	2c 87       	std	Y+12, r18	; 0x0c
    1bc4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bca:	22 ff       	sbrs	r18, 2
    1bcc:	17 c0       	rjmp	.+46     	; 0x1bfc <vfprintf+0x354>
    1bce:	21 ff       	sbrs	r18, 1
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <vfprintf+0x330>
    1bd2:	88 e5       	ldi	r24, 0x58	; 88
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	02 c0       	rjmp	.+4      	; 0x1bdc <vfprintf+0x334>
    1bd8:	88 e7       	ldi	r24, 0x78	; 120
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	b7 01       	movw	r22, r14
    1bde:	0c c0       	rjmp	.+24     	; 0x1bf8 <vfprintf+0x350>
    1be0:	82 2f       	mov	r24, r18
    1be2:	86 78       	andi	r24, 0x86	; 134
    1be4:	59 f0       	breq	.+22     	; 0x1bfc <vfprintf+0x354>
    1be6:	21 fd       	sbrc	r18, 1
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <vfprintf+0x346>
    1bea:	80 e2       	ldi	r24, 0x20	; 32
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <vfprintf+0x348>
    1bee:	8b e2       	ldi	r24, 0x2B	; 43
    1bf0:	27 fd       	sbrc	r18, 7
    1bf2:	8d e2       	ldi	r24, 0x2D	; 45
    1bf4:	b7 01       	movw	r22, r14
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1bfc:	a5 14       	cp	r10, r5
    1bfe:	38 f4       	brcc	.+14     	; 0x1c0e <vfprintf+0x366>
    1c00:	b7 01       	movw	r22, r14
    1c02:	80 e3       	ldi	r24, 0x30	; 48
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1c0a:	5a 94       	dec	r5
    1c0c:	f7 cf       	rjmp	.-18     	; 0x1bfc <vfprintf+0x354>
    1c0e:	aa 94       	dec	r10
    1c10:	f4 01       	movw	r30, r8
    1c12:	ea 0d       	add	r30, r10
    1c14:	f1 1d       	adc	r31, r1
    1c16:	80 81       	ld	r24, Z
    1c18:	b7 01       	movw	r22, r14
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1c20:	a1 10       	cpse	r10, r1
    1c22:	f5 cf       	rjmp	.-22     	; 0x1c0e <vfprintf+0x366>
    1c24:	33 20       	and	r3, r3
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <vfprintf+0x382>
    1c28:	51 ce       	rjmp	.-862    	; 0x18cc <vfprintf+0x24>
    1c2a:	b7 01       	movw	r22, r14
    1c2c:	80 e2       	ldi	r24, 0x20	; 32
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <fputc>
    1c34:	3a 94       	dec	r3
    1c36:	f6 cf       	rjmp	.-20     	; 0x1c24 <vfprintf+0x37c>
    1c38:	f7 01       	movw	r30, r14
    1c3a:	86 81       	ldd	r24, Z+6	; 0x06
    1c3c:	97 81       	ldd	r25, Z+7	; 0x07
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <vfprintf+0x39c>
    1c40:	8f ef       	ldi	r24, 0xFF	; 255
    1c42:	9f ef       	ldi	r25, 0xFF	; 255
    1c44:	2c 96       	adiw	r28, 0x0c	; 12
    1c46:	e2 e1       	ldi	r30, 0x12	; 18
    1c48:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <__epilogue_restores__>

00001c4c <calloc>:
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
    1c54:	86 9f       	mul	r24, r22
    1c56:	80 01       	movw	r16, r0
    1c58:	87 9f       	mul	r24, r23
    1c5a:	10 0d       	add	r17, r0
    1c5c:	96 9f       	mul	r25, r22
    1c5e:	10 0d       	add	r17, r0
    1c60:	11 24       	eor	r1, r1
    1c62:	c8 01       	movw	r24, r16
    1c64:	0e 94 a1 0a 	call	0x1542	; 0x1542 <malloc>
    1c68:	ec 01       	movw	r28, r24
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	29 f0       	breq	.+10     	; 0x1c78 <calloc+0x2c>
    1c6e:	a8 01       	movw	r20, r16
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <memset>
    1c78:	ce 01       	movw	r24, r28
    1c7a:	df 91       	pop	r29
    1c7c:	cf 91       	pop	r28
    1c7e:	1f 91       	pop	r17
    1c80:	0f 91       	pop	r16
    1c82:	08 95       	ret

00001c84 <strnlen_P>:
    1c84:	fc 01       	movw	r30, r24
    1c86:	05 90       	lpm	r0, Z+
    1c88:	61 50       	subi	r22, 0x01	; 1
    1c8a:	70 40       	sbci	r23, 0x00	; 0
    1c8c:	01 10       	cpse	r0, r1
    1c8e:	d8 f7       	brcc	.-10     	; 0x1c86 <strnlen_P+0x2>
    1c90:	80 95       	com	r24
    1c92:	90 95       	com	r25
    1c94:	8e 0f       	add	r24, r30
    1c96:	9f 1f       	adc	r25, r31
    1c98:	08 95       	ret

00001c9a <memset>:
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <memset+0x6>
    1c9e:	6d 93       	st	X+, r22
    1ca0:	41 50       	subi	r20, 0x01	; 1
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	e0 f7       	brcc	.-8      	; 0x1c9e <memset+0x4>
    1ca6:	08 95       	ret

00001ca8 <strnlen>:
    1ca8:	fc 01       	movw	r30, r24
    1caa:	61 50       	subi	r22, 0x01	; 1
    1cac:	70 40       	sbci	r23, 0x00	; 0
    1cae:	01 90       	ld	r0, Z+
    1cb0:	01 10       	cpse	r0, r1
    1cb2:	d8 f7       	brcc	.-10     	; 0x1caa <strnlen+0x2>
    1cb4:	80 95       	com	r24
    1cb6:	90 95       	com	r25
    1cb8:	8e 0f       	add	r24, r30
    1cba:	9f 1f       	adc	r25, r31
    1cbc:	08 95       	ret

00001cbe <fputc>:
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	18 2f       	mov	r17, r24
    1cc8:	09 2f       	mov	r16, r25
    1cca:	eb 01       	movw	r28, r22
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	81 fd       	sbrc	r24, 1
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <fputc+0x1a>
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	9f ef       	ldi	r25, 0xFF	; 255
    1cd6:	20 c0       	rjmp	.+64     	; 0x1d18 <fputc+0x5a>
    1cd8:	82 ff       	sbrs	r24, 2
    1cda:	10 c0       	rjmp	.+32     	; 0x1cfc <fputc+0x3e>
    1cdc:	4e 81       	ldd	r20, Y+6	; 0x06
    1cde:	5f 81       	ldd	r21, Y+7	; 0x07
    1ce0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ce2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ce4:	42 17       	cp	r20, r18
    1ce6:	53 07       	cpc	r21, r19
    1ce8:	7c f4       	brge	.+30     	; 0x1d08 <fputc+0x4a>
    1cea:	e8 81       	ld	r30, Y
    1cec:	f9 81       	ldd	r31, Y+1	; 0x01
    1cee:	9f 01       	movw	r18, r30
    1cf0:	2f 5f       	subi	r18, 0xFF	; 255
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	39 83       	std	Y+1, r19	; 0x01
    1cf6:	28 83       	st	Y, r18
    1cf8:	10 83       	st	Z, r17
    1cfa:	06 c0       	rjmp	.+12     	; 0x1d08 <fputc+0x4a>
    1cfc:	e8 85       	ldd	r30, Y+8	; 0x08
    1cfe:	f9 85       	ldd	r31, Y+9	; 0x09
    1d00:	81 2f       	mov	r24, r17
    1d02:	09 95       	icall
    1d04:	89 2b       	or	r24, r25
    1d06:	29 f7       	brne	.-54     	; 0x1cd2 <fputc+0x14>
    1d08:	2e 81       	ldd	r18, Y+6	; 0x06
    1d0a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d0c:	2f 5f       	subi	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	3f 83       	std	Y+7, r19	; 0x07
    1d12:	2e 83       	std	Y+6, r18	; 0x06
    1d14:	81 2f       	mov	r24, r17
    1d16:	90 2f       	mov	r25, r16
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	08 95       	ret

00001d22 <__ultoa_invert>:
    1d22:	fa 01       	movw	r30, r20
    1d24:	aa 27       	eor	r26, r26
    1d26:	28 30       	cpi	r18, 0x08	; 8
    1d28:	51 f1       	breq	.+84     	; 0x1d7e <__ultoa_invert+0x5c>
    1d2a:	20 31       	cpi	r18, 0x10	; 16
    1d2c:	81 f1       	breq	.+96     	; 0x1d8e <__ultoa_invert+0x6c>
    1d2e:	e8 94       	clt
    1d30:	6f 93       	push	r22
    1d32:	6e 7f       	andi	r22, 0xFE	; 254
    1d34:	6e 5f       	subi	r22, 0xFE	; 254
    1d36:	7f 4f       	sbci	r23, 0xFF	; 255
    1d38:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d3c:	af 4f       	sbci	r26, 0xFF	; 255
    1d3e:	b1 e0       	ldi	r27, 0x01	; 1
    1d40:	3e d0       	rcall	.+124    	; 0x1dbe <__ultoa_invert+0x9c>
    1d42:	b4 e0       	ldi	r27, 0x04	; 4
    1d44:	3c d0       	rcall	.+120    	; 0x1dbe <__ultoa_invert+0x9c>
    1d46:	67 0f       	add	r22, r23
    1d48:	78 1f       	adc	r23, r24
    1d4a:	89 1f       	adc	r24, r25
    1d4c:	9a 1f       	adc	r25, r26
    1d4e:	a1 1d       	adc	r26, r1
    1d50:	68 0f       	add	r22, r24
    1d52:	79 1f       	adc	r23, r25
    1d54:	8a 1f       	adc	r24, r26
    1d56:	91 1d       	adc	r25, r1
    1d58:	a1 1d       	adc	r26, r1
    1d5a:	6a 0f       	add	r22, r26
    1d5c:	71 1d       	adc	r23, r1
    1d5e:	81 1d       	adc	r24, r1
    1d60:	91 1d       	adc	r25, r1
    1d62:	a1 1d       	adc	r26, r1
    1d64:	20 d0       	rcall	.+64     	; 0x1da6 <__ultoa_invert+0x84>
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <__ultoa_invert+0x48>
    1d68:	68 94       	set
    1d6a:	3f 91       	pop	r19
    1d6c:	2a e0       	ldi	r18, 0x0A	; 10
    1d6e:	26 9f       	mul	r18, r22
    1d70:	11 24       	eor	r1, r1
    1d72:	30 19       	sub	r19, r0
    1d74:	30 5d       	subi	r19, 0xD0	; 208
    1d76:	31 93       	st	Z+, r19
    1d78:	de f6       	brtc	.-74     	; 0x1d30 <__ultoa_invert+0xe>
    1d7a:	cf 01       	movw	r24, r30
    1d7c:	08 95       	ret
    1d7e:	46 2f       	mov	r20, r22
    1d80:	47 70       	andi	r20, 0x07	; 7
    1d82:	40 5d       	subi	r20, 0xD0	; 208
    1d84:	41 93       	st	Z+, r20
    1d86:	b3 e0       	ldi	r27, 0x03	; 3
    1d88:	0f d0       	rcall	.+30     	; 0x1da8 <__ultoa_invert+0x86>
    1d8a:	c9 f7       	brne	.-14     	; 0x1d7e <__ultoa_invert+0x5c>
    1d8c:	f6 cf       	rjmp	.-20     	; 0x1d7a <__ultoa_invert+0x58>
    1d8e:	46 2f       	mov	r20, r22
    1d90:	4f 70       	andi	r20, 0x0F	; 15
    1d92:	40 5d       	subi	r20, 0xD0	; 208
    1d94:	4a 33       	cpi	r20, 0x3A	; 58
    1d96:	18 f0       	brcs	.+6      	; 0x1d9e <__ultoa_invert+0x7c>
    1d98:	49 5d       	subi	r20, 0xD9	; 217
    1d9a:	31 fd       	sbrc	r19, 1
    1d9c:	40 52       	subi	r20, 0x20	; 32
    1d9e:	41 93       	st	Z+, r20
    1da0:	02 d0       	rcall	.+4      	; 0x1da6 <__ultoa_invert+0x84>
    1da2:	a9 f7       	brne	.-22     	; 0x1d8e <__ultoa_invert+0x6c>
    1da4:	ea cf       	rjmp	.-44     	; 0x1d7a <__ultoa_invert+0x58>
    1da6:	b4 e0       	ldi	r27, 0x04	; 4
    1da8:	a6 95       	lsr	r26
    1daa:	97 95       	ror	r25
    1dac:	87 95       	ror	r24
    1dae:	77 95       	ror	r23
    1db0:	67 95       	ror	r22
    1db2:	ba 95       	dec	r27
    1db4:	c9 f7       	brne	.-14     	; 0x1da8 <__ultoa_invert+0x86>
    1db6:	00 97       	sbiw	r24, 0x00	; 0
    1db8:	61 05       	cpc	r22, r1
    1dba:	71 05       	cpc	r23, r1
    1dbc:	08 95       	ret
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	0a 2e       	mov	r0, r26
    1dc4:	06 94       	lsr	r0
    1dc6:	57 95       	ror	r21
    1dc8:	47 95       	ror	r20
    1dca:	37 95       	ror	r19
    1dcc:	27 95       	ror	r18
    1dce:	ba 95       	dec	r27
    1dd0:	c9 f7       	brne	.-14     	; 0x1dc4 <__ultoa_invert+0xa2>
    1dd2:	62 0f       	add	r22, r18
    1dd4:	73 1f       	adc	r23, r19
    1dd6:	84 1f       	adc	r24, r20
    1dd8:	95 1f       	adc	r25, r21
    1dda:	a0 1d       	adc	r26, r0
    1ddc:	08 95       	ret

00001dde <__prologue_saves__>:
    1dde:	2f 92       	push	r2
    1de0:	3f 92       	push	r3
    1de2:	4f 92       	push	r4
    1de4:	5f 92       	push	r5
    1de6:	6f 92       	push	r6
    1de8:	7f 92       	push	r7
    1dea:	8f 92       	push	r8
    1dec:	9f 92       	push	r9
    1dee:	af 92       	push	r10
    1df0:	bf 92       	push	r11
    1df2:	cf 92       	push	r12
    1df4:	df 92       	push	r13
    1df6:	ef 92       	push	r14
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	cd b7       	in	r28, 0x3d	; 61
    1e04:	de b7       	in	r29, 0x3e	; 62
    1e06:	ca 1b       	sub	r28, r26
    1e08:	db 0b       	sbc	r29, r27
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	09 94       	ijmp

00001e16 <__epilogue_restores__>:
    1e16:	2a 88       	ldd	r2, Y+18	; 0x12
    1e18:	39 88       	ldd	r3, Y+17	; 0x11
    1e1a:	48 88       	ldd	r4, Y+16	; 0x10
    1e1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e20:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e22:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e24:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e26:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e28:	b9 84       	ldd	r11, Y+9	; 0x09
    1e2a:	c8 84       	ldd	r12, Y+8	; 0x08
    1e2c:	df 80       	ldd	r13, Y+7	; 0x07
    1e2e:	ee 80       	ldd	r14, Y+6	; 0x06
    1e30:	fd 80       	ldd	r15, Y+5	; 0x05
    1e32:	0c 81       	ldd	r16, Y+4	; 0x04
    1e34:	1b 81       	ldd	r17, Y+3	; 0x03
    1e36:	aa 81       	ldd	r26, Y+2	; 0x02
    1e38:	b9 81       	ldd	r27, Y+1	; 0x01
    1e3a:	ce 0f       	add	r28, r30
    1e3c:	d1 1d       	adc	r29, r1
    1e3e:	0f b6       	in	r0, 0x3f	; 63
    1e40:	f8 94       	cli
    1e42:	de bf       	out	0x3e, r29	; 62
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	cd bf       	out	0x3d, r28	; 61
    1e48:	ed 01       	movw	r28, r26
    1e4a:	08 95       	ret

00001e4c <_exit>:
    1e4c:	f8 94       	cli

00001e4e <__stop_program>:
    1e4e:	ff cf       	rjmp	.-2      	; 0x1e4e <__stop_program>
