
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e4  00800100  0000238e  00002422  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000238e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008002e4  008002e4  00002606  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002606  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000400  00000000  00000000  00002662  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b19  00000000  00000000  00002a62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001779  00000000  00000000  0000657b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b6f  00000000  00000000  00007cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b28  00000000  00000000  00009864  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b26  00000000  00000000  0000a38c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021f9  00000000  00000000  0000aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000368  00000000  00000000  0000d0ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_write+0x24>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee e8       	ldi	r30, 0x8E	; 142
     37c:	f3 e2       	ldi	r31, 0x23	; 35
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3e       	cpi	r26, 0xE4	; 228
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a4 ee       	ldi	r26, 0xE4	; 228
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ac 30       	cpi	r26, 0x0C	; 12
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 1b 09 	call	0x1236	; 0x1236 <main>
     39e:	0c 94 c5 11 	jmp	0x238a	; 0x238a <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:

#include <stdlib.h>
#include <avr/io.h>

void can_init(void){
	mcp_init();
     3a6:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <mcp_init>
	mcp_bitModify(MCP_RXB0CTRL, MCP_RXBCTRL_MASK, 0xff);
     3aa:	4f ef       	ldi	r20, 0xFF	; 255
     3ac:	64 e6       	ldi	r22, 0x64	; 100
     3ae:	80 e6       	ldi	r24, 0x60	; 96
     3b0:	0e 94 c4 03 	call	0x788	; 0x788 <mcp_bitModify>
	mcp_bitModify(MCP_RXB1CTRL, MCP_RXBCTRL_MASK, 0xff);	
     3b4:	4f ef       	ldi	r20, 0xFF	; 255
     3b6:	64 e6       	ldi	r22, 0x64	; 100
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	0e 94 c4 03 	call	0x788	; 0x788 <mcp_bitModify>
	
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	60 ee       	ldi	r22, 0xE0	; 224
     3c2:	8f e0       	ldi	r24, 0x0F	; 15
     3c4:	0c 94 c4 03 	jmp	0x788	; 0x788 <mcp_bitModify>

000003c8 <can_write>:
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
	return msg;
}

//tx_buffer is the address of the control register
void can_write(can_message *msg, uint8_t tx_buffer){
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	f6 2e       	mov	r15, r22
	while(mcp_read(tx_buffer) & (1 << MCP_TEXREQ));	//wait for previous message to send
     3d8:	8f 2d       	mov	r24, r15
     3da:	0e 94 96 03 	call	0x72c	; 0x72c <mcp_read>
     3de:	83 fd       	sbrc	r24, 3
     3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <can_write+0x10>
	
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
     3e2:	68 81       	ld	r22, Y
     3e4:	79 81       	ldd	r23, Y+1	; 0x01
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	76 95       	lsr	r23
     3ea:	67 95       	ror	r22
     3ec:	8a 95       	dec	r24
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <can_write+0x20>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	8f 0d       	add	r24, r15
     3f4:	0e 94 a5 03 	call	0x74a	; 0x74a <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
     3f8:	68 81       	ld	r22, Y
     3fa:	62 95       	swap	r22
     3fc:	66 0f       	add	r22, r22
     3fe:	60 7e       	andi	r22, 0xE0	; 224
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	8f 0d       	add	r24, r15
     404:	0e 94 a5 03 	call	0x74a	; 0x74a <mcp_write>
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
     408:	6a 81       	ldd	r22, Y+2	; 0x02
     40a:	6f 70       	andi	r22, 0x0F	; 15
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	8f 0d       	add	r24, r15
     410:	0e 94 a5 03 	call	0x74a	; 0x74a <mcp_write>
	
	for(int i = 0; i < msg->length; i++){
     414:	00 e0       	ldi	r16, 0x00	; 0
     416:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     418:	96 e0       	ldi	r25, 0x06	; 6
     41a:	e9 2e       	mov	r14, r25
     41c:	ef 0c       	add	r14, r15
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     41e:	2a 81       	ldd	r18, Y+2	; 0x02
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 17       	cp	r16, r18
     424:	13 07       	cpc	r17, r19
     426:	5c f4       	brge	.+22     	; 0x43e <can_write+0x76>
     428:	fe 01       	movw	r30, r28
     42a:	e0 0f       	add	r30, r16
     42c:	f1 1f       	adc	r31, r17
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     42e:	63 81       	ldd	r22, Z+3	; 0x03
     430:	8e 2d       	mov	r24, r14
     432:	80 0f       	add	r24, r16
     434:	0e 94 a5 03 	call	0x74a	; 0x74a <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     438:	0f 5f       	subi	r16, 0xFF	; 255
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	f0 cf       	rjmp	.-32     	; 0x41e <can_write+0x56>
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     43e:	8f 2d       	mov	r24, r15
     440:	82 95       	swap	r24
     442:	8f 70       	andi	r24, 0x0F	; 15
     444:	82 58       	subi	r24, 0x82	; 130
	
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
	
	for(int i = 0; i < msg->length; i++){
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     452:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <mcp_requestToSend>

00000456 <can_pollInterrupt>:
	
}

uint8_t can_pollInterrupt(void){
	if(PIND | (1 << PB3)){ //Check for interrupts
     456:	80 b3       	in	r24, 0x10	; 16
		uint8_t interrupt_register = mcp_read(MCP_CANINTF);
     458:	8c e2       	ldi	r24, 0x2C	; 44
     45a:	0e 94 96 03 	call	0x72c	; 0x72c <mcp_read>
     45e:	98 2f       	mov	r25, r24
		//Finds the register that sent an interrupt signal
		if(interrupt_register & MCP_RX0IF){
     460:	80 ff       	sbrs	r24, 0
     462:	07 c0       	rjmp	.+14     	; 0x472 <can_pollInterrupt+0x1c>
			mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0xFF);
     464:	4f ef       	ldi	r20, 0xFF	; 255
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	8c e2       	ldi	r24, 0x2C	; 44
     46a:	0e 94 c4 03 	call	0x788	; 0x788 <mcp_bitModify>
			return MCP_RXB0CTRL;
     46e:	80 e6       	ldi	r24, 0x60	; 96
     470:	08 95       	ret
		}
		
		else if(interrupt_register & MCP_RX1IF){
     472:	82 70       	andi	r24, 0x02	; 2
     474:	91 ff       	sbrs	r25, 1
     476:	06 c0       	rjmp	.+12     	; 0x484 <can_pollInterrupt+0x2e>
			mcp_bitModify(MCP_CANINTF, MCP_RX1IF, 0xFF);
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	62 e0       	ldi	r22, 0x02	; 2
     47c:	8c e2       	ldi	r24, 0x2C	; 44
     47e:	0e 94 c4 03 	call	0x788	; 0x788 <mcp_bitModify>
			return MCP_RXB1CTRL;
     482:	80 e7       	ldi	r24, 0x70	; 112
		}	
	}
	
	return 0x00;
	
}
     484:	08 95       	ret

00000486 <can_read>:
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
	
	
}

can_message can_read(void){
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	2b 97       	sbiw	r28, 0x0b	; 11
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	6c 01       	movw	r12, r24
	can_message msg;
	uint8_t bufferSelect = can_pollInterrupt();
     4b4:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     4b8:	78 2e       	mov	r7, r24
	/*
	if(!bufferSelect){
		printf("No interrupt detected!");
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	87 0d       	add	r24, r7
     4be:	0e 94 96 03 	call	0x72c	; 0x72c <mcp_read>
     4c2:	e8 2e       	mov	r14, r24
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	87 0d       	add	r24, r7
     4c8:	0e 94 96 03 	call	0x72c	; 0x72c <mcp_read>
     4cc:	82 95       	swap	r24
     4ce:	86 95       	lsr	r24
     4d0:	87 70       	andi	r24, 0x07	; 7
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	e9 9e       	mul	r14, r25
     4d6:	70 01       	movw	r14, r0
     4d8:	11 24       	eor	r1, r1
     4da:	e8 2a       	or	r14, r24
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	87 0d       	add	r24, r7
     4e0:	0e 94 96 03 	call	0x72c	; 0x72c <mcp_read>
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	68 2e       	mov	r6, r24
     4e8:	5e 01       	movw	r10, r28
     4ea:	e4 e0       	ldi	r30, 0x04	; 4
     4ec:	ae 0e       	add	r10, r30
     4ee:	b1 1c       	adc	r11, r1
	
	for(int i = 0; i < msg.length; i++){
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	88 2e       	mov	r8, r24
     4f6:	91 2c       	mov	r9, r1
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     4f8:	f6 e0       	ldi	r31, 0x06	; 6
     4fa:	7f 0e       	add	r7, r31
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     4fc:	08 15       	cp	r16, r8
     4fe:	19 05       	cpc	r17, r9
     500:	54 f4       	brge	.+20     	; 0x516 <__stack+0x17>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     502:	87 2d       	mov	r24, r7
     504:	80 0f       	add	r24, r16
     506:	0e 94 96 03 	call	0x72c	; 0x72c <mcp_read>
     50a:	f5 01       	movw	r30, r10
     50c:	81 93       	st	Z+, r24
     50e:	5f 01       	movw	r10, r30
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     510:	0f 5f       	subi	r16, 0xFF	; 255
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	f3 cf       	rjmp	.-26     	; 0x4fc <can_read+0x76>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
	}
	
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	8c e2       	ldi	r24, 0x2C	; 44
     51c:	0e 94 c4 03 	call	0x788	; 0x788 <mcp_bitModify>
	return msg;
     520:	fa 82       	std	Y+2, r15	; 0x02
     522:	e9 82       	std	Y+1, r14	; 0x01
     524:	6b 82       	std	Y+3, r6	; 0x03
     526:	8b e0       	ldi	r24, 0x0B	; 11
     528:	fe 01       	movw	r30, r28
     52a:	31 96       	adiw	r30, 0x01	; 1
     52c:	d6 01       	movw	r26, r12
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	8a 95       	dec	r24
     534:	e1 f7       	brne	.-8      	; 0x52e <__stack+0x2f>
}
     536:	c6 01       	movw	r24, r12
     538:	2b 96       	adiw	r28, 0x0b	; 11
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	9f 90       	pop	r9
     55a:	8f 90       	pop	r8
     55c:	7f 90       	pop	r7
     55e:	6f 90       	pop	r6
     560:	08 95       	ret

00000562 <new_can_message>:
		printf("%c", msg.data[i]);
	}
	printf("\n");
}

can_message new_can_message(uint16_t id, uint8_t length, uint8_t* data){
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	2b 97       	sbiw	r28, 0x0b	; 11
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	de 01       	movw	r26, r28
     580:	14 96       	adiw	r26, 0x04	; 4
	can_message m;
	m.id = id;
	m.length = length;
	for(int i = 0; i < length; i++){
     582:	f9 01       	movw	r30, r18
     584:	04 2f       	mov	r16, r20
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	7f 01       	movw	r14, r30
     58a:	e2 1a       	sub	r14, r18
     58c:	f3 0a       	sbc	r15, r19
     58e:	e0 16       	cp	r14, r16
     590:	f1 06       	cpc	r15, r17
     592:	1c f4       	brge	.+6      	; 0x59a <new_can_message+0x38>
		m.data[i] = data[i];	
     594:	51 91       	ld	r21, Z+
     596:	5d 93       	st	X+, r21
     598:	f7 cf       	rjmp	.-18     	; 0x588 <new_can_message+0x26>
	}
	
	
	return m;
     59a:	7a 83       	std	Y+2, r23	; 0x02
     59c:	69 83       	std	Y+1, r22	; 0x01
     59e:	4b 83       	std	Y+3, r20	; 0x03
     5a0:	2b e0       	ldi	r18, 0x0B	; 11
     5a2:	fe 01       	movw	r30, r28
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	dc 01       	movw	r26, r24
     5a8:	01 90       	ld	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	2a 95       	dec	r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <new_can_message+0x46>
}
     5b0:	2b 96       	adiw	r28, 0x0b	; 11
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	08 95       	ret

000005ca <can_send_joystick_message>:

void can_send_joystick_message(){
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	64 97       	sbiw	r28, 0x14	; 20
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
	printf("Sending message\n");
     5de:	84 e1       	ldi	r24, 0x14	; 20
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <puts>
	Joystick joy = joy_get_joystick();
     5e6:	0e 94 1b 04 	call	0x836	; 0x836 <joy_get_joystick>
     5ea:	2c 87       	std	Y+12, r18	; 0x0c
     5ec:	3d 87       	std	Y+13, r19	; 0x0d
     5ee:	4e 87       	std	Y+14, r20	; 0x0e
     5f0:	5f 87       	std	Y+15, r21	; 0x0f
     5f2:	68 8b       	std	Y+16, r22	; 0x10
     5f4:	79 8b       	std	Y+17, r23	; 0x11
     5f6:	8a 8b       	std	Y+18, r24	; 0x12
     5f8:	9b 8b       	std	Y+19, r25	; 0x13
	uint8_t joy_data = joy.x;
     5fa:	8c 85       	ldd	r24, Y+12	; 0x0c
     5fc:	9d 85       	ldd	r25, Y+13	; 0x0d
     5fe:	8c 8b       	std	Y+20, r24	; 0x14
	can_message msg = new_can_message(MCP_JOYSTICK_MESSAGE, 1, &joy_data);
     600:	9e 01       	movw	r18, r28
     602:	2c 5e       	subi	r18, 0xEC	; 236
     604:	3f 4f       	sbci	r19, 0xFF	; 255
     606:	41 e0       	ldi	r20, 0x01	; 1
     608:	65 e5       	ldi	r22, 0x55	; 85
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     614:	60 e3       	ldi	r22, 0x30	; 48
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     61e:	64 96       	adiw	r28, 0x14	; 20
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <can_send_slider_message>:

void can_send_slider_message(){
     630:	cf 93       	push	r28
     632:	df 93       	push	r29
     634:	cd b7       	in	r28, 0x3d	; 61
     636:	de b7       	in	r29, 0x3e	; 62
     638:	2c 97       	sbiw	r28, 0x0c	; 12
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg_data = joy_read_left_slider();
     644:	0e 94 81 05 	call	0xb02	; 0xb02 <joy_read_left_slider>
     648:	8c 87       	std	Y+12, r24	; 0x0c
	can_message msg = new_can_message(MCP_SLIDER_MESSAGE, 1, &msg_data);
     64a:	9e 01       	movw	r18, r28
     64c:	24 5f       	subi	r18, 0xF4	; 244
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	41 e0       	ldi	r20, 0x01	; 1
     652:	68 e8       	ldi	r22, 0x88	; 136
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     65e:	60 e3       	ldi	r22, 0x30	; 48
     660:	ce 01       	movw	r24, r28
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     668:	2c 96       	adiw	r28, 0x0c	; 12
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <can_send_button_message>:
void can_send_button_message(){
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	2c 97       	sbiw	r28, 0x0c	; 12
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg_data= joy_read_right_button();
     68e:	0e 94 8b 05 	call	0xb16	; 0xb16 <joy_read_right_button>
     692:	8c 87       	std	Y+12, r24	; 0x0c
	can_message msg = new_can_message(MCP_SOLENOID_MESSAGE, 1, &msg_data);
     694:	9e 01       	movw	r18, r28
     696:	24 5f       	subi	r18, 0xF4	; 244
     698:	3f 4f       	sbci	r19, 0xFF	; 255
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	67 e7       	ldi	r22, 0x77	; 119
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     6a8:	60 e3       	ldi	r22, 0x30	; 48
     6aa:	ce 01       	movw	r24, r28
     6ac:	01 96       	adiw	r24, 0x01	; 1
     6ae:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     6b2:	2c 96       	adiw	r28, 0x0c	; 12
     6b4:	0f b6       	in	r0, 0x3f	; 63
     6b6:	f8 94       	cli
     6b8:	de bf       	out	0x3e, r29	; 62
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	cd bf       	out	0x3d, r28	; 61
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <can_send_pid_message>:
void can_send_pid_message(uint8_t kp_coeff, uint8_t kp_exp, uint8_t ki_coeff, uint8_t ki_exp, uint8_t kd_coeff, uint8_t kd_exp){
     6c4:	ef 92       	push	r14
     6c6:	0f 93       	push	r16
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	61 97       	sbiw	r28, 0x11	; 17
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
	//Using the scientific form of the numbers.
	uint8_t parameters[6] = {kp_coeff, kp_exp, ki_coeff, ki_exp, kd_coeff, kd_exp}; 
     6dc:	8c 87       	std	Y+12, r24	; 0x0c
     6de:	6d 87       	std	Y+13, r22	; 0x0d
     6e0:	4e 87       	std	Y+14, r20	; 0x0e
     6e2:	2f 87       	std	Y+15, r18	; 0x0f
     6e4:	08 8b       	std	Y+16, r16	; 0x10
     6e6:	e9 8a       	std	Y+17, r14	; 0x11
	can_message msg = new_can_message(MCP_PID_MESSAGE, 6, parameters);
     6e8:	9e 01       	movw	r18, r28
     6ea:	24 5f       	subi	r18, 0xF4	; 244
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	46 e0       	ldi	r20, 0x06	; 6
     6f0:	69 e9       	ldi	r22, 0x99	; 153
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	ce 01       	movw	r24, r28
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	printf("yolomeister");
     6fc:	84 e2       	ldi	r24, 0x24	; 36
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <printf>
	can_write(&msg, MCP_TXB0CTRL);
     708:	60 e3       	ldi	r22, 0x30	; 48
     70a:	ce 01       	movw	r24, r28
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
     712:	0f 90       	pop	r0
     714:	0f 90       	pop	r0
     716:	61 96       	adiw	r28, 0x11	; 17
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	0f 91       	pop	r16
     728:	ef 90       	pop	r14
     72a:	08 95       	ret

0000072c <mcp_read>:
#include "mcp.h"
#include "mcp_defines.h"
#include "../../spi/spi.h"
#include <avr/io.h>

char mcp_read(uint8_t address){
     72c:	cf 93       	push	r28
     72e:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << MCP_CS);
     730:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(MCP_READ);
     732:	83 e0       	ldi	r24, 0x03	; 3
     734:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	SPI_transmit(address);
     738:	8c 2f       	mov	r24, r28
     73a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	
	char data = SPI_transmit(0x00);
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	PORTB |= (1 << MCP_CS);
     744:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <mcp_write>:
void mcp_write(uint8_t address, char data){
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	1f 92       	push	r1
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
     756:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     758:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_WRITE);
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	69 83       	std	Y+1, r22	; 0x01
     75e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	SPI_transmit(address);
     762:	81 2f       	mov	r24, r17
     764:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	SPI_transmit(data);
     768:	69 81       	ldd	r22, Y+1	; 0x01
     76a:	86 2f       	mov	r24, r22
     76c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     770:	c4 9a       	sbi	0x18, 4	; 24
}	
     772:	0f 90       	pop	r0
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	08 95       	ret

0000077c <mcp_reset>:
void mcp_reset(){
	PORTB &= ~(1 << MCP_CS);
     77c:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_RESET);
     77e:	80 ec       	ldi	r24, 0xC0	; 192
     780:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     784:	c4 9a       	sbi	0x18, 4	; 24
     786:	08 95       	ret

00000788 <mcp_bitModify>:
}	
void mcp_bitModify(uint8_t address, uint8_t mask, char data){
     788:	1f 93       	push	r17
     78a:	cf 93       	push	r28
     78c:	df 93       	push	r29
     78e:	00 d0       	rcall	.+0      	; 0x790 <mcp_bitModify+0x8>
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     796:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_BIT_MODIFY);
     798:	85 e0       	ldi	r24, 0x05	; 5
     79a:	4a 83       	std	Y+2, r20	; 0x02
     79c:	69 83       	std	Y+1, r22	; 0x01
     79e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	SPI_transmit(address);
     7a2:	81 2f       	mov	r24, r17
     7a4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	SPI_transmit(mask);
     7a8:	69 81       	ldd	r22, Y+1	; 0x01
     7aa:	86 2f       	mov	r24, r22
     7ac:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	SPI_transmit(data);
     7b0:	4a 81       	ldd	r20, Y+2	; 0x02
     7b2:	84 2f       	mov	r24, r20
     7b4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     7b8:	c4 9a       	sbi	0x18, 4	; 24
}
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	1f 91       	pop	r17
     7c4:	08 95       	ret

000007c6 <mcp_requestToSend>:
void mcp_requestToSend(uint8_t buffer){
	PORTB &= ~(1 << MCP_CS);
     7c6:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(buffer);
     7c8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     7cc:	c4 9a       	sbi	0x18, 4	; 24
     7ce:	08 95       	ret

000007d0 <mcp_init>:
	
	return status;
}

void mcp_init(void){
	SPI_masterInit();
     7d0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <SPI_masterInit>
	mcp_reset();
     7d4:	0c 94 be 03 	jmp	0x77c	; 0x77c <mcp_reset>

000007d8 <SPI_masterInit>:
#include <stdio.h>
#include <stdlib.h>

void SPI_masterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5)|(1 << PB7)|(1 << PB4); //4 = SS, 5 = MOSI, 7 = SCK
     7d8:	80 eb       	ldi	r24, 0xB0	; 176
     7da:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6); //DDRB6
     7dc:	be 98       	cbi	0x17, 6	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     7de:	81 e5       	ldi	r24, 0x51	; 81
     7e0:	8d b9       	out	0x0d, r24	; 13
     7e2:	08 95       	ret

000007e4 <SPI_transmit>:
}
uint8_t SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
     7e4:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     7e6:	77 9b       	sbis	0x0e, 7	; 14
     7e8:	fe cf       	rjmp	.-4      	; 0x7e6 <SPI_transmit+0x2>
	return SPDR;
     7ea:	8f b1       	in	r24, 0x0f	; 15
     7ec:	08 95       	ret

000007ee <USART_Init>:
	_delay_ms(100);
}
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     7ee:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     7f0:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     7f2:	8a b1       	in	r24, 0x0a	; 10
     7f4:	88 61       	ori	r24, 0x18	; 24
     7f6:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     7f8:	80 b5       	in	r24, 0x20	; 32
     7fa:	86 68       	ori	r24, 0x86	; 134
     7fc:	80 bd       	out	0x20, r24	; 32
     7fe:	08 95       	ret

00000800 <USART_Transmit>:
}
void USART_Transmit(unsigned char data){
	/*Wait for empty transmit buffer*/
	while( !(UCSR0A & (1<<UDRE0)) );
     800:	5d 9b       	sbis	0x0b, 5	; 11
     802:	fe cf       	rjmp	.-4      	; 0x800 <USART_Transmit>
	
	/*Put data into buffer, sends the data*/
	UDR0 = data;
     804:	8c b9       	out	0x0c, r24	; 12
     806:	08 95       	ret

00000808 <USART_Receive>:
}
unsigned char USART_Receive(void){
	/*Wait for data to be received*/
	while( !(UCSR0A & (1<<RXC0)) );
     808:	5f 9b       	sbis	0x0b, 7	; 11
     80a:	fe cf       	rjmp	.-4      	; 0x808 <USART_Receive>
	
	
	/*Get and return received data from buffer*/
	return UDR0;
     80c:	8c b1       	in	r24, 0x0c	; 12
     80e:	08 95       	ret

00000810 <EEPROM_write>:
#include <avr/io.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     810:	e1 99       	sbic	0x1c, 1	; 28
     812:	fe cf       	rjmp	.-4      	; 0x810 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     814:	9f bb       	out	0x1f, r25	; 31
     816:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     818:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     81a:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     81c:	e1 9a       	sbi	0x1c, 1	; 28
     81e:	08 95       	ret

00000820 <EEPROM_read>:



unsigned char EEPROM_read(unsigned int uiAddress){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     820:	e1 99       	sbic	0x1c, 1	; 28
     822:	fe cf       	rjmp	.-4      	; 0x820 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     824:	9f bb       	out	0x1f, r25	; 31
     826:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     828:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     82a:	8d b3       	in	r24, 0x1d	; 29
     82c:	08 95       	ret

0000082e <SRAM_init>:
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n% 4d errors in retrieval phase \n\n", write_errors, retrieval_errors);
}
void SRAM_init(void){
	MCUCR |= (1 << SRE);
     82e:	85 b7       	in	r24, 0x35	; 53
     830:	80 68       	ori	r24, 0x80	; 128
     832:	85 bf       	out	0x35, r24	; 53
     834:	08 95       	ret

00000836 <joy_get_joystick>:
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
	DDRD &= ~(1 << DDD2);
	PORTD |= (1 << PD2);
}
Joystick joy_get_joystick(void){
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	28 97       	sbiw	r28, 0x08	; 8
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
	return joy;
     84a:	88 e0       	ldi	r24, 0x08	; 8
     84c:	e4 ee       	ldi	r30, 0xE4	; 228
     84e:	f2 e0       	ldi	r31, 0x02	; 2
     850:	de 01       	movw	r26, r28
     852:	11 96       	adiw	r26, 0x01	; 1
     854:	01 90       	ld	r0, Z+
     856:	0d 92       	st	X+, r0
     858:	8a 95       	dec	r24
     85a:	e1 f7       	brne	.-8      	; 0x854 <joy_get_joystick+0x1e>
     85c:	29 81       	ldd	r18, Y+1	; 0x01
     85e:	3a 81       	ldd	r19, Y+2	; 0x02
     860:	4b 81       	ldd	r20, Y+3	; 0x03
     862:	5c 81       	ldd	r21, Y+4	; 0x04
     864:	6d 81       	ldd	r22, Y+5	; 0x05
     866:	7e 81       	ldd	r23, Y+6	; 0x06
}
     868:	8f 81       	ldd	r24, Y+7	; 0x07
     86a:	98 85       	ldd	r25, Y+8	; 0x08
     86c:	28 96       	adiw	r28, 0x08	; 8
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <joy_new_joystick>:
void joy_read_joystick(){
	joy.x = joy_read_x();
	joy.y = joy_read_y();

}
Joystick joy_new_joystick(int x, int y, uint8_t offset_x, uint8_t offset_y){
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
     886:	60 97       	sbiw	r28, 0x10	; 16
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
	Joystick j;
	j.x = x;
     892:	9a 87       	std	Y+10, r25	; 0x0a
     894:	89 87       	std	Y+9, r24	; 0x09
	j.y = y;
     896:	7c 87       	std	Y+12, r23	; 0x0c
     898:	6b 87       	std	Y+11, r22	; 0x0b
	j.offset_x = offset_x;
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	5e 87       	std	Y+14, r21	; 0x0e
     89e:	4d 87       	std	Y+13, r20	; 0x0d
	j.offset_y = offset_y;
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	38 8b       	std	Y+16, r19	; 0x10
     8a4:	2f 87       	std	Y+15, r18	; 0x0f
	
	return j;
     8a6:	88 e0       	ldi	r24, 0x08	; 8
     8a8:	fe 01       	movw	r30, r28
     8aa:	39 96       	adiw	r30, 0x09	; 9
     8ac:	de 01       	movw	r26, r28
     8ae:	11 96       	adiw	r26, 0x01	; 1
     8b0:	01 90       	ld	r0, Z+
     8b2:	0d 92       	st	X+, r0
     8b4:	8a 95       	dec	r24
     8b6:	e1 f7       	brne	.-8      	; 0x8b0 <joy_new_joystick+0x32>
     8b8:	29 81       	ldd	r18, Y+1	; 0x01
     8ba:	3a 81       	ldd	r19, Y+2	; 0x02
     8bc:	4b 81       	ldd	r20, Y+3	; 0x03
     8be:	5c 81       	ldd	r21, Y+4	; 0x04
     8c0:	6d 81       	ldd	r22, Y+5	; 0x05
     8c2:	7e 81       	ldd	r23, Y+6	; 0x06
}
     8c4:	8f 81       	ldd	r24, Y+7	; 0x07
     8c6:	98 85       	ldd	r25, Y+8	; 0x08
     8c8:	60 96       	adiw	r28, 0x10	; 16
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <joy_read_x>:
		return NEUTRAL;
	}		
}

uint8_t joy_read_x(void){
	*adc_data = 0x04;
     8da:	84 e0       	ldi	r24, 0x04	; 4
     8dc:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e0:	82 e6       	ldi	r24, 0x62	; 98
     8e2:	8a 95       	dec	r24
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <joy_read_x+0x8>
     8e6:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     8e8:	80 91 00 14 	lds	r24, 0x1400
}
     8ec:	08 95       	ret

000008ee <joy_read_y>:
uint8_t joy_read_y(void){
	*adc_data = 0x05;
     8ee:	85 e0       	ldi	r24, 0x05	; 5
     8f0:	80 93 00 14 	sts	0x1400, r24
     8f4:	82 e6       	ldi	r24, 0x62	; 98
     8f6:	8a 95       	dec	r24
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <joy_read_y+0x8>
     8fa:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     8fc:	80 91 00 14 	lds	r24, 0x1400
}
     900:	08 95       	ret

00000902 <joy_calibrate>:
	int8_t y = (int8_t)((100.0*(joy.y - joy.offset_y))/((float)255-joy.offset_y));
	
	return joy_new_joystick(x, y, joy.offset_x, joy.offset_y);
}
void joy_calibrate(){
	joy.offset_x = joy_read_x();
     902:	0e 94 6d 04 	call	0x8da	; 0x8da <joy_read_x>
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 e9 02 	sts	0x02E9, r25
     90c:	80 93 e8 02 	sts	0x02E8, r24
	joy.offset_y = joy_read_y();
     910:	0e 94 77 04 	call	0x8ee	; 0x8ee <joy_read_y>
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	90 93 eb 02 	sts	0x02EB, r25
     91a:	80 93 ea 02 	sts	0x02EA, r24
     91e:	08 95       	ret

00000920 <joy_init>:
#include <stdio.h>

Joystick joy;

void joy_init(){
	joy_calibrate();
     920:	0e 94 81 04 	call	0x902	; 0x902 <joy_calibrate>
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
     924:	87 b3       	in	r24, 0x17	; 23
     926:	88 7f       	andi	r24, 0xF8	; 248
     928:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
     92a:	88 b3       	in	r24, 0x18	; 24
     92c:	87 60       	ori	r24, 0x07	; 7
     92e:	88 bb       	out	0x18, r24	; 24
	DDRD &= ~(1 << DDD2);
     930:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     932:	92 9a       	sbi	0x12, 2	; 18
     934:	08 95       	ret

00000936 <joy_read_joystick>:
void joy_calibrate(){
	joy.offset_x = joy_read_x();
	joy.offset_y = joy_read_y();
}
void joy_read_joystick(){
	joy.x = joy_read_x();
     936:	0e 94 6d 04 	call	0x8da	; 0x8da <joy_read_x>
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	90 93 e5 02 	sts	0x02E5, r25
     940:	80 93 e4 02 	sts	0x02E4, r24
	joy.y = joy_read_y();
     944:	0e 94 77 04 	call	0x8ee	; 0x8ee <joy_read_y>
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 e7 02 	sts	0x02E7, r25
     94e:	80 93 e6 02 	sts	0x02E6, r24
     952:	08 95       	ret

00000954 <joy_toPercent>:
	PORTD |= (1 << PD2);
}
Joystick joy_get_joystick(void){
	return joy;
}
Joystick joy_toPercent(){
     954:	4f 92       	push	r4
     956:	5f 92       	push	r5
     958:	6f 92       	push	r6
     95a:	7f 92       	push	r7
     95c:	8f 92       	push	r8
     95e:	9f 92       	push	r9
     960:	af 92       	push	r10
     962:	bf 92       	push	r11
     964:	cf 92       	push	r12
     966:	df 92       	push	r13
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	28 97       	sbiw	r28, 0x08	; 8
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
	joy_read_joystick();
     984:	0e 94 9b 04 	call	0x936	; 0x936 <joy_read_joystick>
	int8_t x = (int8_t)((100.0*(joy.x - joy.offset_x))/((float)255-joy.offset_x));
     988:	e0 90 e4 02 	lds	r14, 0x02E4
     98c:	f0 90 e5 02 	lds	r15, 0x02E5
     990:	00 91 e8 02 	lds	r16, 0x02E8
     994:	10 91 e9 02 	lds	r17, 0x02E9
	int8_t y = (int8_t)((100.0*(joy.y - joy.offset_y))/((float)255-joy.offset_y));
     998:	60 91 e6 02 	lds	r22, 0x02E6
     99c:	70 91 e7 02 	lds	r23, 0x02E7
     9a0:	a0 90 ea 02 	lds	r10, 0x02EA
     9a4:	b0 90 eb 02 	lds	r11, 0x02EB
     9a8:	6a 19       	sub	r22, r10
     9aa:	7b 09       	sbc	r23, r11
     9ac:	88 27       	eor	r24, r24
     9ae:	77 fd       	sbrc	r23, 7
     9b0:	80 95       	com	r24
     9b2:	98 2f       	mov	r25, r24
     9b4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatsisf>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	48 ec       	ldi	r20, 0xC8	; 200
     9be:	52 e4       	ldi	r21, 0x42	; 66
     9c0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__mulsf3>
     9c4:	2b 01       	movw	r4, r22
     9c6:	3c 01       	movw	r6, r24
     9c8:	b5 01       	movw	r22, r10
     9ca:	88 27       	eor	r24, r24
     9cc:	77 fd       	sbrc	r23, 7
     9ce:	80 95       	com	r24
     9d0:	98 2f       	mov	r25, r24
     9d2:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatsisf>
     9d6:	9b 01       	movw	r18, r22
     9d8:	ac 01       	movw	r20, r24
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	8f e7       	ldi	r24, 0x7F	; 127
     9e0:	93 e4       	ldi	r25, 0x43	; 67
     9e2:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     9e6:	9b 01       	movw	r18, r22
     9e8:	ac 01       	movw	r20, r24
     9ea:	c3 01       	movw	r24, r6
     9ec:	b2 01       	movw	r22, r4
     9ee:	0e 94 b6 0b 	call	0x176c	; 0x176c <__divsf3>
     9f2:	0e 94 1e 0c 	call	0x183c	; 0x183c <__fixsfsi>
	
	return joy_new_joystick(x, y, joy.offset_x, joy.offset_y);
     9f6:	86 2e       	mov	r8, r22
     9f8:	99 24       	eor	r9, r9
     9fa:	87 fc       	sbrc	r8, 7
     9fc:	90 94       	com	r9
Joystick joy_get_joystick(void){
	return joy;
}
Joystick joy_toPercent(){
	joy_read_joystick();
	int8_t x = (int8_t)((100.0*(joy.x - joy.offset_x))/((float)255-joy.offset_x));
     9fe:	b7 01       	movw	r22, r14
     a00:	60 1b       	sub	r22, r16
     a02:	71 0b       	sbc	r23, r17
     a04:	88 27       	eor	r24, r24
     a06:	77 fd       	sbrc	r23, 7
     a08:	80 95       	com	r24
     a0a:	98 2f       	mov	r25, r24
     a0c:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatsisf>
     a10:	20 e0       	ldi	r18, 0x00	; 0
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	48 ec       	ldi	r20, 0xC8	; 200
     a16:	52 e4       	ldi	r21, 0x42	; 66
     a18:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__mulsf3>
     a1c:	6b 01       	movw	r12, r22
     a1e:	7c 01       	movw	r14, r24
     a20:	b8 01       	movw	r22, r16
     a22:	88 27       	eor	r24, r24
     a24:	77 fd       	sbrc	r23, 7
     a26:	80 95       	com	r24
     a28:	98 2f       	mov	r25, r24
     a2a:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__floatsisf>
     a2e:	9b 01       	movw	r18, r22
     a30:	ac 01       	movw	r20, r24
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	8f e7       	ldi	r24, 0x7F	; 127
     a38:	93 e4       	ldi	r25, 0x43	; 67
     a3a:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <__subsf3>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	c7 01       	movw	r24, r14
     a44:	b6 01       	movw	r22, r12
     a46:	0e 94 b6 0b 	call	0x176c	; 0x176c <__divsf3>
     a4a:	0e 94 1e 0c 	call	0x183c	; 0x183c <__fixsfsi>
     a4e:	86 2f       	mov	r24, r22
	int8_t y = (int8_t)((100.0*(joy.y - joy.offset_y))/((float)255-joy.offset_y));
	
	return joy_new_joystick(x, y, joy.offset_x, joy.offset_y);
     a50:	2a 2d       	mov	r18, r10
     a52:	40 2f       	mov	r20, r16
     a54:	b4 01       	movw	r22, r8
     a56:	99 27       	eor	r25, r25
     a58:	87 fd       	sbrc	r24, 7
     a5a:	90 95       	com	r25
     a5c:	0e 94 3f 04 	call	0x87e	; 0x87e <joy_new_joystick>
}
     a60:	28 96       	adiw	r28, 0x08	; 8
     a62:	0f b6       	in	r0, 0x3f	; 63
     a64:	f8 94       	cli
     a66:	de bf       	out	0x3e, r29	; 62
     a68:	0f be       	out	0x3f, r0	; 63
     a6a:	cd bf       	out	0x3d, r28	; 61
     a6c:	df 91       	pop	r29
     a6e:	cf 91       	pop	r28
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	ff 90       	pop	r15
     a76:	ef 90       	pop	r14
     a78:	df 90       	pop	r13
     a7a:	cf 90       	pop	r12
     a7c:	bf 90       	pop	r11
     a7e:	af 90       	pop	r10
     a80:	9f 90       	pop	r9
     a82:	8f 90       	pop	r8
     a84:	7f 90       	pop	r7
     a86:	6f 90       	pop	r6
     a88:	5f 90       	pop	r5
     a8a:	4f 90       	pop	r4
     a8c:	08 95       	ret

00000a8e <joy_get_direction>:
	j.offset_x = offset_x;
	j.offset_y = offset_y;
	
	return j;
}
direction joy_get_direction(){
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	cd b7       	in	r28, 0x3d	; 61
     a94:	de b7       	in	r29, 0x3e	; 62
     a96:	28 97       	sbiw	r28, 0x08	; 8
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
	Joystick j = joy_toPercent();
     aa2:	0e 94 aa 04 	call	0x954	; 0x954 <joy_toPercent>
     aa6:	29 83       	std	Y+1, r18	; 0x01
     aa8:	3a 83       	std	Y+2, r19	; 0x02
     aaa:	4b 83       	std	Y+3, r20	; 0x03
     aac:	5c 83       	std	Y+4, r21	; 0x04
     aae:	6d 83       	std	Y+5, r22	; 0x05
     ab0:	7e 83       	std	Y+6, r23	; 0x06
     ab2:	8f 83       	std	Y+7, r24	; 0x07
     ab4:	98 87       	std	Y+8, r25	; 0x08
	if(j.x >= 90){
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	9a 81       	ldd	r25, Y+2	; 0x02
     aba:	8a 35       	cpi	r24, 0x5A	; 90
     abc:	91 05       	cpc	r25, r1
     abe:	8c f4       	brge	.+34     	; 0xae2 <joy_get_direction+0x54>
		return RIGHT;
	}else if(j.x <= -90){
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	9a 81       	ldd	r25, Y+2	; 0x02
     ac4:	87 3a       	cpi	r24, 0xA7	; 167
     ac6:	9f 4f       	sbci	r25, 0xFF	; 255
     ac8:	74 f0       	brlt	.+28     	; 0xae6 <joy_get_direction+0x58>
		return LEFT;
	}else if(j.y >= 90){
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	8a 35       	cpi	r24, 0x5A	; 90
     ad0:	91 05       	cpc	r25, r1
     ad2:	5c f4       	brge	.+22     	; 0xaea <joy_get_direction+0x5c>
		return UP;
	}else if(j.y <= -90){
     ad4:	8b 81       	ldd	r24, Y+3	; 0x03
     ad6:	9c 81       	ldd	r25, Y+4	; 0x04
     ad8:	87 3a       	cpi	r24, 0xA7	; 167
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	44 f4       	brge	.+16     	; 0xaee <joy_get_direction+0x60>
		return DOWN;
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	07 c0       	rjmp	.+14     	; 0xaf0 <joy_get_direction+0x62>
	return j;
}
direction joy_get_direction(){
	Joystick j = joy_toPercent();
	if(j.x >= 90){
		return RIGHT;
     ae2:	84 e0       	ldi	r24, 0x04	; 4
     ae4:	05 c0       	rjmp	.+10     	; 0xaf0 <joy_get_direction+0x62>
	}else if(j.x <= -90){
		return LEFT;
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <joy_get_direction+0x62>
	}else if(j.y >= 90){
		return UP;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <joy_get_direction+0x62>
	}else if(j.y <= -90){
		return DOWN;
	}else{
		return NEUTRAL;
     aee:	80 e0       	ldi	r24, 0x00	; 0
	}		
}
     af0:	28 96       	adiw	r28, 0x08	; 8
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	df 91       	pop	r29
     afe:	cf 91       	pop	r28
     b00:	08 95       	ret

00000b02 <joy_read_left_slider>:
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
}
uint8_t joy_read_left_slider(void){
	volatile char *ext_joy = (char *) adc_data;	//MUX Address
	ext_joy[0] = 0x07;							//Enable CH4
     b02:	87 e0       	ldi	r24, 0x07	; 7
     b04:	80 93 00 14 	sts	0x1400, r24
     b08:	81 e4       	ldi	r24, 0x41	; 65
     b0a:	8a 95       	dec	r24
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <joy_read_left_slider+0x8>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <joy_read_left_slider+0xe>
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
     b10:	80 91 00 14 	lds	r24, 0x1400
}
     b14:	08 95       	ret

00000b16 <joy_read_right_button>:
int joy_read_left_button(void){
	return (PINB & (1 << PINB1)) >> PINB1;
}
int joy_read_right_button(void){
	return (PINB & (1 << PINB0)) >> PINB0;
     b16:	86 b3       	in	r24, 0x16	; 22
}
     b18:	81 70       	andi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	08 95       	ret

00000b1e <oled_write>:
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = selector[col];
		
	}
}
void oled_write(uint8_t character){	
     b1e:	28 e0       	ldi	r18, 0x08	; 8
     b20:	82 9f       	mul	r24, r18
     b22:	c0 01       	movw	r24, r0
     b24:	11 24       	eor	r1, r1
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	80 59       	subi	r24, 0x90	; 144
     b2c:	90 40       	sbci	r25, 0x00	; 0
     b2e:	fc 01       	movw	r30, r24
     b30:	e2 0f       	add	r30, r18
     b32:	f3 1f       	adc	r31, r19
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = pgm_read_byte(&font[character-' '][col]);
     b34:	e4 91       	lpm	r30, Z
     b36:	e0 93 00 12 	sts	0x1200, r30
     b3a:	2f 5f       	subi	r18, 0xFF	; 255
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
		*oled_data = selector[col];
		
	}
}
void oled_write(uint8_t character){	
	for(uint8_t col = 0; col < font_width; col++){
     b3e:	28 30       	cpi	r18, 0x08	; 8
     b40:	31 05       	cpc	r19, r1
     b42:	a9 f7       	brne	.-22     	; 0xb2e <oled_write+0x10>
		*oled_data = pgm_read_byte(&font[character-' '][col]);
		
	}
}
     b44:	08 95       	ret

00000b46 <oled_write_selector>:


void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
}
void oled_write_selector(){
     b46:	e6 e5       	ldi	r30, 0x56	; 86
     b48:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = selector[col];
     b4a:	81 91       	ld	r24, Z+
     b4c:	80 93 00 12 	sts	0x1200, r24

void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
}
void oled_write_selector(){
	for(uint8_t col = 0; col < font_width; col++){
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	ee 35       	cpi	r30, 0x5E	; 94
     b54:	f8 07       	cpc	r31, r24
     b56:	c9 f7       	brne	.-14     	; 0xb4a <oled_write_selector+0x4>
		*oled_data = selector[col];
		
	}
}
     b58:	08 95       	ret

00000b5a <oled_set_start_col>:
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     b5a:	e0 e0       	ldi	r30, 0x00	; 0
     b5c:	f0 e1       	ldi	r31, 0x10	; 16
     b5e:	91 e2       	ldi	r25, 0x21	; 33
     b60:	90 83       	st	Z, r25
     b62:	80 83       	st	Z, r24
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	80 83       	st	Z, r24
     b68:	08 95       	ret

00000b6a <oled_write_string>:
	oled_control_assign(0x21);
	oled_control_assign(start_col);
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
	oled_control_assign(0xb0 + line_nbr);
     b6e:	60 55       	subi	r22, 0x50	; 80
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     b70:	60 93 00 10 	sts	0x1000, r22
     b74:	ec 01       	movw	r28, r24
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
	oled_control_assign(0xb0 + line_nbr);
	for(int i = 0; str[i] != '\0'; i++){
     b76:	89 91       	ld	r24, Y+
     b78:	88 23       	and	r24, r24
     b7a:	19 f0       	breq	.+6      	; 0xb82 <oled_write_string+0x18>
		oled_write(str[i]);
     b7c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <oled_write>
     b80:	fa cf       	rjmp	.-12     	; 0xb76 <oled_write_string+0xc>
	}
}
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <oled_clear_screen>:

void oled_clear_screen(){
	oled_set_start_col(0);
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
     b90:	20 eb       	ldi	r18, 0xB0	; 176
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     b92:	20 93 00 10 	sts	0x1000, r18
     b96:	80 e8       	ldi	r24, 0x80	; 128
     b98:	90 e0       	ldi	r25, 0x00	; 0
void oled_clear_screen(){
	oled_set_start_col(0);
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
     b9a:	10 92 00 12 	sts	0x1200, r1
     b9e:	01 97       	sbiw	r24, 0x01	; 1

void oled_clear_screen(){
	oled_set_start_col(0);
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	d9 f7       	brne	.-10     	; 0xb9a <oled_clear_screen+0x12>
     ba4:	2f 5f       	subi	r18, 0xFF	; 255
	}
}

void oled_clear_screen(){
	oled_set_start_col(0);
	for(int page = 0; page < 8; page++){
     ba6:	28 3b       	cpi	r18, 0xB8	; 184
     ba8:	a1 f7       	brne	.-24     	; 0xb92 <oled_clear_screen+0xa>
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
		}
	}
}
     baa:	08 95       	ret

00000bac <oled_init>:
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     bac:	e0 e0       	ldi	r30, 0x00	; 0
     bae:	f0 e1       	ldi	r31, 0x10	; 16
     bb0:	8e ea       	ldi	r24, 0xAE	; 174
     bb2:	80 83       	st	Z, r24
     bb4:	81 ea       	ldi	r24, 0xA1	; 161
     bb6:	80 83       	st	Z, r24
     bb8:	8a ed       	ldi	r24, 0xDA	; 218
     bba:	80 83       	st	Z, r24
     bbc:	82 e1       	ldi	r24, 0x12	; 18
     bbe:	80 83       	st	Z, r24
     bc0:	88 ec       	ldi	r24, 0xC8	; 200
     bc2:	80 83       	st	Z, r24
     bc4:	88 ea       	ldi	r24, 0xA8	; 168
     bc6:	80 83       	st	Z, r24
     bc8:	8f e3       	ldi	r24, 0x3F	; 63
     bca:	80 83       	st	Z, r24
     bcc:	85 ed       	ldi	r24, 0xD5	; 213
     bce:	80 83       	st	Z, r24
     bd0:	80 e8       	ldi	r24, 0x80	; 128
     bd2:	80 83       	st	Z, r24
     bd4:	81 e8       	ldi	r24, 0x81	; 129
     bd6:	80 83       	st	Z, r24
     bd8:	80 e5       	ldi	r24, 0x50	; 80
     bda:	80 83       	st	Z, r24
     bdc:	89 ed       	ldi	r24, 0xD9	; 217
     bde:	80 83       	st	Z, r24
     be0:	81 e2       	ldi	r24, 0x21	; 33
     be2:	80 83       	st	Z, r24
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	80 83       	st	Z, r24
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	80 83       	st	Z, r24
     bec:	8b ed       	ldi	r24, 0xDB	; 219
     bee:	80 83       	st	Z, r24
     bf0:	80 e3       	ldi	r24, 0x30	; 48
     bf2:	80 83       	st	Z, r24
     bf4:	8d ea       	ldi	r24, 0xAD	; 173
     bf6:	80 83       	st	Z, r24
     bf8:	10 82       	st	Z, r1
     bfa:	84 ea       	ldi	r24, 0xA4	; 164
     bfc:	80 83       	st	Z, r24
     bfe:	86 ea       	ldi	r24, 0xA6	; 166
     c00:	80 83       	st	Z, r24
     c02:	8f ea       	ldi	r24, 0xAF	; 175
     c04:	80 83       	st	Z, r24
	oled_control_assign(0xad);    //master configuration
	oled_control_assign(0x00);
	oled_control_assign(0xa4);    //out follows RAM content
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
     c06:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_clear_screen>
	
	is_party_toggle = 0;
     c0a:	10 92 ed 02 	sts	0x02ED, r1
     c0e:	10 92 ec 02 	sts	0x02EC, r1
     c12:	08 95       	ret

00000c14 <oled_set_write_position>:
			*oled_data = 0x00;
		}
	}
}

void oled_set_write_position(int row, int col){
     c14:	cf 93       	push	r28
     c16:	c8 2f       	mov	r28, r24
	oled_set_start_col(col);
     c18:	cb 01       	movw	r24, r22
     c1a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
	oled_control_assign(0xb0 + row);
     c1e:	c0 55       	subi	r28, 0x50	; 80
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c20:	c0 93 00 10 	sts	0x1000, r28
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
	oled_control_assign(0xb0 + row);
}
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <oled_toggle_party_mode>:

void oled_toggle_party_mode(void){
	//Invert screen
	if(is_party_toggle){
     c28:	80 91 ec 02 	lds	r24, 0x02EC
     c2c:	90 91 ed 02 	lds	r25, 0x02ED
     c30:	89 2b       	or	r24, r25
     c32:	41 f0       	breq	.+16     	; 0xc44 <oled_toggle_party_mode+0x1c>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c34:	86 ea       	ldi	r24, 0xA6	; 166
     c36:	80 93 00 10 	sts	0x1000, r24

void oled_toggle_party_mode(void){
	//Invert screen
	if(is_party_toggle){
		oled_control_assign(0xa6);
		is_party_toggle=0;	
     c3a:	10 92 ed 02 	sts	0x02ED, r1
     c3e:	10 92 ec 02 	sts	0x02EC, r1
     c42:	08 95       	ret
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c44:	87 ea       	ldi	r24, 0xA7	; 167
     c46:	80 93 00 10 	sts	0x1000, r24
		oled_control_assign(0xa6);
		is_party_toggle=0;	
	}
	else{
		oled_control_assign(0xa7);
		is_party_toggle=1;		
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	90 93 ed 02 	sts	0x02ED, r25
     c52:	80 93 ec 02 	sts	0x02EC, r24
     c56:	08 95       	ret

00000c58 <oled_printf>:
	}
}

void oled_printf(char* fmt, ...){
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	cd b7       	in	r28, 0x3d	; 61
     c5e:	de b7       	in	r29, 0x3e	; 62
     c60:	fe 01       	movw	r30, r28
     c62:	35 96       	adiw	r30, 0x05	; 5
     c64:	61 91       	ld	r22, Z+
     c66:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     c68:	af 01       	movw	r20, r30
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <vfprintf>
	va_end(v);
}
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <oled_set_brightness>:

void oled_set_brightness(){
     c78:	cf 93       	push	r28
	oled_clear_screen();
     c7a:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_clear_screen>
		}
	}
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c86:	82 eb       	ldi	r24, 0xB2	; 178
     c88:	80 93 00 10 	sts	0x1000, r24
}

void oled_set_brightness(){
	oled_clear_screen();
	oled_set_write_position(2, 0);
	oled_printf("Use the left");
     c8c:	80 e3       	ldi	r24, 0x30	; 48
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	9f 93       	push	r25
     c92:	8f 93       	push	r24
     c94:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
		}
	}
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     ca0:	83 eb       	ldi	r24, 0xB3	; 179
     ca2:	80 93 00 10 	sts	0x1000, r24
void oled_set_brightness(){
	oled_clear_screen();
	oled_set_write_position(2, 0);
	oled_printf("Use the left");
	oled_set_write_position(3, 0);
	oled_printf("slider to");
     ca6:	8d e3       	ldi	r24, 0x3D	; 61
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
		}
	}
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     cba:	84 eb       	ldi	r24, 0xB4	; 180
     cbc:	80 93 00 10 	sts	0x1000, r24
	oled_set_write_position(2, 0);
	oled_printf("Use the left");
	oled_set_write_position(3, 0);
	oled_printf("slider to");
	oled_set_write_position(4, 0);
	oled_printf("set brightness");
     cc0:	87 e4       	ldi	r24, 0x47	; 71
     cc2:	91 e0       	ldi	r25, 0x01	; 1
     cc4:	9f 93       	push	r25
     cc6:	8f 93       	push	r24
     cc8:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	while(joy_get_direction() != LEFT){
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     cd8:	c1 e8       	ldi	r28, 0x81	; 129
	oled_printf("Use the left");
	oled_set_write_position(3, 0);
	oled_printf("slider to");
	oled_set_write_position(4, 0);
	oled_printf("set brightness");
	while(joy_get_direction() != LEFT){
     cda:	0e 94 47 05 	call	0xa8e	; 0xa8e <joy_get_direction>
     cde:	83 30       	cpi	r24, 0x03	; 3
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <oled_set_brightness+0x78>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     ce2:	c0 93 00 10 	sts	0x1000, r28
	oled_printf("slider to");
	oled_set_write_position(4, 0);
	oled_printf("set brightness");
	while(joy_get_direction() != LEFT){
		oled_control_assign(0x81);
		oled_control_assign(joy_read_left_slider());
     ce6:	0e 94 81 05 	call	0xb02	; 0xb02 <joy_read_left_slider>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     cea:	80 93 00 10 	sts	0x1000, r24
     cee:	f5 cf       	rjmp	.-22     	; 0xcda <oled_set_brightness+0x62>
	oled_printf("set brightness");
	while(joy_get_direction() != LEFT){
		oled_control_assign(0x81);
		oled_control_assign(joy_read_left_slider());
	}
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <ir_init>:
#include "ir.h"

ir_state ir;

void ir_init(void){
	ir = new_ir_state(0, 0, 0);
     cf4:	e0 ef       	ldi	r30, 0xF0	; 240
     cf6:	f2 e0       	ldi	r31, 0x02	; 2
     cf8:	10 82       	st	Z, r1
     cfa:	12 82       	std	Z+2, r1	; 0x02
     cfc:	11 82       	std	Z+1, r1	; 0x01
     cfe:	13 82       	std	Z+3, r1	; 0x03
     d00:	08 95       	ret

00000d02 <timer_init>:
#include <avr/interrupt.h>
#include <stdlib.h>


void timer_init() {
	TCCR3A &= ~(1<<WGM30);
     d02:	eb e8       	ldi	r30, 0x8B	; 139
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	8e 7f       	andi	r24, 0xFE	; 254
     d0a:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM31);
     d0c:	80 81       	ld	r24, Z
     d0e:	8d 7f       	andi	r24, 0xFD	; 253
     d10:	80 83       	st	Z, r24
	TCCR3B |=  (1<<WGM32);
     d12:	ea e8       	ldi	r30, 0x8A	; 138
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	88 60       	ori	r24, 0x08	; 8
     d1a:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<WGM33);
     d1c:	80 81       	ld	r24, Z
     d1e:	8f 7e       	andi	r24, 0xEF	; 239
     d20:	80 83       	st	Z, r24
	
	OCR3A = 7*68; //68 for 70Hz, 4760 for 1Hz
     d22:	8c ed       	ldi	r24, 0xDC	; 220
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	90 93 87 00 	sts	0x0087, r25
     d2a:	80 93 86 00 	sts	0x0086, r24
	
	//enable interrupt on OCR3A compare
	ETIMSK |= (1<<OCIE3A);
     d2e:	ed e7       	ldi	r30, 0x7D	; 125
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	80 61       	ori	r24, 0x10	; 16
     d36:	80 83       	st	Z, r24
	TIFR |= (1<<ICF1);
     d38:	88 b7       	in	r24, 0x38	; 56
     d3a:	88 60       	ori	r24, 0x08	; 8
     d3c:	88 bf       	out	0x38, r24	; 56
	
	sei();
     d3e:	78 94       	sei
     d40:	08 95       	ret

00000d42 <timer_enable>:

}

void timer_enable(){
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR3B |=  (1<<CS32) | (1<<CS30);
     d42:	ea e8       	ldi	r30, 0x8A	; 138
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	85 60       	ori	r24, 0x05	; 5
     d4a:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
     d4c:	80 81       	ld	r24, Z
     d4e:	8d 7f       	andi	r24, 0xFD	; 253
     d50:	80 83       	st	Z, r24
     d52:	08 95       	ret

00000d54 <timer_disable>:
}

void timer_disable(){
	TCCR3B &= ~((1<<CS30) | (1<<CS31) | (1<<CS32));
     d54:	ea e8       	ldi	r30, 0x8A	; 138
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	88 7f       	andi	r24, 0xF8	; 248
     d5c:	80 83       	st	Z, r24
     d5e:	08 95       	ret

00000d60 <__vector_7>:
	else{
		timer_disable();
	}
}

ISR(TIMER3_COMPA_vect){
     d60:	1f 92       	push	r1
     d62:	0f 92       	push	r0
     d64:	0f b6       	in	r0, 0x3f	; 63
     d66:	0f 92       	push	r0
     d68:	11 24       	eor	r1, r1
     d6a:	2f 93       	push	r18
     d6c:	3f 93       	push	r19
     d6e:	4f 93       	push	r20
     d70:	5f 93       	push	r21
     d72:	6f 93       	push	r22
     d74:	7f 93       	push	r23
     d76:	8f 93       	push	r24
     d78:	9f 93       	push	r25
     d7a:	af 93       	push	r26
     d7c:	bf 93       	push	r27
     d7e:	ef 93       	push	r30
     d80:	ff 93       	push	r31
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	2b 97       	sbiw	r28, 0x0b	; 11
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	cd bf       	out	0x3d, r28	; 61
	can_message msg = new_can_message(0, 0, NULL);
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	ce 01       	movw	r24, r28
     d9c:	01 96       	adiw	r24, 0x01	; 1
     d9e:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	if(can_pollInterrupt()){
     da2:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     da6:	88 23       	and	r24, r24
     da8:	21 f0       	breq	.+8      	; 0xdb2 <__vector_7+0x52>
		msg = can_read();
     daa:	ce 01       	movw	r24, r28
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	0e 94 43 02 	call	0x486	; 0x486 <can_read>
	}
	
	if(msg.id == MCP_IR_MESSAGE){
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	9a 81       	ldd	r25, Y+2	; 0x02
     db6:	86 36       	cpi	r24, 0x66	; 102
     db8:	91 05       	cpc	r25, r1
     dba:	31 f4       	brne	.+12     	; 0xdc8 <__vector_7+0x68>
		game_lost = msg.data[0];
     dbc:	8c 81       	ldd	r24, Y+4	; 0x04
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	90 93 ef 02 	sts	0x02EF, r25
     dc4:	80 93 ee 02 	sts	0x02EE, r24
	}
	
	if (!game_lost){	
     dc8:	80 91 ee 02 	lds	r24, 0x02EE
     dcc:	90 91 ef 02 	lds	r25, 0x02EF
     dd0:	89 2b       	or	r24, r25
     dd2:	11 f4       	brne	.+4      	; 0xdd8 <__vector_7+0x78>
		game_track_score();
     dd4:	0e 94 10 07 	call	0xe20	; 0xe20 <game_track_score>
	}
	

	oled_toggle_party_mode();
     dd8:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_toggle_party_mode>
	
	
	can_send_joystick_message();
     ddc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <can_send_joystick_message>
	can_send_slider_message();
     de0:	0e 94 18 03 	call	0x630	; 0x630 <can_send_slider_message>
	can_send_button_message();
     de4:	0e 94 3d 03 	call	0x67a	; 0x67a <can_send_button_message>
	
     de8:	2b 96       	adiw	r28, 0x0b	; 11
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <game_init>:
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
     e1a:	80 93 f6 02 	sts	0x02F6, r24
     e1e:	08 95       	ret

00000e20 <game_track_score>:
	game_reset_score();
	oled_clear_screen();
}

void game_track_score(){
	game_score_counter++;
     e20:	80 91 f5 02 	lds	r24, 0x02F5
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	80 93 f5 02 	sts	0x02F5, r24
	
	//Using 70 Hz clock
	if(game_score_counter > counting_speed){
     e2a:	90 91 f6 02 	lds	r25, 0x02F6
     e2e:	98 17       	cp	r25, r24
     e30:	d8 f4       	brcc	.+54     	; 0xe68 <game_track_score+0x48>
		game_score++;
     e32:	80 91 f4 02 	lds	r24, 0x02F4
     e36:	8f 5f       	subi	r24, 0xFF	; 255
     e38:	80 93 f4 02 	sts	0x02F4, r24
		game_score_counter = 0;
     e3c:	10 92 f5 02 	sts	0x02F5, r1
		oled_set_write_position(4, 16);
     e40:	60 e1       	ldi	r22, 0x10	; 16
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	84 e0       	ldi	r24, 0x04	; 4
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
		oled_printf("Score: %d", game_score);
     e4c:	80 91 f4 02 	lds	r24, 0x02F4
     e50:	1f 92       	push	r1
     e52:	8f 93       	push	r24
     e54:	8e e5       	ldi	r24, 0x5E	; 94
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	08 95       	ret

00000e6a <game_reset_score>:
	
	highscore_print();
}

void game_reset_score(void){
	game_score = 0;
     e6a:	10 92 f4 02 	sts	0x02F4, r1
	game_score_counter = 0;
     e6e:	10 92 f5 02 	sts	0x02F5, r1
     e72:	08 95       	ret

00000e74 <game_start>:

void game_init(uint8_t speed){
	counting_speed = speed;
}
void game_start(void){
	game_lost = 0;
     e74:	10 92 ef 02 	sts	0x02EF, r1
     e78:	10 92 ee 02 	sts	0x02EE, r1
	timer_enable();
     e7c:	0e 94 a1 06 	call	0xd42	; 0xd42 <timer_enable>
	game_reset_score();
     e80:	0e 94 35 07 	call	0xe6a	; 0xe6a <game_reset_score>
	oled_clear_screen();
     e84:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <oled_clear_screen>

00000e88 <game_introMessage>:
void game_reset_score(void){
	game_score = 0;
	game_score_counter = 0;
}
void game_introMessage(void){
	oled_clear_screen();
     e88:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_clear_screen>
	oled_set_write_position(0, 0);
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("Welcome to this");
     e98:	88 e6       	ldi	r24, 0x68	; 104
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	9f 93       	push	r25
     e9e:	8f 93       	push	r24
     ea0:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(1, 0);
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("interactive ball");
     eb0:	88 e7       	ldi	r24, 0x78	; 120
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	9f 93       	push	r25
     eb6:	8f 93       	push	r24
     eb8:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(2, 0);
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("bump experience.");
     ec8:	89 e8       	ldi	r24, 0x89	; 137
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	9f 93       	push	r25
     ece:	8f 93       	push	r24
     ed0:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(4, 0);
     ed4:	60 e0       	ldi	r22, 0x00	; 0
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	84 e0       	ldi	r24, 0x04	; 4
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("Put your balls");
     ee0:	8a e9       	ldi	r24, 0x9A	; 154
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(5, 0);
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	70 e0       	ldi	r23, 0x00	; 0
     ef0:	85 e0       	ldi	r24, 0x05	; 5
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("on the solenoid");
     ef8:	89 ea       	ldi	r24, 0xA9	; 169
     efa:	91 e0       	ldi	r25, 0x01	; 1
     efc:	9f 93       	push	r25
     efe:	8f 93       	push	r24
     f00:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(6, 0);
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	86 e0       	ldi	r24, 0x06	; 6
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("to begin..");
     f10:	89 eb       	ldi	r24, 0xB9	; 185
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	9f 93       	push	r25
     f16:	8f 93       	push	r24
     f18:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(7, 0);
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	87 e0       	ldi	r24, 0x07	; 7
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("  ..good luck");
     f28:	84 ec       	ldi	r24, 0xC4	; 196
     f2a:	91 e0       	ldi	r25, 0x01	; 1
     f2c:	9f 93       	push	r25
     f2e:	8f 93       	push	r24
     f30:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
     f34:	8d b7       	in	r24, 0x3d	; 61
     f36:	9e b7       	in	r25, 0x3e	; 62
     f38:	0e 96       	adiw	r24, 0x0e	; 14
     f3a:	0f b6       	in	r0, 0x3f	; 63
     f3c:	f8 94       	cli
     f3e:	9e bf       	out	0x3e, r25	; 62
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	8d bf       	out	0x3d, r24	; 61
     f44:	08 95       	ret

00000f46 <game_postGameMessage>:
}

void game_postGameMessage(int rank){
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
	oled_set_write_position(1,8);
     f4c:	68 e0       	ldi	r22, 0x08	; 8
     f4e:	70 e0       	ldi	r23, 0x00	; 0
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("NEW HIGHSCORE!");
     f58:	22 ed       	ldi	r18, 0xD2	; 210
     f5a:	31 e0       	ldi	r19, 0x01	; 1
     f5c:	3f 93       	push	r19
     f5e:	2f 93       	push	r18
     f60:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(2,0);
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	70 e0       	ldi	r23, 0x00	; 0
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("Finished as");
     f70:	21 ee       	ldi	r18, 0xE1	; 225
     f72:	31 e0       	ldi	r19, 0x01	; 1
     f74:	3f 93       	push	r19
     f76:	2f 93       	push	r18
     f78:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	oled_set_write_position(3,0);
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	83 e0       	ldi	r24, 0x03	; 3
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("number %d", rank);
     f88:	df 93       	push	r29
     f8a:	cf 93       	push	r28
     f8c:	8d ee       	ldi	r24, 0xED	; 237
     f8e:	91 e0       	ldi	r25, 0x01	; 1
     f90:	9f 93       	push	r25
     f92:	8f 93       	push	r24
     f94:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
     f98:	8d b7       	in	r24, 0x3d	; 61
     f9a:	9e b7       	in	r25, 0x3e	; 62
     f9c:	08 96       	adiw	r24, 0x08	; 8
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	9e bf       	out	0x3e, r25	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	8d bf       	out	0x3d, r24	; 61
}
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <game_end>:
		oled_printf("Score: %d", game_score);
	}
}

void game_end(void){
	timer_disable();
     fae:	0e 94 aa 06 	call	0xd54	; 0xd54 <timer_disable>
	oled_clear_screen();
     fb2:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_clear_screen>
	uint8_t rank = highscore_update(game_score);
     fb6:	80 91 f4 02 	lds	r24, 0x02F4
     fba:	0e 94 71 08 	call	0x10e2	; 0x10e2 <highscore_update>
	if(rank){
     fbe:	88 23       	and	r24, r24
     fc0:	69 f0       	breq	.+26     	; 0xfdc <game_end+0x2e>
		game_postGameMessage(rank);
     fc2:	99 27       	eor	r25, r25
     fc4:	0e 94 a3 07 	call	0xf46	; 0xf46 <game_postGameMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fc8:	2f ef       	ldi	r18, 0xFF	; 255
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	9a e4       	ldi	r25, 0x4A	; 74
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	80 40       	sbci	r24, 0x00	; 0
     fd2:	90 40       	sbci	r25, 0x00	; 0
     fd4:	e1 f7       	brne	.-8      	; 0xfce <game_end+0x20>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <game_end+0x2a>
     fd8:	00 00       	nop
     fda:	17 c0       	rjmp	.+46     	; 0x100a <game_end+0x5c>
		_delay_ms(5000);
	
	}
	else{
		oled_set_write_position(2, 8);	
     fdc:	68 e0       	ldi	r22, 0x08	; 8
     fde:	70 e0       	ldi	r23, 0x00	; 0
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
		printf("You so bad.");
     fe8:	87 ef       	ldi	r24, 0xF7	; 247
     fea:	91 e0       	ldi	r25, 0x01	; 1
     fec:	9f 93       	push	r25
     fee:	8f 93       	push	r24
     ff0:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <printf>
     ff4:	2f ef       	ldi	r18, 0xFF	; 255
     ff6:	8f ef       	ldi	r24, 0xFF	; 255
     ff8:	9a e4       	ldi	r25, 0x4A	; 74
     ffa:	21 50       	subi	r18, 0x01	; 1
     ffc:	80 40       	sbci	r24, 0x00	; 0
     ffe:	90 40       	sbci	r25, 0x00	; 0
    1000:	e1 f7       	brne	.-8      	; 0xffa <game_end+0x4c>
    1002:	00 c0       	rjmp	.+0      	; 0x1004 <game_end+0x56>
    1004:	00 00       	nop
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
		_delay_ms(5000);
	}
	
	highscore_print();
    100a:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <highscore_print>

0000100e <game_main>:
	oled_printf("number %d", rank);
}


void game_main(void){
	game_introMessage();
    100e:	0e 94 44 07 	call	0xe88	; 0xe88 <game_introMessage>
	while(!joy_read_right_button()){
    1012:	0e 94 8b 05 	call	0xb16	; 0xb16 <joy_read_right_button>
    1016:	89 2b       	or	r24, r25
    1018:	29 f4       	brne	.+10     	; 0x1024 <game_main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101a:	80 e1       	ldi	r24, 0x10	; 16
    101c:	8a 95       	dec	r24
    101e:	f1 f7       	brne	.-4      	; 0x101c <game_main+0xe>
    1020:	00 c0       	rjmp	.+0      	; 0x1022 <game_main+0x14>
    1022:	f7 cf       	rjmp	.-18     	; 0x1012 <game_main+0x4>
		_delay_us(10);
	}
	game_start();
    1024:	0e 94 3a 07 	call	0xe74	; 0xe74 <game_start>
	while(!game_lost){
    1028:	80 91 ee 02 	lds	r24, 0x02EE
    102c:	90 91 ef 02 	lds	r25, 0x02EF
    1030:	89 2b       	or	r24, r25
    1032:	29 f4       	brne	.+10     	; 0x103e <game_main+0x30>
    1034:	80 e1       	ldi	r24, 0x10	; 16
    1036:	8a 95       	dec	r24
    1038:	f1 f7       	brne	.-4      	; 0x1036 <game_main+0x28>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <game_main+0x2e>
    103c:	f5 cf       	rjmp	.-22     	; 0x1028 <game_main+0x1a>
		_delay_us(10);
	}
	oled_printf("Game lost!");
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	9f 93       	push	r25
    1044:	8f 93       	push	r24
    1046:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
	game_end();
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0c 94 d7 07 	jmp	0xfae	; 0xfae <game_end>

00001052 <game_hard_difficulty>:
}

void game_hard_difficulty(void){
    1052:	ef 92       	push	r14
    1054:	0f 93       	push	r16
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
    1056:	83 e2       	ldi	r24, 0x23	; 35
    1058:	80 93 f6 02 	sts	0x02F6, r24
	game_end();
}

void game_hard_difficulty(void){
	game_init(35);
	can_send_pid_message(7, 1, 1, 1, 0, 0);
    105c:	e1 2c       	mov	r14, r1
    105e:	00 e0       	ldi	r16, 0x00	; 0
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	87 e0       	ldi	r24, 0x07	; 7
    1068:	0e 94 62 03 	call	0x6c4	; 0x6c4 <can_send_pid_message>
}
    106c:	0f 91       	pop	r16
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

00001072 <game_medium_difficulty>:

void game_medium_difficulty(void){
    1072:	ef 92       	push	r14
    1074:	0f 93       	push	r16
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
    1076:	86 e4       	ldi	r24, 0x46	; 70
    1078:	80 93 f6 02 	sts	0x02F6, r24
	can_send_pid_message(7, 1, 1, 1, 0, 0);
}

void game_medium_difficulty(void){
	game_init(70);
	can_send_pid_message(1, 1, 2, 1, 0, 0);
    107c:	e1 2c       	mov	r14, r1
    107e:	00 e0       	ldi	r16, 0x00	; 0
    1080:	21 e0       	ldi	r18, 0x01	; 1
    1082:	42 e0       	ldi	r20, 0x02	; 2
    1084:	61 e0       	ldi	r22, 0x01	; 1
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	0e 94 62 03 	call	0x6c4	; 0x6c4 <can_send_pid_message>
}
    108c:	0f 91       	pop	r16
    108e:	ef 90       	pop	r14
    1090:	08 95       	ret

00001092 <game_impossible_difficulty>:

void game_impossible_difficulty(void){
    1092:	ef 92       	push	r14
    1094:	0f 93       	push	r16
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
    1096:	8a e0       	ldi	r24, 0x0A	; 10
    1098:	80 93 f6 02 	sts	0x02F6, r24
	can_send_pid_message(1, 1, 2, 1, 0, 0);
}

void game_impossible_difficulty(void){
	game_init(10);
	can_send_pid_message(1, 2, 1, 2, 1, 1);
    109c:	ee 24       	eor	r14, r14
    109e:	e3 94       	inc	r14
    10a0:	01 e0       	ldi	r16, 0x01	; 1
    10a2:	22 e0       	ldi	r18, 0x02	; 2
    10a4:	41 e0       	ldi	r20, 0x01	; 1
    10a6:	62 e0       	ldi	r22, 0x02	; 2
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	0e 94 62 03 	call	0x6c4	; 0x6c4 <can_send_pid_message>
	
}
    10ae:	0f 91       	pop	r16
    10b0:	ef 90       	pop	r14
    10b2:	08 95       	ret

000010b4 <highscore_init>:
#include <stdio.h>

uint8_t highscores[7];

//Save highscores to array
void highscore_init(){
    10b4:	0f 93       	push	r16
    10b6:	1f 93       	push	r17
    10b8:	cf 93       	push	r28
    10ba:	df 93       	push	r29
    10bc:	07 ef       	ldi	r16, 0xF7	; 247
    10be:	12 e0       	ldi	r17, 0x02	; 2
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    10c0:	c0 e0       	ldi	r28, 0x00	; 0
    10c2:	d0 e0       	ldi	r29, 0x00	; 0
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
    10c4:	ce 01       	movw	r24, r28
    10c6:	0e 94 10 04 	call	0x820	; 0x820 <EEPROM_read>
    10ca:	f8 01       	movw	r30, r16
    10cc:	81 93       	st	Z+, r24
    10ce:	8f 01       	movw	r16, r30

uint8_t highscores[7];

//Save highscores to array
void highscore_init(){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    10d0:	21 96       	adiw	r28, 0x01	; 1
    10d2:	c7 30       	cpi	r28, 0x07	; 7
    10d4:	d1 05       	cpc	r29, r1
    10d6:	b1 f7       	brne	.-20     	; 0x10c4 <highscore_init+0x10>
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
	}
}
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	08 95       	ret

000010e2 <highscore_update>:
	
int highscore_update(uint8_t score){
    10e2:	bf 92       	push	r11
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	b8 2e       	mov	r11, r24
    10f6:	e7 ef       	ldi	r30, 0xF7	; 247
    10f8:	f2 e0       	ldi	r31, 0x02	; 2
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    10fa:	c0 e0       	ldi	r28, 0x00	; 0
    10fc:	d0 e0       	ldi	r29, 0x00	; 0
		if(score > highscores[i]){
    10fe:	81 91       	ld	r24, Z+
    1100:	8b 15       	cp	r24, r11
    1102:	10 f5       	brcc	.+68     	; 0x1148 <highscore_update+0x66>
    1104:	8d ef       	ldi	r24, 0xFD	; 253
    1106:	c8 2e       	mov	r12, r24
    1108:	82 e0       	ldi	r24, 0x02	; 2
    110a:	d8 2e       	mov	r13, r24
    110c:	9e ef       	ldi	r25, 0xFE	; 254
    110e:	e9 2e       	mov	r14, r25
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	f9 2e       	mov	r15, r25
    1114:	06 e0       	ldi	r16, 0x06	; 6
    1116:	10 e0       	ldi	r17, 0x00	; 0
			for(int j = NUMBER_OF_HIGHSCORES - 1; j > i - 1; j--){
				highscores[j] = highscores[j - 1];
    1118:	f6 01       	movw	r30, r12
    111a:	62 91       	ld	r22, -Z
    111c:	6f 01       	movw	r12, r30
    111e:	f7 01       	movw	r30, r14
    1120:	62 93       	st	-Z, r22
    1122:	7f 01       	movw	r14, r30
				EEPROM_write(HIGHSCORE_START_ADDR + j, highscores[j]);
    1124:	c8 01       	movw	r24, r16
    1126:	0e 94 08 04 	call	0x810	; 0x810 <EEPROM_write>
    112a:	01 50       	subi	r16, 0x01	; 1
    112c:	11 09       	sbc	r17, r1
}
	
int highscore_update(uint8_t score){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
		if(score > highscores[i]){
			for(int j = NUMBER_OF_HIGHSCORES - 1; j > i - 1; j--){
    112e:	0c 17       	cp	r16, r28
    1130:	1d 07       	cpc	r17, r29
    1132:	94 f7       	brge	.-28     	; 0x1118 <highscore_update+0x36>
				highscores[j] = highscores[j - 1];
				EEPROM_write(HIGHSCORE_START_ADDR + j, highscores[j]);
			}
			highscores[i] = score;
    1134:	fe 01       	movw	r30, r28
    1136:	e9 50       	subi	r30, 0x09	; 9
    1138:	fd 4f       	sbci	r31, 0xFD	; 253
    113a:	b0 82       	st	Z, r11
			EEPROM_write(HIGHSCORE_START_ADDR + i, highscores[i]);
    113c:	6b 2d       	mov	r22, r11
    113e:	ce 01       	movw	r24, r28
    1140:	0e 94 08 04 	call	0x810	; 0x810 <EEPROM_write>
			return i;
    1144:	ce 01       	movw	r24, r28
    1146:	06 c0       	rjmp	.+12     	; 0x1154 <highscore_update+0x72>
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
	}
}
	
int highscore_update(uint8_t score){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    1148:	21 96       	adiw	r28, 0x01	; 1
    114a:	c7 30       	cpi	r28, 0x07	; 7
    114c:	d1 05       	cpc	r29, r1
    114e:	b9 f6       	brne	.-82     	; 0x10fe <highscore_update+0x1c>
			highscores[i] = score;
			EEPROM_write(HIGHSCORE_START_ADDR + i, highscores[i]);
			return i;
		}
	}
	return 0;
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	90 e0       	ldi	r25, 0x00	; 0
}
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	df 90       	pop	r13
    1162:	cf 90       	pop	r12
    1164:	bf 90       	pop	r11
    1166:	08 95       	ret

00001168 <highscore_resetAll>:

void highscore_resetAll(void){
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	07 ef       	ldi	r16, 0xF7	; 247
    1172:	12 e0       	ldi	r17, 0x02	; 2
	for (int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    1174:	c0 e0       	ldi	r28, 0x00	; 0
    1176:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(HIGHSCORE_START_ADDR + i, 0);
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	ce 01       	movw	r24, r28
    117c:	0e 94 08 04 	call	0x810	; 0x810 <EEPROM_write>
		highscores[i] = 0;
    1180:	f8 01       	movw	r30, r16
    1182:	11 92       	st	Z+, r1
    1184:	8f 01       	movw	r16, r30
	}
	return 0;
}

void highscore_resetAll(void){
	for (int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    1186:	21 96       	adiw	r28, 0x01	; 1
    1188:	c7 30       	cpi	r28, 0x07	; 7
    118a:	d1 05       	cpc	r29, r1
    118c:	a9 f7       	brne	.-22     	; 0x1178 <highscore_resetAll+0x10>
		EEPROM_write(HIGHSCORE_START_ADDR + i, 0);
		highscores[i] = 0;
	}
	
}
    118e:	df 91       	pop	r29
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	0f 91       	pop	r16
    1196:	08 95       	ret

00001198 <highscore_print>:

void highscore_print(void){
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
	oled_clear_screen();
    11a4:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_clear_screen>
	oled_set_write_position(0, 0);
    11a8:	60 e0       	ldi	r22, 0x00	; 0
    11aa:	70 e0       	ldi	r23, 0x00	; 0
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_printf("Highscores!", 0);
    11b4:	1f 92       	push	r1
    11b6:	1f 92       	push	r1
    11b8:	8e e0       	ldi	r24, 0x0E	; 14
    11ba:	92 e0       	ldi	r25, 0x02	; 2
    11bc:	9f 93       	push	r25
    11be:	8f 93       	push	r24
    11c0:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>
    11c4:	27 ef       	ldi	r18, 0xF7	; 247
    11c6:	e2 2e       	mov	r14, r18
    11c8:	22 e0       	ldi	r18, 0x02	; 2
    11ca:	f2 2e       	mov	r15, r18
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    11d4:	c0 e0       	ldi	r28, 0x00	; 0
    11d6:	d0 e0       	ldi	r29, 0x00	; 0
		oled_set_write_position(i + 1, 16);
		oled_printf("%d.  %d", i + 1, highscores[i]);
    11d8:	0a e1       	ldi	r16, 0x1A	; 26
    11da:	12 e0       	ldi	r17, 0x02	; 2
void highscore_print(void){
	oled_clear_screen();
	oled_set_write_position(0, 0);
	oled_printf("Highscores!", 0);
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
		oled_set_write_position(i + 1, 16);
    11dc:	21 96       	adiw	r28, 0x01	; 1
    11de:	60 e1       	ldi	r22, 0x10	; 16
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	ce 01       	movw	r24, r28
    11e4:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
		oled_printf("%d.  %d", i + 1, highscores[i]);
    11e8:	f7 01       	movw	r30, r14
    11ea:	81 91       	ld	r24, Z+
    11ec:	7f 01       	movw	r14, r30
    11ee:	1f 92       	push	r1
    11f0:	8f 93       	push	r24
    11f2:	df 93       	push	r29
    11f4:	cf 93       	push	r28
    11f6:	1f 93       	push	r17
    11f8:	0f 93       	push	r16
    11fa:	0e 94 2c 06 	call	0xc58	; 0xc58 <oled_printf>

void highscore_print(void){
	oled_clear_screen();
	oled_set_write_position(0, 0);
	oled_printf("Highscores!", 0);
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	0f 90       	pop	r0
    1208:	0f 90       	pop	r0
    120a:	c7 30       	cpi	r28, 0x07	; 7
    120c:	d1 05       	cpc	r29, r1
    120e:	31 f7       	brne	.-52     	; 0x11dc <highscore_print+0x44>
		oled_set_write_position(i + 1, 16);
		oled_printf("%d.  %d", i + 1, highscores[i]);
	}
	while(joy_get_direction() != LEFT){
    1210:	0e 94 47 05 	call	0xa8e	; 0xa8e <joy_get_direction>
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	29 f0       	breq	.+10     	; 0x1222 <highscore_print+0x8a>
    1218:	e0 e1       	ldi	r30, 0x10	; 16
    121a:	ea 95       	dec	r30
    121c:	f1 f7       	brne	.-4      	; 0x121a <highscore_print+0x82>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <highscore_print+0x88>
    1220:	f7 cf       	rjmp	.-18     	; 0x1210 <highscore_print+0x78>
		_delay_us(10);
	}
	interface_print(interface_get_current_menu());
    1222:	0e 94 4c 0b 	call	0x1698	; 0x1698 <interface_get_current_menu>
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	0f 91       	pop	r16
    122e:	ff 90       	pop	r15
    1230:	ef 90       	pop	r14
		oled_printf("%d.  %d", i + 1, highscores[i]);
	}
	while(joy_get_direction() != LEFT){
		_delay_us(10);
	}
	interface_print(interface_get_current_menu());
    1232:	0c 94 92 09 	jmp	0x1324	; 0x1324 <interface_print>

00001236 <main>:
#include "Interface/interface.h"

int main(void)
{
	
	USART_Init(MYUBRR);
    1236:	8f e1       	ldi	r24, 0x1F	; 31
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <USART_Init>
	fdevopen((int (*)(char,  struct __file *))USART_Transmit, (int (*)(struct __file *))USART_Receive);
    123e:	64 e0       	ldi	r22, 0x04	; 4
    1240:	74 e0       	ldi	r23, 0x04	; 4
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	94 e0       	ldi	r25, 0x04	; 4
    1246:	0e 94 67 0e 	call	0x1cce	; 0x1cce <fdevopen>
	printf("UART setup done\n");
    124a:	82 e2       	ldi	r24, 0x22	; 34
    124c:	92 e0       	ldi	r25, 0x02	; 2
    124e:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <puts>
	SRAM_init();
    1252:	0e 94 17 04 	call	0x82e	; 0x82e <SRAM_init>
	printf("SRAM setup done\n");
    1256:	82 e3       	ldi	r24, 0x32	; 50
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <puts>
	joy_init();
    125e:	0e 94 90 04 	call	0x920	; 0x920 <joy_init>
	printf("joy setup done\n");
    1262:	82 e4       	ldi	r24, 0x42	; 66
    1264:	92 e0       	ldi	r25, 0x02	; 2
    1266:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <puts>
	oled_init();
    126a:	0e 94 d6 05 	call	0xbac	; 0xbac <oled_init>
	can_init();
    126e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	timer_init();
    1272:	0e 94 81 06 	call	0xd02	; 0xd02 <timer_init>
	ir_init();
    1276:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <ir_init>
	highscore_init();
    127a:	0e 94 5a 08 	call	0x10b4	; 0x10b4 <highscore_init>
	game_init(10);
    127e:	8a e0       	ldi	r24, 0x0A	; 10
    1280:	0e 94 0d 07 	call	0xe1a	; 0xe1a <game_init>
	printf("Initialization done\n");
    1284:	81 e5       	ldi	r24, 0x51	; 81
    1286:	92 e0       	ldi	r25, 0x02	; 2
    1288:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <puts>
	interface_init();
    128c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <interface_init>
	highscore_resetAll();
    1290:	0e 94 b4 08 	call	0x1168	; 0x1168 <highscore_resetAll>
    while(1)
        {	
			interface_select();
    1294:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <interface_select>
    1298:	fd cf       	rjmp	.-6      	; 0x1294 <main+0x5e>

0000129a <new_Menu>:
	select_pos = 1;
	current_menu = mainMenu;
	
	interface_print(mainMenu);
}
Menu* new_Menu(char* title, void(*action)(void), uint8_t num_submenus){
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	1f 92       	push	r1
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	8c 01       	movw	r16, r24
    12b2:	7b 01       	movw	r14, r22
	Menu* m = malloc(sizeof(Menu));
    12b4:	89 e0       	ldi	r24, 0x09	; 9
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	49 83       	std	Y+1, r20	; 0x01
    12ba:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <malloc>
    12be:	6c 01       	movw	r12, r24
	
	m->title = title;
    12c0:	fc 01       	movw	r30, r24
    12c2:	16 83       	std	Z+6, r17	; 0x06
    12c4:	05 83       	std	Z+5, r16	; 0x05
	m->num_submenus = num_submenus;
    12c6:	49 81       	ldd	r20, Y+1	; 0x01
    12c8:	40 83       	st	Z, r20
	m->action = action;
    12ca:	f0 86       	std	Z+8, r15	; 0x08
    12cc:	e7 82       	std	Z+7, r14	; 0x07
	m->submenus = malloc(sizeof(Menu)*num_submenus);
    12ce:	f9 e0       	ldi	r31, 0x09	; 9
    12d0:	4f 9f       	mul	r20, r31
    12d2:	c0 01       	movw	r24, r0
    12d4:	11 24       	eor	r1, r1
    12d6:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <malloc>
    12da:	f6 01       	movw	r30, r12
    12dc:	92 83       	std	Z+2, r25	; 0x02
    12de:	81 83       	std	Z+1, r24	; 0x01
	return m;
}
    12e0:	c6 01       	movw	r24, r12
    12e2:	0f 90       	pop	r0
    12e4:	df 91       	pop	r29
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	0f 91       	pop	r16
    12ec:	ff 90       	pop	r15
    12ee:	ef 90       	pop	r14
    12f0:	df 90       	pop	r13
    12f2:	cf 90       	pop	r12
    12f4:	08 95       	ret

000012f6 <interface_draw_selector>:
	}
	
	interface_draw_selector(1);
	
}
void interface_draw_selector(int pos){
    12f6:	cf 93       	push	r28
    12f8:	df 93       	push	r29
    12fa:	ec 01       	movw	r28, r24
	oled_set_start_col(0);
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
	oled_write(' ');
    1304:	80 e2       	ldi	r24, 0x20	; 32
    1306:	0e 94 8f 05 	call	0xb1e	; 0xb1e <oled_write>
	
	oled_set_write_position(pos, 0);
    130a:	60 e0       	ldi	r22, 0x00	; 0
    130c:	70 e0       	ldi	r23, 0x00	; 0
    130e:	ce 01       	movw	r24, r28
    1310:	0e 94 0a 06 	call	0xc14	; 0xc14 <oled_set_write_position>
	oled_write_selector();
    1314:	0e 94 a3 05 	call	0xb46	; 0xb46 <oled_write_selector>
	
	oled_set_start_col(8);
    1318:	88 e0       	ldi	r24, 0x08	; 8
    131a:	90 e0       	ldi	r25, 0x00	; 0
}
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
	oled_write(' ');
	
	oled_set_write_position(pos, 0);
	oled_write_selector();
	
	oled_set_start_col(8);
    1320:	0c 94 ad 05 	jmp	0xb5a	; 0xb5a <oled_set_start_col>

00001324 <interface_print>:
	m->num_submenus = num_submenus;
	m->action = action;
	m->submenus = malloc(sizeof(Menu)*num_submenus);
	return m;
}
void interface_print(Menu *menu){
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	8c 01       	movw	r16, r24
	oled_clear_screen();
    1332:	0e 94 c4 05 	call	0xb88	; 0xb88 <oled_clear_screen>
	oled_set_start_col(0);
    1336:	80 e0       	ldi	r24, 0x00	; 0
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
	oled_write_string(menu->title, 0);
    133e:	60 e0       	ldi	r22, 0x00	; 0
    1340:	70 e0       	ldi	r23, 0x00	; 0
    1342:	d8 01       	movw	r26, r16
    1344:	15 96       	adiw	r26, 0x05	; 5
    1346:	8d 91       	ld	r24, X+
    1348:	9c 91       	ld	r25, X
    134a:	16 97       	sbiw	r26, 0x06	; 6
    134c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <oled_write_string>
	
	for(int i = 0; i < menu->num_submenus; i++){
    1350:	e1 2c       	mov	r14, r1
    1352:	f1 2c       	mov	r15, r1
    1354:	c0 e0       	ldi	r28, 0x00	; 0
    1356:	d0 e0       	ldi	r29, 0x00	; 0
    1358:	f8 01       	movw	r30, r16
    135a:	80 81       	ld	r24, Z
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	c8 17       	cp	r28, r24
    1360:	d9 07       	cpc	r29, r25
    1362:	c4 f4       	brge	.+48     	; 0x1394 <interface_print+0x70>
		oled_set_start_col(10);
    1364:	8a e0       	ldi	r24, 0x0A	; 10
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_set_start_col>
		oled_write_string(menu->submenus[i]->title, i + 1);
    136c:	21 96       	adiw	r28, 0x01	; 1
    136e:	d8 01       	movw	r26, r16
    1370:	11 96       	adiw	r26, 0x01	; 1
    1372:	ed 91       	ld	r30, X+
    1374:	fc 91       	ld	r31, X
    1376:	12 97       	sbiw	r26, 0x02	; 2
    1378:	ee 0d       	add	r30, r14
    137a:	ff 1d       	adc	r31, r15
    137c:	01 90       	ld	r0, Z+
    137e:	f0 81       	ld	r31, Z
    1380:	e0 2d       	mov	r30, r0
    1382:	be 01       	movw	r22, r28
    1384:	85 81       	ldd	r24, Z+5	; 0x05
    1386:	96 81       	ldd	r25, Z+6	; 0x06
    1388:	0e 94 b5 05 	call	0xb6a	; 0xb6a <oled_write_string>
    138c:	b2 e0       	ldi	r27, 0x02	; 2
    138e:	eb 0e       	add	r14, r27
    1390:	f1 1c       	adc	r15, r1
    1392:	e2 cf       	rjmp	.-60     	; 0x1358 <interface_print+0x34>
	}
	
	interface_draw_selector(1);
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
	
}
    1398:	df 91       	pop	r29
    139a:	cf 91       	pop	r28
    139c:	1f 91       	pop	r17
    139e:	0f 91       	pop	r16
    13a0:	ff 90       	pop	r15
    13a2:	ef 90       	pop	r14
	for(int i = 0; i < menu->num_submenus; i++){
		oled_set_start_col(10);
		oled_write_string(menu->submenus[i]->title, i + 1);
	}
	
	interface_draw_selector(1);
    13a4:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <interface_draw_selector>

000013a8 <interface_init>:


int select_pos;
Menu* current_menu;

void interface_init(){
    13a8:	2f 92       	push	r2
    13aa:	3f 92       	push	r3
    13ac:	4f 92       	push	r4
    13ae:	5f 92       	push	r5
    13b0:	6f 92       	push	r6
    13b2:	7f 92       	push	r7
    13b4:	8f 92       	push	r8
    13b6:	9f 92       	push	r9
    13b8:	af 92       	push	r10
    13ba:	bf 92       	push	r11
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	cf 93       	push	r28
    13ca:	df 93       	push	r29
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <interface_init+0x26>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <interface_init+0x28>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
	Menu *mainMenu = new_Menu("Main menu", NULL, 4);
    13d4:	44 e0       	ldi	r20, 0x04	; 4
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	85 e6       	ldi	r24, 0x65	; 101
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    13e2:	9c 83       	std	Y+4, r25	; 0x04
    13e4:	8b 83       	std	Y+3, r24	; 0x03
	
	Menu *menu0 = new_Menu("Play game!", game_main, 0);
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	67 e0       	ldi	r22, 0x07	; 7
    13ea:	78 e0       	ldi	r23, 0x08	; 8
    13ec:	8f e6       	ldi	r24, 0x6F	; 111
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    13f4:	5c 01       	movw	r10, r24
	
	Menu *menu1 = new_Menu("High scores!", highscore_print, 0);
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	6c ec       	ldi	r22, 0xCC	; 204
    13fa:	78 e0       	ldi	r23, 0x08	; 8
    13fc:	8a e7       	ldi	r24, 0x7A	; 122
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1404:	9c 01       	movw	r18, r24
	
	Menu *menu2 = new_Menu("Screen options", NULL, 1);
    1406:	41 e0       	ldi	r20, 0x01	; 1
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	87 e8       	ldi	r24, 0x87	; 135
    140e:	92 e0       	ldi	r25, 0x02	; 2
    1410:	29 83       	std	Y+1, r18	; 0x01
    1412:	3a 83       	std	Y+2, r19	; 0x02
    1414:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1418:	6c 01       	movw	r12, r24
	Menu *menu21 = new_Menu("Brightness", oled_set_brightness, 0);
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	6c e3       	ldi	r22, 0x3C	; 60
    141e:	76 e0       	ldi	r23, 0x06	; 6
    1420:	86 e9       	ldi	r24, 0x96	; 150
    1422:	92 e0       	ldi	r25, 0x02	; 2
    1424:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1428:	3c 01       	movw	r6, r24
	
	Menu *menu3 = new_Menu("Game options", NULL, 2);
    142a:	42 e0       	ldi	r20, 0x02	; 2
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	81 ea       	ldi	r24, 0xA1	; 161
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1438:	7c 01       	movw	r14, r24
	Menu *menu31 = new_Menu("Set difficulty", NULL, 3);
    143a:	43 e0       	ldi	r20, 0x03	; 3
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	8e ea       	ldi	r24, 0xAE	; 174
    1442:	92 e0       	ldi	r25, 0x02	; 2
    1444:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1448:	8c 01       	movw	r16, r24
	Menu *menu32 = new_Menu("Reset Hi-scores", highscore_resetAll, 0);
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	64 eb       	ldi	r22, 0xB4	; 180
    144e:	78 e0       	ldi	r23, 0x08	; 8
    1450:	8d eb       	ldi	r24, 0xBD	; 189
    1452:	92 e0       	ldi	r25, 0x02	; 2
    1454:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1458:	4c 01       	movw	r8, r24
	Menu *menu311 = new_Menu("Medium", game_medium_difficulty, 0);
    145a:	40 e0       	ldi	r20, 0x00	; 0
    145c:	69 e3       	ldi	r22, 0x39	; 57
    145e:	78 e0       	ldi	r23, 0x08	; 8
    1460:	8d ec       	ldi	r24, 0xCD	; 205
    1462:	92 e0       	ldi	r25, 0x02	; 2
    1464:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1468:	2c 01       	movw	r4, r24
	Menu *menu312 = new_Menu("Hard", game_hard_difficulty, 0);
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	69 e2       	ldi	r22, 0x29	; 41
    146e:	78 e0       	ldi	r23, 0x08	; 8
    1470:	84 ed       	ldi	r24, 0xD4	; 212
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
    1478:	1c 01       	movw	r2, r24
	Menu *menu313 = new_Menu("Impossible", game_impossible_difficulty, 0);
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	69 e4       	ldi	r22, 0x49	; 73
    147e:	78 e0       	ldi	r23, 0x08	; 8
    1480:	89 ed       	ldi	r24, 0xD9	; 217
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	0e 94 4d 09 	call	0x129a	; 0x129a <new_Menu>
	
	mainMenu->submenus[0] = menu0, mainMenu->submenus[1] = menu1;
    1488:	ab 81       	ldd	r26, Y+3	; 0x03
    148a:	bc 81       	ldd	r27, Y+4	; 0x04
    148c:	11 96       	adiw	r26, 0x01	; 1
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	12 97       	sbiw	r26, 0x02	; 2
    1494:	b1 82       	std	Z+1, r11	; 0x01
    1496:	a0 82       	st	Z, r10
    1498:	11 96       	adiw	r26, 0x01	; 1
    149a:	ed 91       	ld	r30, X+
    149c:	fc 91       	ld	r31, X
    149e:	12 97       	sbiw	r26, 0x02	; 2
    14a0:	29 81       	ldd	r18, Y+1	; 0x01
    14a2:	3a 81       	ldd	r19, Y+2	; 0x02
    14a4:	33 83       	std	Z+3, r19	; 0x03
    14a6:	22 83       	std	Z+2, r18	; 0x02
	mainMenu->submenus[2] = menu2, mainMenu->submenus[3] = menu3;
    14a8:	11 96       	adiw	r26, 0x01	; 1
    14aa:	ed 91       	ld	r30, X+
    14ac:	fc 91       	ld	r31, X
    14ae:	12 97       	sbiw	r26, 0x02	; 2
    14b0:	d5 82       	std	Z+5, r13	; 0x05
    14b2:	c4 82       	std	Z+4, r12	; 0x04
    14b4:	11 96       	adiw	r26, 0x01	; 1
    14b6:	ed 91       	ld	r30, X+
    14b8:	fc 91       	ld	r31, X
    14ba:	12 97       	sbiw	r26, 0x02	; 2
    14bc:	f7 82       	std	Z+7, r15	; 0x07
    14be:	e6 82       	std	Z+6, r14	; 0x06
	mainMenu->prev = NULL;
    14c0:	14 96       	adiw	r26, 0x04	; 4
    14c2:	1c 92       	st	X, r1
    14c4:	1e 92       	st	-X, r1
    14c6:	13 97       	sbiw	r26, 0x03	; 3
	
	menu0->submenus = NULL, menu0->prev = NULL;
    14c8:	f5 01       	movw	r30, r10
    14ca:	12 82       	std	Z+2, r1	; 0x02
    14cc:	11 82       	std	Z+1, r1	; 0x01
    14ce:	14 82       	std	Z+4, r1	; 0x04
    14d0:	13 82       	std	Z+3, r1	; 0x03
	
	menu2->submenus[0] = menu21;
    14d2:	d6 01       	movw	r26, r12
    14d4:	11 96       	adiw	r26, 0x01	; 1
    14d6:	ed 91       	ld	r30, X+
    14d8:	fc 91       	ld	r31, X
    14da:	12 97       	sbiw	r26, 0x02	; 2
    14dc:	71 82       	std	Z+1, r7	; 0x01
    14de:	60 82       	st	Z, r6
	menu2->prev = mainMenu;
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	14 96       	adiw	r26, 0x04	; 4
    14e6:	3c 93       	st	X, r19
    14e8:	2e 93       	st	-X, r18
    14ea:	13 97       	sbiw	r26, 0x03	; 3
	menu21->submenus = NULL;
    14ec:	d3 01       	movw	r26, r6
    14ee:	12 96       	adiw	r26, 0x02	; 2
    14f0:	1c 92       	st	X, r1
    14f2:	1e 92       	st	-X, r1
    14f4:	11 97       	sbiw	r26, 0x01	; 1
	
	//Set difficulty
	menu3->prev = mainMenu;
    14f6:	f7 01       	movw	r30, r14
    14f8:	34 83       	std	Z+4, r19	; 0x04
    14fa:	23 83       	std	Z+3, r18	; 0x03
	menu3->submenus[0] = menu31, menu3->submenus[1] = menu32;
    14fc:	01 80       	ldd	r0, Z+1	; 0x01
    14fe:	f2 81       	ldd	r31, Z+2	; 0x02
    1500:	e0 2d       	mov	r30, r0
    1502:	11 83       	std	Z+1, r17	; 0x01
    1504:	00 83       	st	Z, r16
    1506:	d7 01       	movw	r26, r14
    1508:	11 96       	adiw	r26, 0x01	; 1
    150a:	ed 91       	ld	r30, X+
    150c:	fc 91       	ld	r31, X
    150e:	12 97       	sbiw	r26, 0x02	; 2
    1510:	93 82       	std	Z+3, r9	; 0x03
    1512:	82 82       	std	Z+2, r8	; 0x02
	menu31->submenus[0] = menu311, menu31->submenus[1] = menu312, menu31->submenus[2] = menu313;
    1514:	d8 01       	movw	r26, r16
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	ed 91       	ld	r30, X+
    151a:	fc 91       	ld	r31, X
    151c:	12 97       	sbiw	r26, 0x02	; 2
    151e:	51 82       	std	Z+1, r5	; 0x01
    1520:	40 82       	st	Z, r4
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	ed 91       	ld	r30, X+
    1526:	fc 91       	ld	r31, X
    1528:	12 97       	sbiw	r26, 0x02	; 2
    152a:	33 82       	std	Z+3, r3	; 0x03
    152c:	22 82       	std	Z+2, r2	; 0x02
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	ed 91       	ld	r30, X+
    1532:	fc 91       	ld	r31, X
    1534:	12 97       	sbiw	r26, 0x02	; 2
    1536:	95 83       	std	Z+5, r25	; 0x05
    1538:	84 83       	std	Z+4, r24	; 0x04
	menu31->prev = mainMenu;
    153a:	14 96       	adiw	r26, 0x04	; 4
    153c:	3c 93       	st	X, r19
    153e:	2e 93       	st	-X, r18
    1540:	13 97       	sbiw	r26, 0x03	; 3
	menu32->submenus=NULL;
    1542:	f4 01       	movw	r30, r8
    1544:	12 82       	std	Z+2, r1	; 0x02
    1546:	11 82       	std	Z+1, r1	; 0x01
	menu311->submenus = NULL, menu312->submenus = NULL, menu313->submenus = NULL;
    1548:	d2 01       	movw	r26, r4
    154a:	12 96       	adiw	r26, 0x02	; 2
    154c:	1c 92       	st	X, r1
    154e:	1e 92       	st	-X, r1
    1550:	11 97       	sbiw	r26, 0x01	; 1
    1552:	f1 01       	movw	r30, r2
    1554:	12 82       	std	Z+2, r1	; 0x02
    1556:	11 82       	std	Z+1, r1	; 0x01
    1558:	dc 01       	movw	r26, r24
    155a:	12 96       	adiw	r26, 0x02	; 2
    155c:	1c 92       	st	X, r1
    155e:	1e 92       	st	-X, r1
    1560:	11 97       	sbiw	r26, 0x01	; 1
	
	select_pos = 1;
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	90 93 ff 02 	sts	0x02FF, r25
    156a:	80 93 fe 02 	sts	0x02FE, r24
	current_menu = mainMenu;
    156e:	30 93 01 03 	sts	0x0301, r19
    1572:	20 93 00 03 	sts	0x0300, r18
	
	interface_print(mainMenu);
    1576:	c9 01       	movw	r24, r18
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	9f 90       	pop	r9
    1596:	8f 90       	pop	r8
    1598:	7f 90       	pop	r7
    159a:	6f 90       	pop	r6
    159c:	5f 90       	pop	r5
    159e:	4f 90       	pop	r4
    15a0:	3f 90       	pop	r3
    15a2:	2f 90       	pop	r2
	menu311->submenus = NULL, menu312->submenus = NULL, menu313->submenus = NULL;
	
	select_pos = 1;
	current_menu = mainMenu;
	
	interface_print(mainMenu);
    15a4:	0c 94 92 09 	jmp	0x1324	; 0x1324 <interface_print>

000015a8 <interface_select>:
	oled_set_write_position(pos, 0);
	oled_write_selector();
	
	oled_set_start_col(8);
}
void interface_select(){
    15a8:	cf 93       	push	r28
	direction previous_direction = NEUTRAL;
    15aa:	c0 e0       	ldi	r28, 0x00	; 0
		
	while(joy_get_direction() != NEUTRAL){
    15ac:	0e 94 47 05 	call	0xa8e	; 0xa8e <joy_get_direction>
    15b0:	88 23       	and	r24, r24
    15b2:	21 f0       	breq	.+8      	; 0x15bc <interface_select+0x14>
		previous_direction = joy_get_direction();
    15b4:	0e 94 47 05 	call	0xa8e	; 0xa8e <joy_get_direction>
    15b8:	c8 2f       	mov	r28, r24
    15ba:	f8 cf       	rjmp	.-16     	; 0x15ac <interface_select+0x4>
	} //Wait for joy to reach neutral position.
	
	switch(previous_direction){
    15bc:	c2 30       	cpi	r28, 0x02	; 2
    15be:	a1 f0       	breq	.+40     	; 0x15e8 <interface_select+0x40>
    15c0:	18 f4       	brcc	.+6      	; 0x15c8 <interface_select+0x20>
    15c2:	c1 30       	cpi	r28, 0x01	; 1
    15c4:	39 f0       	breq	.+14     	; 0x15d4 <interface_select+0x2c>
    15c6:	66 c0       	rjmp	.+204    	; 0x1694 <interface_select+0xec>
    15c8:	c3 30       	cpi	r28, 0x03	; 3
    15ca:	09 f4       	brne	.+2      	; 0x15ce <interface_select+0x26>
    15cc:	4e c0       	rjmp	.+156    	; 0x166a <interface_select+0xc2>
    15ce:	c4 30       	cpi	r28, 0x04	; 4
    15d0:	09 f1       	breq	.+66     	; 0x1614 <interface_select+0x6c>
    15d2:	60 c0       	rjmp	.+192    	; 0x1694 <interface_select+0xec>
		case UP:
			//Move selector up if it's not on line 0.
			if(select_pos != 1){
    15d4:	80 91 fe 02 	lds	r24, 0x02FE
    15d8:	90 91 ff 02 	lds	r25, 0x02FF
    15dc:	81 30       	cpi	r24, 0x01	; 1
    15de:	91 05       	cpc	r25, r1
    15e0:	09 f4       	brne	.+2      	; 0x15e4 <interface_select+0x3c>
    15e2:	58 c0       	rjmp	.+176    	; 0x1694 <interface_select+0xec>
				select_pos--;
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <interface_select+0x5e>
			}
			break;
			
		case DOWN:
			//Move selector down if it's not on line 7.
			if(current_menu->num_submenus != select_pos){
    15e8:	80 91 fe 02 	lds	r24, 0x02FE
    15ec:	90 91 ff 02 	lds	r25, 0x02FF
    15f0:	e0 91 00 03 	lds	r30, 0x0300
    15f4:	f0 91 01 03 	lds	r31, 0x0301
    15f8:	20 81       	ld	r18, Z
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	28 17       	cp	r18, r24
    15fe:	39 07       	cpc	r19, r25
    1600:	09 f4       	brne	.+2      	; 0x1604 <interface_select+0x5c>
    1602:	48 c0       	rjmp	.+144    	; 0x1694 <interface_select+0xec>
				(select_pos)++;
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	90 93 ff 02 	sts	0x02FF, r25
    160a:	80 93 fe 02 	sts	0x02FE, r24
			break;
		case NEUTRAL:
			break;
		
	}
}
    160e:	cf 91       	pop	r28
			
		case DOWN:
			//Move selector down if it's not on line 7.
			if(current_menu->num_submenus != select_pos){
				(select_pos)++;
				interface_draw_selector(select_pos);
    1610:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <interface_draw_selector>
			}
			break;
			
		case RIGHT:
			//Check for Menu pointer and go to nex Menu.
			if(current_menu->submenus[select_pos-1]->num_submenus){
    1614:	e0 91 00 03 	lds	r30, 0x0300
    1618:	f0 91 01 03 	lds	r31, 0x0301
    161c:	80 91 fe 02 	lds	r24, 0x02FE
    1620:	90 91 ff 02 	lds	r25, 0x02FF
    1624:	81 50       	subi	r24, 0x01	; 1
    1626:	90 48       	sbci	r25, 0x80	; 128
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	01 80       	ldd	r0, Z+1	; 0x01
    162e:	f2 81       	ldd	r31, Z+2	; 0x02
    1630:	e0 2d       	mov	r30, r0
    1632:	e8 0f       	add	r30, r24
    1634:	f9 1f       	adc	r31, r25
    1636:	80 81       	ld	r24, Z
    1638:	91 81       	ldd	r25, Z+1	; 0x01
    163a:	dc 01       	movw	r26, r24
    163c:	2c 91       	ld	r18, X
    163e:	22 23       	and	r18, r18
    1640:	69 f0       	breq	.+26     	; 0x165c <interface_select+0xb4>
				current_menu = current_menu->submenus[select_pos-1];
    1642:	90 93 01 03 	sts	0x0301, r25
    1646:	80 93 00 03 	sts	0x0300, r24
				interface_print(current_menu);
    164a:	0e 94 92 09 	call	0x1324	; 0x1324 <interface_print>
				select_pos = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	90 93 ff 02 	sts	0x02FF, r25
    1656:	80 93 fe 02 	sts	0x02FE, r24
    165a:	1c c0       	rjmp	.+56     	; 0x1694 <interface_select+0xec>
				
			}
			//Found function pointer.
			else{
				current_menu->submenus[select_pos-1]->action();
    165c:	dc 01       	movw	r26, r24
    165e:	17 96       	adiw	r26, 0x07	; 7
    1660:	ed 91       	ld	r30, X+
    1662:	fc 91       	ld	r31, X
    1664:	18 97       	sbiw	r26, 0x08	; 8
			break;
		case NEUTRAL:
			break;
		
	}
}
    1666:	cf 91       	pop	r28
				select_pos = 1;
				
			}
			//Found function pointer.
			else{
				current_menu->submenus[select_pos-1]->action();
    1668:	09 94       	ijmp
			
			break;
			
		case LEFT:
			//Go to previous menu.
			if(current_menu->prev){
    166a:	e0 91 00 03 	lds	r30, 0x0300
    166e:	f0 91 01 03 	lds	r31, 0x0301
    1672:	83 81       	ldd	r24, Z+3	; 0x03
    1674:	94 81       	ldd	r25, Z+4	; 0x04
    1676:	00 97       	sbiw	r24, 0x00	; 0
    1678:	69 f0       	breq	.+26     	; 0x1694 <interface_select+0xec>
				select_pos = 1;
    167a:	21 e0       	ldi	r18, 0x01	; 1
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	30 93 ff 02 	sts	0x02FF, r19
    1682:	20 93 fe 02 	sts	0x02FE, r18
				current_menu = current_menu->prev;
    1686:	90 93 01 03 	sts	0x0301, r25
    168a:	80 93 00 03 	sts	0x0300, r24
			break;
		case NEUTRAL:
			break;
		
	}
}
    168e:	cf 91       	pop	r28
		case LEFT:
			//Go to previous menu.
			if(current_menu->prev){
				select_pos = 1;
				current_menu = current_menu->prev;
				interface_print(current_menu);
    1690:	0c 94 92 09 	jmp	0x1324	; 0x1324 <interface_print>
			break;
		case NEUTRAL:
			break;
		
	}
}
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <interface_get_current_menu>:
Menu* interface_get_current_menu(){
	return current_menu;
    1698:	80 91 00 03 	lds	r24, 0x0300
    169c:	90 91 01 03 	lds	r25, 0x0301
    16a0:	08 95       	ret

000016a2 <__subsf3>:
    16a2:	50 58       	subi	r21, 0x80	; 128

000016a4 <__addsf3>:
    16a4:	bb 27       	eor	r27, r27
    16a6:	aa 27       	eor	r26, r26
    16a8:	0e d0       	rcall	.+28     	; 0x16c6 <__addsf3x>
    16aa:	4d c1       	rjmp	.+666    	; 0x1946 <__fp_round>
    16ac:	3e d1       	rcall	.+636    	; 0x192a <__fp_pscA>
    16ae:	30 f0       	brcs	.+12     	; 0x16bc <__addsf3+0x18>
    16b0:	43 d1       	rcall	.+646    	; 0x1938 <__fp_pscB>
    16b2:	20 f0       	brcs	.+8      	; 0x16bc <__addsf3+0x18>
    16b4:	31 f4       	brne	.+12     	; 0x16c2 <__addsf3+0x1e>
    16b6:	9f 3f       	cpi	r25, 0xFF	; 255
    16b8:	11 f4       	brne	.+4      	; 0x16be <__addsf3+0x1a>
    16ba:	1e f4       	brtc	.+6      	; 0x16c2 <__addsf3+0x1e>
    16bc:	33 c1       	rjmp	.+614    	; 0x1924 <__fp_nan>
    16be:	0e f4       	brtc	.+2      	; 0x16c2 <__addsf3+0x1e>
    16c0:	e0 95       	com	r30
    16c2:	e7 fb       	bst	r30, 7
    16c4:	29 c1       	rjmp	.+594    	; 0x1918 <__fp_inf>

000016c6 <__addsf3x>:
    16c6:	e9 2f       	mov	r30, r25
    16c8:	4f d1       	rcall	.+670    	; 0x1968 <__fp_split3>
    16ca:	80 f3       	brcs	.-32     	; 0x16ac <__addsf3+0x8>
    16cc:	ba 17       	cp	r27, r26
    16ce:	62 07       	cpc	r22, r18
    16d0:	73 07       	cpc	r23, r19
    16d2:	84 07       	cpc	r24, r20
    16d4:	95 07       	cpc	r25, r21
    16d6:	18 f0       	brcs	.+6      	; 0x16de <__addsf3x+0x18>
    16d8:	71 f4       	brne	.+28     	; 0x16f6 <__addsf3x+0x30>
    16da:	9e f5       	brtc	.+102    	; 0x1742 <__addsf3x+0x7c>
    16dc:	67 c1       	rjmp	.+718    	; 0x19ac <__fp_zero>
    16de:	0e f4       	brtc	.+2      	; 0x16e2 <__addsf3x+0x1c>
    16e0:	e0 95       	com	r30
    16e2:	0b 2e       	mov	r0, r27
    16e4:	ba 2f       	mov	r27, r26
    16e6:	a0 2d       	mov	r26, r0
    16e8:	0b 01       	movw	r0, r22
    16ea:	b9 01       	movw	r22, r18
    16ec:	90 01       	movw	r18, r0
    16ee:	0c 01       	movw	r0, r24
    16f0:	ca 01       	movw	r24, r20
    16f2:	a0 01       	movw	r20, r0
    16f4:	11 24       	eor	r1, r1
    16f6:	ff 27       	eor	r31, r31
    16f8:	59 1b       	sub	r21, r25
    16fa:	99 f0       	breq	.+38     	; 0x1722 <__addsf3x+0x5c>
    16fc:	59 3f       	cpi	r21, 0xF9	; 249
    16fe:	50 f4       	brcc	.+20     	; 0x1714 <__addsf3x+0x4e>
    1700:	50 3e       	cpi	r21, 0xE0	; 224
    1702:	68 f1       	brcs	.+90     	; 0x175e <__addsf3x+0x98>
    1704:	1a 16       	cp	r1, r26
    1706:	f0 40       	sbci	r31, 0x00	; 0
    1708:	a2 2f       	mov	r26, r18
    170a:	23 2f       	mov	r18, r19
    170c:	34 2f       	mov	r19, r20
    170e:	44 27       	eor	r20, r20
    1710:	58 5f       	subi	r21, 0xF8	; 248
    1712:	f3 cf       	rjmp	.-26     	; 0x16fa <__addsf3x+0x34>
    1714:	46 95       	lsr	r20
    1716:	37 95       	ror	r19
    1718:	27 95       	ror	r18
    171a:	a7 95       	ror	r26
    171c:	f0 40       	sbci	r31, 0x00	; 0
    171e:	53 95       	inc	r21
    1720:	c9 f7       	brne	.-14     	; 0x1714 <__addsf3x+0x4e>
    1722:	7e f4       	brtc	.+30     	; 0x1742 <__addsf3x+0x7c>
    1724:	1f 16       	cp	r1, r31
    1726:	ba 0b       	sbc	r27, r26
    1728:	62 0b       	sbc	r22, r18
    172a:	73 0b       	sbc	r23, r19
    172c:	84 0b       	sbc	r24, r20
    172e:	ba f0       	brmi	.+46     	; 0x175e <__addsf3x+0x98>
    1730:	91 50       	subi	r25, 0x01	; 1
    1732:	a1 f0       	breq	.+40     	; 0x175c <__addsf3x+0x96>
    1734:	ff 0f       	add	r31, r31
    1736:	bb 1f       	adc	r27, r27
    1738:	66 1f       	adc	r22, r22
    173a:	77 1f       	adc	r23, r23
    173c:	88 1f       	adc	r24, r24
    173e:	c2 f7       	brpl	.-16     	; 0x1730 <__addsf3x+0x6a>
    1740:	0e c0       	rjmp	.+28     	; 0x175e <__addsf3x+0x98>
    1742:	ba 0f       	add	r27, r26
    1744:	62 1f       	adc	r22, r18
    1746:	73 1f       	adc	r23, r19
    1748:	84 1f       	adc	r24, r20
    174a:	48 f4       	brcc	.+18     	; 0x175e <__addsf3x+0x98>
    174c:	87 95       	ror	r24
    174e:	77 95       	ror	r23
    1750:	67 95       	ror	r22
    1752:	b7 95       	ror	r27
    1754:	f7 95       	ror	r31
    1756:	9e 3f       	cpi	r25, 0xFE	; 254
    1758:	08 f0       	brcs	.+2      	; 0x175c <__addsf3x+0x96>
    175a:	b3 cf       	rjmp	.-154    	; 0x16c2 <__addsf3+0x1e>
    175c:	93 95       	inc	r25
    175e:	88 0f       	add	r24, r24
    1760:	08 f0       	brcs	.+2      	; 0x1764 <__addsf3x+0x9e>
    1762:	99 27       	eor	r25, r25
    1764:	ee 0f       	add	r30, r30
    1766:	97 95       	ror	r25
    1768:	87 95       	ror	r24
    176a:	08 95       	ret

0000176c <__divsf3>:
    176c:	0c d0       	rcall	.+24     	; 0x1786 <__divsf3x>
    176e:	eb c0       	rjmp	.+470    	; 0x1946 <__fp_round>
    1770:	e3 d0       	rcall	.+454    	; 0x1938 <__fp_pscB>
    1772:	40 f0       	brcs	.+16     	; 0x1784 <__divsf3+0x18>
    1774:	da d0       	rcall	.+436    	; 0x192a <__fp_pscA>
    1776:	30 f0       	brcs	.+12     	; 0x1784 <__divsf3+0x18>
    1778:	21 f4       	brne	.+8      	; 0x1782 <__divsf3+0x16>
    177a:	5f 3f       	cpi	r21, 0xFF	; 255
    177c:	19 f0       	breq	.+6      	; 0x1784 <__divsf3+0x18>
    177e:	cc c0       	rjmp	.+408    	; 0x1918 <__fp_inf>
    1780:	51 11       	cpse	r21, r1
    1782:	15 c1       	rjmp	.+554    	; 0x19ae <__fp_szero>
    1784:	cf c0       	rjmp	.+414    	; 0x1924 <__fp_nan>

00001786 <__divsf3x>:
    1786:	f0 d0       	rcall	.+480    	; 0x1968 <__fp_split3>
    1788:	98 f3       	brcs	.-26     	; 0x1770 <__divsf3+0x4>

0000178a <__divsf3_pse>:
    178a:	99 23       	and	r25, r25
    178c:	c9 f3       	breq	.-14     	; 0x1780 <__divsf3+0x14>
    178e:	55 23       	and	r21, r21
    1790:	b1 f3       	breq	.-20     	; 0x177e <__divsf3+0x12>
    1792:	95 1b       	sub	r25, r21
    1794:	55 0b       	sbc	r21, r21
    1796:	bb 27       	eor	r27, r27
    1798:	aa 27       	eor	r26, r26
    179a:	62 17       	cp	r22, r18
    179c:	73 07       	cpc	r23, r19
    179e:	84 07       	cpc	r24, r20
    17a0:	38 f0       	brcs	.+14     	; 0x17b0 <__divsf3_pse+0x26>
    17a2:	9f 5f       	subi	r25, 0xFF	; 255
    17a4:	5f 4f       	sbci	r21, 0xFF	; 255
    17a6:	22 0f       	add	r18, r18
    17a8:	33 1f       	adc	r19, r19
    17aa:	44 1f       	adc	r20, r20
    17ac:	aa 1f       	adc	r26, r26
    17ae:	a9 f3       	breq	.-22     	; 0x179a <__divsf3_pse+0x10>
    17b0:	33 d0       	rcall	.+102    	; 0x1818 <__divsf3_pse+0x8e>
    17b2:	0e 2e       	mov	r0, r30
    17b4:	3a f0       	brmi	.+14     	; 0x17c4 <__divsf3_pse+0x3a>
    17b6:	e0 e8       	ldi	r30, 0x80	; 128
    17b8:	30 d0       	rcall	.+96     	; 0x181a <__divsf3_pse+0x90>
    17ba:	91 50       	subi	r25, 0x01	; 1
    17bc:	50 40       	sbci	r21, 0x00	; 0
    17be:	e6 95       	lsr	r30
    17c0:	00 1c       	adc	r0, r0
    17c2:	ca f7       	brpl	.-14     	; 0x17b6 <__divsf3_pse+0x2c>
    17c4:	29 d0       	rcall	.+82     	; 0x1818 <__divsf3_pse+0x8e>
    17c6:	fe 2f       	mov	r31, r30
    17c8:	27 d0       	rcall	.+78     	; 0x1818 <__divsf3_pse+0x8e>
    17ca:	66 0f       	add	r22, r22
    17cc:	77 1f       	adc	r23, r23
    17ce:	88 1f       	adc	r24, r24
    17d0:	bb 1f       	adc	r27, r27
    17d2:	26 17       	cp	r18, r22
    17d4:	37 07       	cpc	r19, r23
    17d6:	48 07       	cpc	r20, r24
    17d8:	ab 07       	cpc	r26, r27
    17da:	b0 e8       	ldi	r27, 0x80	; 128
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <__divsf3_pse+0x56>
    17de:	bb 0b       	sbc	r27, r27
    17e0:	80 2d       	mov	r24, r0
    17e2:	bf 01       	movw	r22, r30
    17e4:	ff 27       	eor	r31, r31
    17e6:	93 58       	subi	r25, 0x83	; 131
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	2a f0       	brmi	.+10     	; 0x17f6 <__divsf3_pse+0x6c>
    17ec:	9e 3f       	cpi	r25, 0xFE	; 254
    17ee:	51 05       	cpc	r21, r1
    17f0:	68 f0       	brcs	.+26     	; 0x180c <__divsf3_pse+0x82>
    17f2:	92 c0       	rjmp	.+292    	; 0x1918 <__fp_inf>
    17f4:	dc c0       	rjmp	.+440    	; 0x19ae <__fp_szero>
    17f6:	5f 3f       	cpi	r21, 0xFF	; 255
    17f8:	ec f3       	brlt	.-6      	; 0x17f4 <__divsf3_pse+0x6a>
    17fa:	98 3e       	cpi	r25, 0xE8	; 232
    17fc:	dc f3       	brlt	.-10     	; 0x17f4 <__divsf3_pse+0x6a>
    17fe:	86 95       	lsr	r24
    1800:	77 95       	ror	r23
    1802:	67 95       	ror	r22
    1804:	b7 95       	ror	r27
    1806:	f7 95       	ror	r31
    1808:	9f 5f       	subi	r25, 0xFF	; 255
    180a:	c9 f7       	brne	.-14     	; 0x17fe <__divsf3_pse+0x74>
    180c:	88 0f       	add	r24, r24
    180e:	91 1d       	adc	r25, r1
    1810:	96 95       	lsr	r25
    1812:	87 95       	ror	r24
    1814:	97 f9       	bld	r25, 7
    1816:	08 95       	ret
    1818:	e1 e0       	ldi	r30, 0x01	; 1
    181a:	66 0f       	add	r22, r22
    181c:	77 1f       	adc	r23, r23
    181e:	88 1f       	adc	r24, r24
    1820:	bb 1f       	adc	r27, r27
    1822:	62 17       	cp	r22, r18
    1824:	73 07       	cpc	r23, r19
    1826:	84 07       	cpc	r24, r20
    1828:	ba 07       	cpc	r27, r26
    182a:	20 f0       	brcs	.+8      	; 0x1834 <__divsf3_pse+0xaa>
    182c:	62 1b       	sub	r22, r18
    182e:	73 0b       	sbc	r23, r19
    1830:	84 0b       	sbc	r24, r20
    1832:	ba 0b       	sbc	r27, r26
    1834:	ee 1f       	adc	r30, r30
    1836:	88 f7       	brcc	.-30     	; 0x181a <__divsf3_pse+0x90>
    1838:	e0 95       	com	r30
    183a:	08 95       	ret

0000183c <__fixsfsi>:
    183c:	04 d0       	rcall	.+8      	; 0x1846 <__fixunssfsi>
    183e:	68 94       	set
    1840:	b1 11       	cpse	r27, r1
    1842:	b5 c0       	rjmp	.+362    	; 0x19ae <__fp_szero>
    1844:	08 95       	ret

00001846 <__fixunssfsi>:
    1846:	98 d0       	rcall	.+304    	; 0x1978 <__fp_splitA>
    1848:	88 f0       	brcs	.+34     	; 0x186c <__fixunssfsi+0x26>
    184a:	9f 57       	subi	r25, 0x7F	; 127
    184c:	90 f0       	brcs	.+36     	; 0x1872 <__fixunssfsi+0x2c>
    184e:	b9 2f       	mov	r27, r25
    1850:	99 27       	eor	r25, r25
    1852:	b7 51       	subi	r27, 0x17	; 23
    1854:	a0 f0       	brcs	.+40     	; 0x187e <__fixunssfsi+0x38>
    1856:	d1 f0       	breq	.+52     	; 0x188c <__fixunssfsi+0x46>
    1858:	66 0f       	add	r22, r22
    185a:	77 1f       	adc	r23, r23
    185c:	88 1f       	adc	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	1a f0       	brmi	.+6      	; 0x1868 <__fixunssfsi+0x22>
    1862:	ba 95       	dec	r27
    1864:	c9 f7       	brne	.-14     	; 0x1858 <__fixunssfsi+0x12>
    1866:	12 c0       	rjmp	.+36     	; 0x188c <__fixunssfsi+0x46>
    1868:	b1 30       	cpi	r27, 0x01	; 1
    186a:	81 f0       	breq	.+32     	; 0x188c <__fixunssfsi+0x46>
    186c:	9f d0       	rcall	.+318    	; 0x19ac <__fp_zero>
    186e:	b1 e0       	ldi	r27, 0x01	; 1
    1870:	08 95       	ret
    1872:	9c c0       	rjmp	.+312    	; 0x19ac <__fp_zero>
    1874:	67 2f       	mov	r22, r23
    1876:	78 2f       	mov	r23, r24
    1878:	88 27       	eor	r24, r24
    187a:	b8 5f       	subi	r27, 0xF8	; 248
    187c:	39 f0       	breq	.+14     	; 0x188c <__fixunssfsi+0x46>
    187e:	b9 3f       	cpi	r27, 0xF9	; 249
    1880:	cc f3       	brlt	.-14     	; 0x1874 <__fixunssfsi+0x2e>
    1882:	86 95       	lsr	r24
    1884:	77 95       	ror	r23
    1886:	67 95       	ror	r22
    1888:	b3 95       	inc	r27
    188a:	d9 f7       	brne	.-10     	; 0x1882 <__fixunssfsi+0x3c>
    188c:	3e f4       	brtc	.+14     	; 0x189c <__fixunssfsi+0x56>
    188e:	90 95       	com	r25
    1890:	80 95       	com	r24
    1892:	70 95       	com	r23
    1894:	61 95       	neg	r22
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	8f 4f       	sbci	r24, 0xFF	; 255
    189a:	9f 4f       	sbci	r25, 0xFF	; 255
    189c:	08 95       	ret

0000189e <__floatunsisf>:
    189e:	e8 94       	clt
    18a0:	09 c0       	rjmp	.+18     	; 0x18b4 <__floatsisf+0x12>

000018a2 <__floatsisf>:
    18a2:	97 fb       	bst	r25, 7
    18a4:	3e f4       	brtc	.+14     	; 0x18b4 <__floatsisf+0x12>
    18a6:	90 95       	com	r25
    18a8:	80 95       	com	r24
    18aa:	70 95       	com	r23
    18ac:	61 95       	neg	r22
    18ae:	7f 4f       	sbci	r23, 0xFF	; 255
    18b0:	8f 4f       	sbci	r24, 0xFF	; 255
    18b2:	9f 4f       	sbci	r25, 0xFF	; 255
    18b4:	99 23       	and	r25, r25
    18b6:	a9 f0       	breq	.+42     	; 0x18e2 <__floatsisf+0x40>
    18b8:	f9 2f       	mov	r31, r25
    18ba:	96 e9       	ldi	r25, 0x96	; 150
    18bc:	bb 27       	eor	r27, r27
    18be:	93 95       	inc	r25
    18c0:	f6 95       	lsr	r31
    18c2:	87 95       	ror	r24
    18c4:	77 95       	ror	r23
    18c6:	67 95       	ror	r22
    18c8:	b7 95       	ror	r27
    18ca:	f1 11       	cpse	r31, r1
    18cc:	f8 cf       	rjmp	.-16     	; 0x18be <__floatsisf+0x1c>
    18ce:	fa f4       	brpl	.+62     	; 0x190e <__floatsisf+0x6c>
    18d0:	bb 0f       	add	r27, r27
    18d2:	11 f4       	brne	.+4      	; 0x18d8 <__floatsisf+0x36>
    18d4:	60 ff       	sbrs	r22, 0
    18d6:	1b c0       	rjmp	.+54     	; 0x190e <__floatsisf+0x6c>
    18d8:	6f 5f       	subi	r22, 0xFF	; 255
    18da:	7f 4f       	sbci	r23, 0xFF	; 255
    18dc:	8f 4f       	sbci	r24, 0xFF	; 255
    18de:	9f 4f       	sbci	r25, 0xFF	; 255
    18e0:	16 c0       	rjmp	.+44     	; 0x190e <__floatsisf+0x6c>
    18e2:	88 23       	and	r24, r24
    18e4:	11 f0       	breq	.+4      	; 0x18ea <__floatsisf+0x48>
    18e6:	96 e9       	ldi	r25, 0x96	; 150
    18e8:	11 c0       	rjmp	.+34     	; 0x190c <__floatsisf+0x6a>
    18ea:	77 23       	and	r23, r23
    18ec:	21 f0       	breq	.+8      	; 0x18f6 <__floatsisf+0x54>
    18ee:	9e e8       	ldi	r25, 0x8E	; 142
    18f0:	87 2f       	mov	r24, r23
    18f2:	76 2f       	mov	r23, r22
    18f4:	05 c0       	rjmp	.+10     	; 0x1900 <__floatsisf+0x5e>
    18f6:	66 23       	and	r22, r22
    18f8:	71 f0       	breq	.+28     	; 0x1916 <__floatsisf+0x74>
    18fa:	96 e8       	ldi	r25, 0x86	; 134
    18fc:	86 2f       	mov	r24, r22
    18fe:	70 e0       	ldi	r23, 0x00	; 0
    1900:	60 e0       	ldi	r22, 0x00	; 0
    1902:	2a f0       	brmi	.+10     	; 0x190e <__floatsisf+0x6c>
    1904:	9a 95       	dec	r25
    1906:	66 0f       	add	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	88 1f       	adc	r24, r24
    190c:	da f7       	brpl	.-10     	; 0x1904 <__floatsisf+0x62>
    190e:	88 0f       	add	r24, r24
    1910:	96 95       	lsr	r25
    1912:	87 95       	ror	r24
    1914:	97 f9       	bld	r25, 7
    1916:	08 95       	ret

00001918 <__fp_inf>:
    1918:	97 f9       	bld	r25, 7
    191a:	9f 67       	ori	r25, 0x7F	; 127
    191c:	80 e8       	ldi	r24, 0x80	; 128
    191e:	70 e0       	ldi	r23, 0x00	; 0
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	08 95       	ret

00001924 <__fp_nan>:
    1924:	9f ef       	ldi	r25, 0xFF	; 255
    1926:	80 ec       	ldi	r24, 0xC0	; 192
    1928:	08 95       	ret

0000192a <__fp_pscA>:
    192a:	00 24       	eor	r0, r0
    192c:	0a 94       	dec	r0
    192e:	16 16       	cp	r1, r22
    1930:	17 06       	cpc	r1, r23
    1932:	18 06       	cpc	r1, r24
    1934:	09 06       	cpc	r0, r25
    1936:	08 95       	ret

00001938 <__fp_pscB>:
    1938:	00 24       	eor	r0, r0
    193a:	0a 94       	dec	r0
    193c:	12 16       	cp	r1, r18
    193e:	13 06       	cpc	r1, r19
    1940:	14 06       	cpc	r1, r20
    1942:	05 06       	cpc	r0, r21
    1944:	08 95       	ret

00001946 <__fp_round>:
    1946:	09 2e       	mov	r0, r25
    1948:	03 94       	inc	r0
    194a:	00 0c       	add	r0, r0
    194c:	11 f4       	brne	.+4      	; 0x1952 <__fp_round+0xc>
    194e:	88 23       	and	r24, r24
    1950:	52 f0       	brmi	.+20     	; 0x1966 <__fp_round+0x20>
    1952:	bb 0f       	add	r27, r27
    1954:	40 f4       	brcc	.+16     	; 0x1966 <__fp_round+0x20>
    1956:	bf 2b       	or	r27, r31
    1958:	11 f4       	brne	.+4      	; 0x195e <__fp_round+0x18>
    195a:	60 ff       	sbrs	r22, 0
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <__fp_round+0x20>
    195e:	6f 5f       	subi	r22, 0xFF	; 255
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	08 95       	ret

00001968 <__fp_split3>:
    1968:	57 fd       	sbrc	r21, 7
    196a:	90 58       	subi	r25, 0x80	; 128
    196c:	44 0f       	add	r20, r20
    196e:	55 1f       	adc	r21, r21
    1970:	59 f0       	breq	.+22     	; 0x1988 <__fp_splitA+0x10>
    1972:	5f 3f       	cpi	r21, 0xFF	; 255
    1974:	71 f0       	breq	.+28     	; 0x1992 <__fp_splitA+0x1a>
    1976:	47 95       	ror	r20

00001978 <__fp_splitA>:
    1978:	88 0f       	add	r24, r24
    197a:	97 fb       	bst	r25, 7
    197c:	99 1f       	adc	r25, r25
    197e:	61 f0       	breq	.+24     	; 0x1998 <__fp_splitA+0x20>
    1980:	9f 3f       	cpi	r25, 0xFF	; 255
    1982:	79 f0       	breq	.+30     	; 0x19a2 <__fp_splitA+0x2a>
    1984:	87 95       	ror	r24
    1986:	08 95       	ret
    1988:	12 16       	cp	r1, r18
    198a:	13 06       	cpc	r1, r19
    198c:	14 06       	cpc	r1, r20
    198e:	55 1f       	adc	r21, r21
    1990:	f2 cf       	rjmp	.-28     	; 0x1976 <__fp_split3+0xe>
    1992:	46 95       	lsr	r20
    1994:	f1 df       	rcall	.-30     	; 0x1978 <__fp_splitA>
    1996:	08 c0       	rjmp	.+16     	; 0x19a8 <__fp_splitA+0x30>
    1998:	16 16       	cp	r1, r22
    199a:	17 06       	cpc	r1, r23
    199c:	18 06       	cpc	r1, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	f1 cf       	rjmp	.-30     	; 0x1984 <__fp_splitA+0xc>
    19a2:	86 95       	lsr	r24
    19a4:	71 05       	cpc	r23, r1
    19a6:	61 05       	cpc	r22, r1
    19a8:	08 94       	sec
    19aa:	08 95       	ret

000019ac <__fp_zero>:
    19ac:	e8 94       	clt

000019ae <__fp_szero>:
    19ae:	bb 27       	eor	r27, r27
    19b0:	66 27       	eor	r22, r22
    19b2:	77 27       	eor	r23, r23
    19b4:	cb 01       	movw	r24, r22
    19b6:	97 f9       	bld	r25, 7
    19b8:	08 95       	ret

000019ba <__mulsf3>:
    19ba:	0b d0       	rcall	.+22     	; 0x19d2 <__mulsf3x>
    19bc:	c4 cf       	rjmp	.-120    	; 0x1946 <__fp_round>
    19be:	b5 df       	rcall	.-150    	; 0x192a <__fp_pscA>
    19c0:	28 f0       	brcs	.+10     	; 0x19cc <__mulsf3+0x12>
    19c2:	ba df       	rcall	.-140    	; 0x1938 <__fp_pscB>
    19c4:	18 f0       	brcs	.+6      	; 0x19cc <__mulsf3+0x12>
    19c6:	95 23       	and	r25, r21
    19c8:	09 f0       	breq	.+2      	; 0x19cc <__mulsf3+0x12>
    19ca:	a6 cf       	rjmp	.-180    	; 0x1918 <__fp_inf>
    19cc:	ab cf       	rjmp	.-170    	; 0x1924 <__fp_nan>
    19ce:	11 24       	eor	r1, r1
    19d0:	ee cf       	rjmp	.-36     	; 0x19ae <__fp_szero>

000019d2 <__mulsf3x>:
    19d2:	ca df       	rcall	.-108    	; 0x1968 <__fp_split3>
    19d4:	a0 f3       	brcs	.-24     	; 0x19be <__mulsf3+0x4>

000019d6 <__mulsf3_pse>:
    19d6:	95 9f       	mul	r25, r21
    19d8:	d1 f3       	breq	.-12     	; 0x19ce <__mulsf3+0x14>
    19da:	95 0f       	add	r25, r21
    19dc:	50 e0       	ldi	r21, 0x00	; 0
    19de:	55 1f       	adc	r21, r21
    19e0:	62 9f       	mul	r22, r18
    19e2:	f0 01       	movw	r30, r0
    19e4:	72 9f       	mul	r23, r18
    19e6:	bb 27       	eor	r27, r27
    19e8:	f0 0d       	add	r31, r0
    19ea:	b1 1d       	adc	r27, r1
    19ec:	63 9f       	mul	r22, r19
    19ee:	aa 27       	eor	r26, r26
    19f0:	f0 0d       	add	r31, r0
    19f2:	b1 1d       	adc	r27, r1
    19f4:	aa 1f       	adc	r26, r26
    19f6:	64 9f       	mul	r22, r20
    19f8:	66 27       	eor	r22, r22
    19fa:	b0 0d       	add	r27, r0
    19fc:	a1 1d       	adc	r26, r1
    19fe:	66 1f       	adc	r22, r22
    1a00:	82 9f       	mul	r24, r18
    1a02:	22 27       	eor	r18, r18
    1a04:	b0 0d       	add	r27, r0
    1a06:	a1 1d       	adc	r26, r1
    1a08:	62 1f       	adc	r22, r18
    1a0a:	73 9f       	mul	r23, r19
    1a0c:	b0 0d       	add	r27, r0
    1a0e:	a1 1d       	adc	r26, r1
    1a10:	62 1f       	adc	r22, r18
    1a12:	83 9f       	mul	r24, r19
    1a14:	a0 0d       	add	r26, r0
    1a16:	61 1d       	adc	r22, r1
    1a18:	22 1f       	adc	r18, r18
    1a1a:	74 9f       	mul	r23, r20
    1a1c:	33 27       	eor	r19, r19
    1a1e:	a0 0d       	add	r26, r0
    1a20:	61 1d       	adc	r22, r1
    1a22:	23 1f       	adc	r18, r19
    1a24:	84 9f       	mul	r24, r20
    1a26:	60 0d       	add	r22, r0
    1a28:	21 1d       	adc	r18, r1
    1a2a:	82 2f       	mov	r24, r18
    1a2c:	76 2f       	mov	r23, r22
    1a2e:	6a 2f       	mov	r22, r26
    1a30:	11 24       	eor	r1, r1
    1a32:	9f 57       	subi	r25, 0x7F	; 127
    1a34:	50 40       	sbci	r21, 0x00	; 0
    1a36:	8a f0       	brmi	.+34     	; 0x1a5a <__mulsf3_pse+0x84>
    1a38:	e1 f0       	breq	.+56     	; 0x1a72 <__mulsf3_pse+0x9c>
    1a3a:	88 23       	and	r24, r24
    1a3c:	4a f0       	brmi	.+18     	; 0x1a50 <__mulsf3_pse+0x7a>
    1a3e:	ee 0f       	add	r30, r30
    1a40:	ff 1f       	adc	r31, r31
    1a42:	bb 1f       	adc	r27, r27
    1a44:	66 1f       	adc	r22, r22
    1a46:	77 1f       	adc	r23, r23
    1a48:	88 1f       	adc	r24, r24
    1a4a:	91 50       	subi	r25, 0x01	; 1
    1a4c:	50 40       	sbci	r21, 0x00	; 0
    1a4e:	a9 f7       	brne	.-22     	; 0x1a3a <__mulsf3_pse+0x64>
    1a50:	9e 3f       	cpi	r25, 0xFE	; 254
    1a52:	51 05       	cpc	r21, r1
    1a54:	70 f0       	brcs	.+28     	; 0x1a72 <__mulsf3_pse+0x9c>
    1a56:	60 cf       	rjmp	.-320    	; 0x1918 <__fp_inf>
    1a58:	aa cf       	rjmp	.-172    	; 0x19ae <__fp_szero>
    1a5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a5c:	ec f3       	brlt	.-6      	; 0x1a58 <__mulsf3_pse+0x82>
    1a5e:	98 3e       	cpi	r25, 0xE8	; 232
    1a60:	dc f3       	brlt	.-10     	; 0x1a58 <__mulsf3_pse+0x82>
    1a62:	86 95       	lsr	r24
    1a64:	77 95       	ror	r23
    1a66:	67 95       	ror	r22
    1a68:	b7 95       	ror	r27
    1a6a:	f7 95       	ror	r31
    1a6c:	e7 95       	ror	r30
    1a6e:	9f 5f       	subi	r25, 0xFF	; 255
    1a70:	c1 f7       	brne	.-16     	; 0x1a62 <__mulsf3_pse+0x8c>
    1a72:	fe 2b       	or	r31, r30
    1a74:	88 0f       	add	r24, r24
    1a76:	91 1d       	adc	r25, r1
    1a78:	96 95       	lsr	r25
    1a7a:	87 95       	ror	r24
    1a7c:	97 f9       	bld	r25, 7
    1a7e:	08 95       	ret

00001a80 <malloc>:
    1a80:	cf 93       	push	r28
    1a82:	df 93       	push	r29
    1a84:	82 30       	cpi	r24, 0x02	; 2
    1a86:	91 05       	cpc	r25, r1
    1a88:	10 f4       	brcc	.+4      	; 0x1a8e <malloc+0xe>
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	e0 91 04 03 	lds	r30, 0x0304
    1a92:	f0 91 05 03 	lds	r31, 0x0305
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	a0 e0       	ldi	r26, 0x00	; 0
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	30 97       	sbiw	r30, 0x00	; 0
    1aa0:	39 f1       	breq	.+78     	; 0x1af0 <malloc+0x70>
    1aa2:	40 81       	ld	r20, Z
    1aa4:	51 81       	ldd	r21, Z+1	; 0x01
    1aa6:	48 17       	cp	r20, r24
    1aa8:	59 07       	cpc	r21, r25
    1aaa:	b8 f0       	brcs	.+46     	; 0x1ada <malloc+0x5a>
    1aac:	48 17       	cp	r20, r24
    1aae:	59 07       	cpc	r21, r25
    1ab0:	71 f4       	brne	.+28     	; 0x1ace <malloc+0x4e>
    1ab2:	82 81       	ldd	r24, Z+2	; 0x02
    1ab4:	93 81       	ldd	r25, Z+3	; 0x03
    1ab6:	10 97       	sbiw	r26, 0x00	; 0
    1ab8:	29 f0       	breq	.+10     	; 0x1ac4 <malloc+0x44>
    1aba:	13 96       	adiw	r26, 0x03	; 3
    1abc:	9c 93       	st	X, r25
    1abe:	8e 93       	st	-X, r24
    1ac0:	12 97       	sbiw	r26, 0x02	; 2
    1ac2:	2c c0       	rjmp	.+88     	; 0x1b1c <malloc+0x9c>
    1ac4:	90 93 05 03 	sts	0x0305, r25
    1ac8:	80 93 04 03 	sts	0x0304, r24
    1acc:	27 c0       	rjmp	.+78     	; 0x1b1c <malloc+0x9c>
    1ace:	21 15       	cp	r18, r1
    1ad0:	31 05       	cpc	r19, r1
    1ad2:	31 f0       	breq	.+12     	; 0x1ae0 <malloc+0x60>
    1ad4:	42 17       	cp	r20, r18
    1ad6:	53 07       	cpc	r21, r19
    1ad8:	18 f0       	brcs	.+6      	; 0x1ae0 <malloc+0x60>
    1ada:	a9 01       	movw	r20, r18
    1adc:	db 01       	movw	r26, r22
    1ade:	01 c0       	rjmp	.+2      	; 0x1ae2 <malloc+0x62>
    1ae0:	ef 01       	movw	r28, r30
    1ae2:	9a 01       	movw	r18, r20
    1ae4:	bd 01       	movw	r22, r26
    1ae6:	df 01       	movw	r26, r30
    1ae8:	02 80       	ldd	r0, Z+2	; 0x02
    1aea:	f3 81       	ldd	r31, Z+3	; 0x03
    1aec:	e0 2d       	mov	r30, r0
    1aee:	d7 cf       	rjmp	.-82     	; 0x1a9e <malloc+0x1e>
    1af0:	21 15       	cp	r18, r1
    1af2:	31 05       	cpc	r19, r1
    1af4:	f9 f0       	breq	.+62     	; 0x1b34 <malloc+0xb4>
    1af6:	28 1b       	sub	r18, r24
    1af8:	39 0b       	sbc	r19, r25
    1afa:	24 30       	cpi	r18, 0x04	; 4
    1afc:	31 05       	cpc	r19, r1
    1afe:	80 f4       	brcc	.+32     	; 0x1b20 <malloc+0xa0>
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	61 15       	cp	r22, r1
    1b06:	71 05       	cpc	r23, r1
    1b08:	21 f0       	breq	.+8      	; 0x1b12 <malloc+0x92>
    1b0a:	fb 01       	movw	r30, r22
    1b0c:	93 83       	std	Z+3, r25	; 0x03
    1b0e:	82 83       	std	Z+2, r24	; 0x02
    1b10:	04 c0       	rjmp	.+8      	; 0x1b1a <malloc+0x9a>
    1b12:	90 93 05 03 	sts	0x0305, r25
    1b16:	80 93 04 03 	sts	0x0304, r24
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	32 96       	adiw	r30, 0x02	; 2
    1b1e:	44 c0       	rjmp	.+136    	; 0x1ba8 <malloc+0x128>
    1b20:	fe 01       	movw	r30, r28
    1b22:	e2 0f       	add	r30, r18
    1b24:	f3 1f       	adc	r31, r19
    1b26:	81 93       	st	Z+, r24
    1b28:	91 93       	st	Z+, r25
    1b2a:	22 50       	subi	r18, 0x02	; 2
    1b2c:	31 09       	sbc	r19, r1
    1b2e:	39 83       	std	Y+1, r19	; 0x01
    1b30:	28 83       	st	Y, r18
    1b32:	3a c0       	rjmp	.+116    	; 0x1ba8 <malloc+0x128>
    1b34:	20 91 02 03 	lds	r18, 0x0302
    1b38:	30 91 03 03 	lds	r19, 0x0303
    1b3c:	23 2b       	or	r18, r19
    1b3e:	41 f4       	brne	.+16     	; 0x1b50 <malloc+0xd0>
    1b40:	20 91 02 01 	lds	r18, 0x0102
    1b44:	30 91 03 01 	lds	r19, 0x0103
    1b48:	30 93 03 03 	sts	0x0303, r19
    1b4c:	20 93 02 03 	sts	0x0302, r18
    1b50:	20 91 00 01 	lds	r18, 0x0100
    1b54:	30 91 01 01 	lds	r19, 0x0101
    1b58:	21 15       	cp	r18, r1
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	41 f4       	brne	.+16     	; 0x1b6e <malloc+0xee>
    1b5e:	2d b7       	in	r18, 0x3d	; 61
    1b60:	3e b7       	in	r19, 0x3e	; 62
    1b62:	40 91 04 01 	lds	r20, 0x0104
    1b66:	50 91 05 01 	lds	r21, 0x0105
    1b6a:	24 1b       	sub	r18, r20
    1b6c:	35 0b       	sbc	r19, r21
    1b6e:	e0 91 02 03 	lds	r30, 0x0302
    1b72:	f0 91 03 03 	lds	r31, 0x0303
    1b76:	e2 17       	cp	r30, r18
    1b78:	f3 07       	cpc	r31, r19
    1b7a:	a0 f4       	brcc	.+40     	; 0x1ba4 <malloc+0x124>
    1b7c:	2e 1b       	sub	r18, r30
    1b7e:	3f 0b       	sbc	r19, r31
    1b80:	28 17       	cp	r18, r24
    1b82:	39 07       	cpc	r19, r25
    1b84:	78 f0       	brcs	.+30     	; 0x1ba4 <malloc+0x124>
    1b86:	ac 01       	movw	r20, r24
    1b88:	4e 5f       	subi	r20, 0xFE	; 254
    1b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8c:	24 17       	cp	r18, r20
    1b8e:	35 07       	cpc	r19, r21
    1b90:	48 f0       	brcs	.+18     	; 0x1ba4 <malloc+0x124>
    1b92:	4e 0f       	add	r20, r30
    1b94:	5f 1f       	adc	r21, r31
    1b96:	50 93 03 03 	sts	0x0303, r21
    1b9a:	40 93 02 03 	sts	0x0302, r20
    1b9e:	81 93       	st	Z+, r24
    1ba0:	91 93       	st	Z+, r25
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <malloc+0x128>
    1ba4:	e0 e0       	ldi	r30, 0x00	; 0
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	cf 01       	movw	r24, r30
    1baa:	df 91       	pop	r29
    1bac:	cf 91       	pop	r28
    1bae:	08 95       	ret

00001bb0 <free>:
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <free+0xa>
    1bb8:	87 c0       	rjmp	.+270    	; 0x1cc8 <free+0x118>
    1bba:	fc 01       	movw	r30, r24
    1bbc:	32 97       	sbiw	r30, 0x02	; 2
    1bbe:	13 82       	std	Z+3, r1	; 0x03
    1bc0:	12 82       	std	Z+2, r1	; 0x02
    1bc2:	c0 91 04 03 	lds	r28, 0x0304
    1bc6:	d0 91 05 03 	lds	r29, 0x0305
    1bca:	20 97       	sbiw	r28, 0x00	; 0
    1bcc:	81 f4       	brne	.+32     	; 0x1bee <free+0x3e>
    1bce:	20 81       	ld	r18, Z
    1bd0:	31 81       	ldd	r19, Z+1	; 0x01
    1bd2:	28 0f       	add	r18, r24
    1bd4:	39 1f       	adc	r19, r25
    1bd6:	80 91 02 03 	lds	r24, 0x0302
    1bda:	90 91 03 03 	lds	r25, 0x0303
    1bde:	82 17       	cp	r24, r18
    1be0:	93 07       	cpc	r25, r19
    1be2:	79 f5       	brne	.+94     	; 0x1c42 <free+0x92>
    1be4:	f0 93 03 03 	sts	0x0303, r31
    1be8:	e0 93 02 03 	sts	0x0302, r30
    1bec:	6d c0       	rjmp	.+218    	; 0x1cc8 <free+0x118>
    1bee:	de 01       	movw	r26, r28
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	ae 17       	cp	r26, r30
    1bf6:	bf 07       	cpc	r27, r31
    1bf8:	50 f4       	brcc	.+20     	; 0x1c0e <free+0x5e>
    1bfa:	12 96       	adiw	r26, 0x02	; 2
    1bfc:	4d 91       	ld	r20, X+
    1bfe:	5c 91       	ld	r21, X
    1c00:	13 97       	sbiw	r26, 0x03	; 3
    1c02:	9d 01       	movw	r18, r26
    1c04:	41 15       	cp	r20, r1
    1c06:	51 05       	cpc	r21, r1
    1c08:	09 f1       	breq	.+66     	; 0x1c4c <free+0x9c>
    1c0a:	da 01       	movw	r26, r20
    1c0c:	f3 cf       	rjmp	.-26     	; 0x1bf4 <free+0x44>
    1c0e:	b3 83       	std	Z+3, r27	; 0x03
    1c10:	a2 83       	std	Z+2, r26	; 0x02
    1c12:	40 81       	ld	r20, Z
    1c14:	51 81       	ldd	r21, Z+1	; 0x01
    1c16:	84 0f       	add	r24, r20
    1c18:	95 1f       	adc	r25, r21
    1c1a:	8a 17       	cp	r24, r26
    1c1c:	9b 07       	cpc	r25, r27
    1c1e:	71 f4       	brne	.+28     	; 0x1c3c <free+0x8c>
    1c20:	8d 91       	ld	r24, X+
    1c22:	9c 91       	ld	r25, X
    1c24:	11 97       	sbiw	r26, 0x01	; 1
    1c26:	84 0f       	add	r24, r20
    1c28:	95 1f       	adc	r25, r21
    1c2a:	02 96       	adiw	r24, 0x02	; 2
    1c2c:	91 83       	std	Z+1, r25	; 0x01
    1c2e:	80 83       	st	Z, r24
    1c30:	12 96       	adiw	r26, 0x02	; 2
    1c32:	8d 91       	ld	r24, X+
    1c34:	9c 91       	ld	r25, X
    1c36:	13 97       	sbiw	r26, 0x03	; 3
    1c38:	93 83       	std	Z+3, r25	; 0x03
    1c3a:	82 83       	std	Z+2, r24	; 0x02
    1c3c:	21 15       	cp	r18, r1
    1c3e:	31 05       	cpc	r19, r1
    1c40:	29 f4       	brne	.+10     	; 0x1c4c <free+0x9c>
    1c42:	f0 93 05 03 	sts	0x0305, r31
    1c46:	e0 93 04 03 	sts	0x0304, r30
    1c4a:	3e c0       	rjmp	.+124    	; 0x1cc8 <free+0x118>
    1c4c:	d9 01       	movw	r26, r18
    1c4e:	13 96       	adiw	r26, 0x03	; 3
    1c50:	fc 93       	st	X, r31
    1c52:	ee 93       	st	-X, r30
    1c54:	12 97       	sbiw	r26, 0x02	; 2
    1c56:	4d 91       	ld	r20, X+
    1c58:	5d 91       	ld	r21, X+
    1c5a:	a4 0f       	add	r26, r20
    1c5c:	b5 1f       	adc	r27, r21
    1c5e:	ea 17       	cp	r30, r26
    1c60:	fb 07       	cpc	r31, r27
    1c62:	79 f4       	brne	.+30     	; 0x1c82 <free+0xd2>
    1c64:	80 81       	ld	r24, Z
    1c66:	91 81       	ldd	r25, Z+1	; 0x01
    1c68:	84 0f       	add	r24, r20
    1c6a:	95 1f       	adc	r25, r21
    1c6c:	02 96       	adiw	r24, 0x02	; 2
    1c6e:	d9 01       	movw	r26, r18
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	13 96       	adiw	r26, 0x03	; 3
    1c7c:	9c 93       	st	X, r25
    1c7e:	8e 93       	st	-X, r24
    1c80:	12 97       	sbiw	r26, 0x02	; 2
    1c82:	e0 e0       	ldi	r30, 0x00	; 0
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	8a 81       	ldd	r24, Y+2	; 0x02
    1c88:	9b 81       	ldd	r25, Y+3	; 0x03
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	19 f0       	breq	.+6      	; 0x1c94 <free+0xe4>
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ec 01       	movw	r28, r24
    1c92:	f9 cf       	rjmp	.-14     	; 0x1c86 <free+0xd6>
    1c94:	ce 01       	movw	r24, r28
    1c96:	02 96       	adiw	r24, 0x02	; 2
    1c98:	28 81       	ld	r18, Y
    1c9a:	39 81       	ldd	r19, Y+1	; 0x01
    1c9c:	82 0f       	add	r24, r18
    1c9e:	93 1f       	adc	r25, r19
    1ca0:	20 91 02 03 	lds	r18, 0x0302
    1ca4:	30 91 03 03 	lds	r19, 0x0303
    1ca8:	28 17       	cp	r18, r24
    1caa:	39 07       	cpc	r19, r25
    1cac:	69 f4       	brne	.+26     	; 0x1cc8 <free+0x118>
    1cae:	30 97       	sbiw	r30, 0x00	; 0
    1cb0:	29 f4       	brne	.+10     	; 0x1cbc <free+0x10c>
    1cb2:	10 92 05 03 	sts	0x0305, r1
    1cb6:	10 92 04 03 	sts	0x0304, r1
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <free+0x110>
    1cbc:	13 82       	std	Z+3, r1	; 0x03
    1cbe:	12 82       	std	Z+2, r1	; 0x02
    1cc0:	d0 93 03 03 	sts	0x0303, r29
    1cc4:	c0 93 02 03 	sts	0x0302, r28
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	08 95       	ret

00001cce <fdevopen>:
    1cce:	0f 93       	push	r16
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	8b 01       	movw	r16, r22
    1cda:	00 97       	sbiw	r24, 0x00	; 0
    1cdc:	31 f4       	brne	.+12     	; 0x1cea <fdevopen+0x1c>
    1cde:	61 15       	cp	r22, r1
    1ce0:	71 05       	cpc	r23, r1
    1ce2:	19 f4       	brne	.+6      	; 0x1cea <fdevopen+0x1c>
    1ce4:	80 e0       	ldi	r24, 0x00	; 0
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	38 c0       	rjmp	.+112    	; 0x1d5a <fdevopen+0x8c>
    1cea:	6e e0       	ldi	r22, 0x0E	; 14
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 c5 10 	call	0x218a	; 0x218a <calloc>
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	a1 f3       	breq	.-24     	; 0x1ce4 <fdevopen+0x16>
    1cfc:	80 e8       	ldi	r24, 0x80	; 128
    1cfe:	83 83       	std	Z+3, r24	; 0x03
    1d00:	01 15       	cp	r16, r1
    1d02:	11 05       	cpc	r17, r1
    1d04:	71 f0       	breq	.+28     	; 0x1d22 <fdevopen+0x54>
    1d06:	13 87       	std	Z+11, r17	; 0x0b
    1d08:	02 87       	std	Z+10, r16	; 0x0a
    1d0a:	81 e8       	ldi	r24, 0x81	; 129
    1d0c:	83 83       	std	Z+3, r24	; 0x03
    1d0e:	80 91 06 03 	lds	r24, 0x0306
    1d12:	90 91 07 03 	lds	r25, 0x0307
    1d16:	89 2b       	or	r24, r25
    1d18:	21 f4       	brne	.+8      	; 0x1d22 <fdevopen+0x54>
    1d1a:	f0 93 07 03 	sts	0x0307, r31
    1d1e:	e0 93 06 03 	sts	0x0306, r30
    1d22:	20 97       	sbiw	r28, 0x00	; 0
    1d24:	c9 f0       	breq	.+50     	; 0x1d58 <fdevopen+0x8a>
    1d26:	d1 87       	std	Z+9, r29	; 0x09
    1d28:	c0 87       	std	Z+8, r28	; 0x08
    1d2a:	83 81       	ldd	r24, Z+3	; 0x03
    1d2c:	82 60       	ori	r24, 0x02	; 2
    1d2e:	83 83       	std	Z+3, r24	; 0x03
    1d30:	80 91 08 03 	lds	r24, 0x0308
    1d34:	90 91 09 03 	lds	r25, 0x0309
    1d38:	89 2b       	or	r24, r25
    1d3a:	71 f4       	brne	.+28     	; 0x1d58 <fdevopen+0x8a>
    1d3c:	f0 93 09 03 	sts	0x0309, r31
    1d40:	e0 93 08 03 	sts	0x0308, r30
    1d44:	80 91 0a 03 	lds	r24, 0x030A
    1d48:	90 91 0b 03 	lds	r25, 0x030B
    1d4c:	89 2b       	or	r24, r25
    1d4e:	21 f4       	brne	.+8      	; 0x1d58 <fdevopen+0x8a>
    1d50:	f0 93 0b 03 	sts	0x030B, r31
    1d54:	e0 93 0a 03 	sts	0x030A, r30
    1d58:	cf 01       	movw	r24, r30
    1d5a:	df 91       	pop	r29
    1d5c:	cf 91       	pop	r28
    1d5e:	1f 91       	pop	r17
    1d60:	0f 91       	pop	r16
    1d62:	08 95       	ret

00001d64 <printf>:
    1d64:	a0 e0       	ldi	r26, 0x00	; 0
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 eb       	ldi	r30, 0xB8	; 184
    1d6a:	fe e0       	ldi	r31, 0x0E	; 14
    1d6c:	0c 94 9e 11 	jmp	0x233c	; 0x233c <__prologue_saves__+0x20>
    1d70:	fe 01       	movw	r30, r28
    1d72:	35 96       	adiw	r30, 0x05	; 5
    1d74:	61 91       	ld	r22, Z+
    1d76:	71 91       	ld	r23, Z+
    1d78:	af 01       	movw	r20, r30
    1d7a:	80 91 08 03 	lds	r24, 0x0308
    1d7e:	90 91 09 03 	lds	r25, 0x0309
    1d82:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <vfprintf>
    1d86:	e2 e0       	ldi	r30, 0x02	; 2
    1d88:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <__epilogue_restores__+0x20>

00001d8c <puts>:
    1d8c:	0f 93       	push	r16
    1d8e:	1f 93       	push	r17
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	e0 91 08 03 	lds	r30, 0x0308
    1d98:	f0 91 09 03 	lds	r31, 0x0309
    1d9c:	23 81       	ldd	r18, Z+3	; 0x03
    1d9e:	21 ff       	sbrs	r18, 1
    1da0:	1b c0       	rjmp	.+54     	; 0x1dd8 <puts+0x4c>
    1da2:	ec 01       	movw	r28, r24
    1da4:	00 e0       	ldi	r16, 0x00	; 0
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	89 91       	ld	r24, Y+
    1daa:	60 91 08 03 	lds	r22, 0x0308
    1dae:	70 91 09 03 	lds	r23, 0x0309
    1db2:	db 01       	movw	r26, r22
    1db4:	18 96       	adiw	r26, 0x08	; 8
    1db6:	ed 91       	ld	r30, X+
    1db8:	fc 91       	ld	r31, X
    1dba:	19 97       	sbiw	r26, 0x09	; 9
    1dbc:	88 23       	and	r24, r24
    1dbe:	31 f0       	breq	.+12     	; 0x1dcc <puts+0x40>
    1dc0:	09 95       	icall
    1dc2:	89 2b       	or	r24, r25
    1dc4:	89 f3       	breq	.-30     	; 0x1da8 <puts+0x1c>
    1dc6:	0f ef       	ldi	r16, 0xFF	; 255
    1dc8:	1f ef       	ldi	r17, 0xFF	; 255
    1dca:	ee cf       	rjmp	.-36     	; 0x1da8 <puts+0x1c>
    1dcc:	8a e0       	ldi	r24, 0x0A	; 10
    1dce:	09 95       	icall
    1dd0:	89 2b       	or	r24, r25
    1dd2:	11 f4       	brne	.+4      	; 0x1dd8 <puts+0x4c>
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <puts+0x50>
    1dd8:	8f ef       	ldi	r24, 0xFF	; 255
    1dda:	9f ef       	ldi	r25, 0xFF	; 255
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	08 95       	ret

00001de6 <vfprintf>:
    1de6:	ac e0       	ldi	r26, 0x0C	; 12
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e9 ef       	ldi	r30, 0xF9	; 249
    1dec:	fe e0       	ldi	r31, 0x0E	; 14
    1dee:	0c 94 8e 11 	jmp	0x231c	; 0x231c <__prologue_saves__>
    1df2:	7c 01       	movw	r14, r24
    1df4:	6b 01       	movw	r12, r22
    1df6:	8a 01       	movw	r16, r20
    1df8:	fc 01       	movw	r30, r24
    1dfa:	17 82       	std	Z+7, r1	; 0x07
    1dfc:	16 82       	std	Z+6, r1	; 0x06
    1dfe:	83 81       	ldd	r24, Z+3	; 0x03
    1e00:	81 ff       	sbrs	r24, 1
    1e02:	bd c1       	rjmp	.+890    	; 0x217e <vfprintf+0x398>
    1e04:	ce 01       	movw	r24, r28
    1e06:	01 96       	adiw	r24, 0x01	; 1
    1e08:	4c 01       	movw	r8, r24
    1e0a:	f7 01       	movw	r30, r14
    1e0c:	93 81       	ldd	r25, Z+3	; 0x03
    1e0e:	f6 01       	movw	r30, r12
    1e10:	93 fd       	sbrc	r25, 3
    1e12:	85 91       	lpm	r24, Z+
    1e14:	93 ff       	sbrs	r25, 3
    1e16:	81 91       	ld	r24, Z+
    1e18:	6f 01       	movw	r12, r30
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <vfprintf+0x3a>
    1e1e:	ab c1       	rjmp	.+854    	; 0x2176 <vfprintf+0x390>
    1e20:	85 32       	cpi	r24, 0x25	; 37
    1e22:	39 f4       	brne	.+14     	; 0x1e32 <vfprintf+0x4c>
    1e24:	93 fd       	sbrc	r25, 3
    1e26:	85 91       	lpm	r24, Z+
    1e28:	93 ff       	sbrs	r25, 3
    1e2a:	81 91       	ld	r24, Z+
    1e2c:	6f 01       	movw	r12, r30
    1e2e:	85 32       	cpi	r24, 0x25	; 37
    1e30:	29 f4       	brne	.+10     	; 0x1e3c <vfprintf+0x56>
    1e32:	b7 01       	movw	r22, r14
    1e34:	90 e0       	ldi	r25, 0x00	; 0
    1e36:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    1e3a:	e7 cf       	rjmp	.-50     	; 0x1e0a <vfprintf+0x24>
    1e3c:	51 2c       	mov	r5, r1
    1e3e:	31 2c       	mov	r3, r1
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	20 32       	cpi	r18, 0x20	; 32
    1e44:	a0 f4       	brcc	.+40     	; 0x1e6e <vfprintf+0x88>
    1e46:	8b 32       	cpi	r24, 0x2B	; 43
    1e48:	69 f0       	breq	.+26     	; 0x1e64 <vfprintf+0x7e>
    1e4a:	30 f4       	brcc	.+12     	; 0x1e58 <vfprintf+0x72>
    1e4c:	80 32       	cpi	r24, 0x20	; 32
    1e4e:	59 f0       	breq	.+22     	; 0x1e66 <vfprintf+0x80>
    1e50:	83 32       	cpi	r24, 0x23	; 35
    1e52:	69 f4       	brne	.+26     	; 0x1e6e <vfprintf+0x88>
    1e54:	20 61       	ori	r18, 0x10	; 16
    1e56:	2c c0       	rjmp	.+88     	; 0x1eb0 <vfprintf+0xca>
    1e58:	8d 32       	cpi	r24, 0x2D	; 45
    1e5a:	39 f0       	breq	.+14     	; 0x1e6a <vfprintf+0x84>
    1e5c:	80 33       	cpi	r24, 0x30	; 48
    1e5e:	39 f4       	brne	.+14     	; 0x1e6e <vfprintf+0x88>
    1e60:	21 60       	ori	r18, 0x01	; 1
    1e62:	26 c0       	rjmp	.+76     	; 0x1eb0 <vfprintf+0xca>
    1e64:	22 60       	ori	r18, 0x02	; 2
    1e66:	24 60       	ori	r18, 0x04	; 4
    1e68:	23 c0       	rjmp	.+70     	; 0x1eb0 <vfprintf+0xca>
    1e6a:	28 60       	ori	r18, 0x08	; 8
    1e6c:	21 c0       	rjmp	.+66     	; 0x1eb0 <vfprintf+0xca>
    1e6e:	27 fd       	sbrc	r18, 7
    1e70:	27 c0       	rjmp	.+78     	; 0x1ec0 <vfprintf+0xda>
    1e72:	30 ed       	ldi	r19, 0xD0	; 208
    1e74:	38 0f       	add	r19, r24
    1e76:	3a 30       	cpi	r19, 0x0A	; 10
    1e78:	78 f4       	brcc	.+30     	; 0x1e98 <vfprintf+0xb2>
    1e7a:	26 ff       	sbrs	r18, 6
    1e7c:	06 c0       	rjmp	.+12     	; 0x1e8a <vfprintf+0xa4>
    1e7e:	fa e0       	ldi	r31, 0x0A	; 10
    1e80:	5f 9e       	mul	r5, r31
    1e82:	30 0d       	add	r19, r0
    1e84:	11 24       	eor	r1, r1
    1e86:	53 2e       	mov	r5, r19
    1e88:	13 c0       	rjmp	.+38     	; 0x1eb0 <vfprintf+0xca>
    1e8a:	8a e0       	ldi	r24, 0x0A	; 10
    1e8c:	38 9e       	mul	r3, r24
    1e8e:	30 0d       	add	r19, r0
    1e90:	11 24       	eor	r1, r1
    1e92:	33 2e       	mov	r3, r19
    1e94:	20 62       	ori	r18, 0x20	; 32
    1e96:	0c c0       	rjmp	.+24     	; 0x1eb0 <vfprintf+0xca>
    1e98:	8e 32       	cpi	r24, 0x2E	; 46
    1e9a:	21 f4       	brne	.+8      	; 0x1ea4 <vfprintf+0xbe>
    1e9c:	26 fd       	sbrc	r18, 6
    1e9e:	6b c1       	rjmp	.+726    	; 0x2176 <vfprintf+0x390>
    1ea0:	20 64       	ori	r18, 0x40	; 64
    1ea2:	06 c0       	rjmp	.+12     	; 0x1eb0 <vfprintf+0xca>
    1ea4:	8c 36       	cpi	r24, 0x6C	; 108
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <vfprintf+0xc6>
    1ea8:	20 68       	ori	r18, 0x80	; 128
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <vfprintf+0xca>
    1eac:	88 36       	cpi	r24, 0x68	; 104
    1eae:	41 f4       	brne	.+16     	; 0x1ec0 <vfprintf+0xda>
    1eb0:	f6 01       	movw	r30, r12
    1eb2:	93 fd       	sbrc	r25, 3
    1eb4:	85 91       	lpm	r24, Z+
    1eb6:	93 ff       	sbrs	r25, 3
    1eb8:	81 91       	ld	r24, Z+
    1eba:	6f 01       	movw	r12, r30
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	c1 cf       	rjmp	.-126    	; 0x1e42 <vfprintf+0x5c>
    1ec0:	98 2f       	mov	r25, r24
    1ec2:	9f 7d       	andi	r25, 0xDF	; 223
    1ec4:	95 54       	subi	r25, 0x45	; 69
    1ec6:	93 30       	cpi	r25, 0x03	; 3
    1ec8:	28 f4       	brcc	.+10     	; 0x1ed4 <vfprintf+0xee>
    1eca:	0c 5f       	subi	r16, 0xFC	; 252
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	ff e3       	ldi	r31, 0x3F	; 63
    1ed0:	f9 83       	std	Y+1, r31	; 0x01
    1ed2:	0d c0       	rjmp	.+26     	; 0x1eee <vfprintf+0x108>
    1ed4:	83 36       	cpi	r24, 0x63	; 99
    1ed6:	31 f0       	breq	.+12     	; 0x1ee4 <vfprintf+0xfe>
    1ed8:	83 37       	cpi	r24, 0x73	; 115
    1eda:	71 f0       	breq	.+28     	; 0x1ef8 <vfprintf+0x112>
    1edc:	83 35       	cpi	r24, 0x53	; 83
    1ede:	09 f0       	breq	.+2      	; 0x1ee2 <vfprintf+0xfc>
    1ee0:	5b c0       	rjmp	.+182    	; 0x1f98 <vfprintf+0x1b2>
    1ee2:	22 c0       	rjmp	.+68     	; 0x1f28 <vfprintf+0x142>
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	80 81       	ld	r24, Z
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	0e 5f       	subi	r16, 0xFE	; 254
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	44 24       	eor	r4, r4
    1ef0:	43 94       	inc	r4
    1ef2:	51 2c       	mov	r5, r1
    1ef4:	54 01       	movw	r10, r8
    1ef6:	15 c0       	rjmp	.+42     	; 0x1f22 <vfprintf+0x13c>
    1ef8:	38 01       	movw	r6, r16
    1efa:	f2 e0       	ldi	r31, 0x02	; 2
    1efc:	6f 0e       	add	r6, r31
    1efe:	71 1c       	adc	r7, r1
    1f00:	f8 01       	movw	r30, r16
    1f02:	a0 80       	ld	r10, Z
    1f04:	b1 80       	ldd	r11, Z+1	; 0x01
    1f06:	26 ff       	sbrs	r18, 6
    1f08:	03 c0       	rjmp	.+6      	; 0x1f10 <vfprintf+0x12a>
    1f0a:	65 2d       	mov	r22, r5
    1f0c:	70 e0       	ldi	r23, 0x00	; 0
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <vfprintf+0x12e>
    1f10:	6f ef       	ldi	r22, 0xFF	; 255
    1f12:	7f ef       	ldi	r23, 0xFF	; 255
    1f14:	c5 01       	movw	r24, r10
    1f16:	2c 87       	std	Y+12, r18	; 0x0c
    1f18:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <strnlen>
    1f1c:	2c 01       	movw	r4, r24
    1f1e:	83 01       	movw	r16, r6
    1f20:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f22:	2f 77       	andi	r18, 0x7F	; 127
    1f24:	22 2e       	mov	r2, r18
    1f26:	17 c0       	rjmp	.+46     	; 0x1f56 <vfprintf+0x170>
    1f28:	38 01       	movw	r6, r16
    1f2a:	f2 e0       	ldi	r31, 0x02	; 2
    1f2c:	6f 0e       	add	r6, r31
    1f2e:	71 1c       	adc	r7, r1
    1f30:	f8 01       	movw	r30, r16
    1f32:	a0 80       	ld	r10, Z
    1f34:	b1 80       	ldd	r11, Z+1	; 0x01
    1f36:	26 ff       	sbrs	r18, 6
    1f38:	03 c0       	rjmp	.+6      	; 0x1f40 <vfprintf+0x15a>
    1f3a:	65 2d       	mov	r22, r5
    1f3c:	70 e0       	ldi	r23, 0x00	; 0
    1f3e:	02 c0       	rjmp	.+4      	; 0x1f44 <vfprintf+0x15e>
    1f40:	6f ef       	ldi	r22, 0xFF	; 255
    1f42:	7f ef       	ldi	r23, 0xFF	; 255
    1f44:	c5 01       	movw	r24, r10
    1f46:	2c 87       	std	Y+12, r18	; 0x0c
    1f48:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <strnlen_P>
    1f4c:	2c 01       	movw	r4, r24
    1f4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f50:	20 68       	ori	r18, 0x80	; 128
    1f52:	22 2e       	mov	r2, r18
    1f54:	83 01       	movw	r16, r6
    1f56:	23 fc       	sbrc	r2, 3
    1f58:	1b c0       	rjmp	.+54     	; 0x1f90 <vfprintf+0x1aa>
    1f5a:	83 2d       	mov	r24, r3
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	48 16       	cp	r4, r24
    1f60:	59 06       	cpc	r5, r25
    1f62:	b0 f4       	brcc	.+44     	; 0x1f90 <vfprintf+0x1aa>
    1f64:	b7 01       	movw	r22, r14
    1f66:	80 e2       	ldi	r24, 0x20	; 32
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    1f6e:	3a 94       	dec	r3
    1f70:	f4 cf       	rjmp	.-24     	; 0x1f5a <vfprintf+0x174>
    1f72:	f5 01       	movw	r30, r10
    1f74:	27 fc       	sbrc	r2, 7
    1f76:	85 91       	lpm	r24, Z+
    1f78:	27 fe       	sbrs	r2, 7
    1f7a:	81 91       	ld	r24, Z+
    1f7c:	5f 01       	movw	r10, r30
    1f7e:	b7 01       	movw	r22, r14
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    1f86:	31 10       	cpse	r3, r1
    1f88:	3a 94       	dec	r3
    1f8a:	f1 e0       	ldi	r31, 0x01	; 1
    1f8c:	4f 1a       	sub	r4, r31
    1f8e:	51 08       	sbc	r5, r1
    1f90:	41 14       	cp	r4, r1
    1f92:	51 04       	cpc	r5, r1
    1f94:	71 f7       	brne	.-36     	; 0x1f72 <vfprintf+0x18c>
    1f96:	e5 c0       	rjmp	.+458    	; 0x2162 <vfprintf+0x37c>
    1f98:	84 36       	cpi	r24, 0x64	; 100
    1f9a:	11 f0       	breq	.+4      	; 0x1fa0 <vfprintf+0x1ba>
    1f9c:	89 36       	cpi	r24, 0x69	; 105
    1f9e:	39 f5       	brne	.+78     	; 0x1fee <vfprintf+0x208>
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	27 ff       	sbrs	r18, 7
    1fa4:	07 c0       	rjmp	.+14     	; 0x1fb4 <vfprintf+0x1ce>
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	0c 5f       	subi	r16, 0xFC	; 252
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	08 c0       	rjmp	.+16     	; 0x1fc4 <vfprintf+0x1de>
    1fb4:	60 81       	ld	r22, Z
    1fb6:	71 81       	ldd	r23, Z+1	; 0x01
    1fb8:	88 27       	eor	r24, r24
    1fba:	77 fd       	sbrc	r23, 7
    1fbc:	80 95       	com	r24
    1fbe:	98 2f       	mov	r25, r24
    1fc0:	0e 5f       	subi	r16, 0xFE	; 254
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	2f 76       	andi	r18, 0x6F	; 111
    1fc6:	b2 2e       	mov	r11, r18
    1fc8:	97 ff       	sbrs	r25, 7
    1fca:	09 c0       	rjmp	.+18     	; 0x1fde <vfprintf+0x1f8>
    1fcc:	90 95       	com	r25
    1fce:	80 95       	com	r24
    1fd0:	70 95       	com	r23
    1fd2:	61 95       	neg	r22
    1fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd6:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd8:	9f 4f       	sbci	r25, 0xFF	; 255
    1fda:	20 68       	ori	r18, 0x80	; 128
    1fdc:	b2 2e       	mov	r11, r18
    1fde:	2a e0       	ldi	r18, 0x0A	; 10
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	a4 01       	movw	r20, r8
    1fe4:	0e 94 30 11 	call	0x2260	; 0x2260 <__ultoa_invert>
    1fe8:	a8 2e       	mov	r10, r24
    1fea:	a8 18       	sub	r10, r8
    1fec:	44 c0       	rjmp	.+136    	; 0x2076 <vfprintf+0x290>
    1fee:	85 37       	cpi	r24, 0x75	; 117
    1ff0:	29 f4       	brne	.+10     	; 0x1ffc <vfprintf+0x216>
    1ff2:	2f 7e       	andi	r18, 0xEF	; 239
    1ff4:	b2 2e       	mov	r11, r18
    1ff6:	2a e0       	ldi	r18, 0x0A	; 10
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	25 c0       	rjmp	.+74     	; 0x2046 <vfprintf+0x260>
    1ffc:	f2 2f       	mov	r31, r18
    1ffe:	f9 7f       	andi	r31, 0xF9	; 249
    2000:	bf 2e       	mov	r11, r31
    2002:	8f 36       	cpi	r24, 0x6F	; 111
    2004:	c1 f0       	breq	.+48     	; 0x2036 <vfprintf+0x250>
    2006:	18 f4       	brcc	.+6      	; 0x200e <vfprintf+0x228>
    2008:	88 35       	cpi	r24, 0x58	; 88
    200a:	79 f0       	breq	.+30     	; 0x202a <vfprintf+0x244>
    200c:	b4 c0       	rjmp	.+360    	; 0x2176 <vfprintf+0x390>
    200e:	80 37       	cpi	r24, 0x70	; 112
    2010:	19 f0       	breq	.+6      	; 0x2018 <vfprintf+0x232>
    2012:	88 37       	cpi	r24, 0x78	; 120
    2014:	21 f0       	breq	.+8      	; 0x201e <vfprintf+0x238>
    2016:	af c0       	rjmp	.+350    	; 0x2176 <vfprintf+0x390>
    2018:	2f 2f       	mov	r18, r31
    201a:	20 61       	ori	r18, 0x10	; 16
    201c:	b2 2e       	mov	r11, r18
    201e:	b4 fe       	sbrs	r11, 4
    2020:	0d c0       	rjmp	.+26     	; 0x203c <vfprintf+0x256>
    2022:	8b 2d       	mov	r24, r11
    2024:	84 60       	ori	r24, 0x04	; 4
    2026:	b8 2e       	mov	r11, r24
    2028:	09 c0       	rjmp	.+18     	; 0x203c <vfprintf+0x256>
    202a:	24 ff       	sbrs	r18, 4
    202c:	0a c0       	rjmp	.+20     	; 0x2042 <vfprintf+0x25c>
    202e:	9f 2f       	mov	r25, r31
    2030:	96 60       	ori	r25, 0x06	; 6
    2032:	b9 2e       	mov	r11, r25
    2034:	06 c0       	rjmp	.+12     	; 0x2042 <vfprintf+0x25c>
    2036:	28 e0       	ldi	r18, 0x08	; 8
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <vfprintf+0x260>
    203c:	20 e1       	ldi	r18, 0x10	; 16
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	02 c0       	rjmp	.+4      	; 0x2046 <vfprintf+0x260>
    2042:	20 e1       	ldi	r18, 0x10	; 16
    2044:	32 e0       	ldi	r19, 0x02	; 2
    2046:	f8 01       	movw	r30, r16
    2048:	b7 fe       	sbrs	r11, 7
    204a:	07 c0       	rjmp	.+14     	; 0x205a <vfprintf+0x274>
    204c:	60 81       	ld	r22, Z
    204e:	71 81       	ldd	r23, Z+1	; 0x01
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	93 81       	ldd	r25, Z+3	; 0x03
    2054:	0c 5f       	subi	r16, 0xFC	; 252
    2056:	1f 4f       	sbci	r17, 0xFF	; 255
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <vfprintf+0x280>
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 5f       	subi	r16, 0xFE	; 254
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	a4 01       	movw	r20, r8
    2068:	0e 94 30 11 	call	0x2260	; 0x2260 <__ultoa_invert>
    206c:	a8 2e       	mov	r10, r24
    206e:	a8 18       	sub	r10, r8
    2070:	fb 2d       	mov	r31, r11
    2072:	ff 77       	andi	r31, 0x7F	; 127
    2074:	bf 2e       	mov	r11, r31
    2076:	b6 fe       	sbrs	r11, 6
    2078:	0b c0       	rjmp	.+22     	; 0x2090 <vfprintf+0x2aa>
    207a:	2b 2d       	mov	r18, r11
    207c:	2e 7f       	andi	r18, 0xFE	; 254
    207e:	a5 14       	cp	r10, r5
    2080:	50 f4       	brcc	.+20     	; 0x2096 <vfprintf+0x2b0>
    2082:	b4 fe       	sbrs	r11, 4
    2084:	0a c0       	rjmp	.+20     	; 0x209a <vfprintf+0x2b4>
    2086:	b2 fc       	sbrc	r11, 2
    2088:	08 c0       	rjmp	.+16     	; 0x209a <vfprintf+0x2b4>
    208a:	2b 2d       	mov	r18, r11
    208c:	2e 7e       	andi	r18, 0xEE	; 238
    208e:	05 c0       	rjmp	.+10     	; 0x209a <vfprintf+0x2b4>
    2090:	7a 2c       	mov	r7, r10
    2092:	2b 2d       	mov	r18, r11
    2094:	03 c0       	rjmp	.+6      	; 0x209c <vfprintf+0x2b6>
    2096:	7a 2c       	mov	r7, r10
    2098:	01 c0       	rjmp	.+2      	; 0x209c <vfprintf+0x2b6>
    209a:	75 2c       	mov	r7, r5
    209c:	24 ff       	sbrs	r18, 4
    209e:	0d c0       	rjmp	.+26     	; 0x20ba <vfprintf+0x2d4>
    20a0:	fe 01       	movw	r30, r28
    20a2:	ea 0d       	add	r30, r10
    20a4:	f1 1d       	adc	r31, r1
    20a6:	80 81       	ld	r24, Z
    20a8:	80 33       	cpi	r24, 0x30	; 48
    20aa:	11 f4       	brne	.+4      	; 0x20b0 <vfprintf+0x2ca>
    20ac:	29 7e       	andi	r18, 0xE9	; 233
    20ae:	09 c0       	rjmp	.+18     	; 0x20c2 <vfprintf+0x2dc>
    20b0:	22 ff       	sbrs	r18, 2
    20b2:	06 c0       	rjmp	.+12     	; 0x20c0 <vfprintf+0x2da>
    20b4:	73 94       	inc	r7
    20b6:	73 94       	inc	r7
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <vfprintf+0x2dc>
    20ba:	82 2f       	mov	r24, r18
    20bc:	86 78       	andi	r24, 0x86	; 134
    20be:	09 f0       	breq	.+2      	; 0x20c2 <vfprintf+0x2dc>
    20c0:	73 94       	inc	r7
    20c2:	23 fd       	sbrc	r18, 3
    20c4:	13 c0       	rjmp	.+38     	; 0x20ec <vfprintf+0x306>
    20c6:	20 ff       	sbrs	r18, 0
    20c8:	06 c0       	rjmp	.+12     	; 0x20d6 <vfprintf+0x2f0>
    20ca:	5a 2c       	mov	r5, r10
    20cc:	73 14       	cp	r7, r3
    20ce:	18 f4       	brcc	.+6      	; 0x20d6 <vfprintf+0x2f0>
    20d0:	53 0c       	add	r5, r3
    20d2:	57 18       	sub	r5, r7
    20d4:	73 2c       	mov	r7, r3
    20d6:	73 14       	cp	r7, r3
    20d8:	68 f4       	brcc	.+26     	; 0x20f4 <vfprintf+0x30e>
    20da:	b7 01       	movw	r22, r14
    20dc:	80 e2       	ldi	r24, 0x20	; 32
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	2c 87       	std	Y+12, r18	; 0x0c
    20e2:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    20e6:	73 94       	inc	r7
    20e8:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ea:	f5 cf       	rjmp	.-22     	; 0x20d6 <vfprintf+0x2f0>
    20ec:	73 14       	cp	r7, r3
    20ee:	10 f4       	brcc	.+4      	; 0x20f4 <vfprintf+0x30e>
    20f0:	37 18       	sub	r3, r7
    20f2:	01 c0       	rjmp	.+2      	; 0x20f6 <vfprintf+0x310>
    20f4:	31 2c       	mov	r3, r1
    20f6:	24 ff       	sbrs	r18, 4
    20f8:	12 c0       	rjmp	.+36     	; 0x211e <vfprintf+0x338>
    20fa:	b7 01       	movw	r22, r14
    20fc:	80 e3       	ldi	r24, 0x30	; 48
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	2c 87       	std	Y+12, r18	; 0x0c
    2102:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    2106:	2c 85       	ldd	r18, Y+12	; 0x0c
    2108:	22 ff       	sbrs	r18, 2
    210a:	17 c0       	rjmp	.+46     	; 0x213a <vfprintf+0x354>
    210c:	21 ff       	sbrs	r18, 1
    210e:	03 c0       	rjmp	.+6      	; 0x2116 <vfprintf+0x330>
    2110:	88 e5       	ldi	r24, 0x58	; 88
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	02 c0       	rjmp	.+4      	; 0x211a <vfprintf+0x334>
    2116:	88 e7       	ldi	r24, 0x78	; 120
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	b7 01       	movw	r22, r14
    211c:	0c c0       	rjmp	.+24     	; 0x2136 <vfprintf+0x350>
    211e:	82 2f       	mov	r24, r18
    2120:	86 78       	andi	r24, 0x86	; 134
    2122:	59 f0       	breq	.+22     	; 0x213a <vfprintf+0x354>
    2124:	21 fd       	sbrc	r18, 1
    2126:	02 c0       	rjmp	.+4      	; 0x212c <vfprintf+0x346>
    2128:	80 e2       	ldi	r24, 0x20	; 32
    212a:	01 c0       	rjmp	.+2      	; 0x212e <vfprintf+0x348>
    212c:	8b e2       	ldi	r24, 0x2B	; 43
    212e:	27 fd       	sbrc	r18, 7
    2130:	8d e2       	ldi	r24, 0x2D	; 45
    2132:	b7 01       	movw	r22, r14
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    213a:	a5 14       	cp	r10, r5
    213c:	38 f4       	brcc	.+14     	; 0x214c <vfprintf+0x366>
    213e:	b7 01       	movw	r22, r14
    2140:	80 e3       	ldi	r24, 0x30	; 48
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    2148:	5a 94       	dec	r5
    214a:	f7 cf       	rjmp	.-18     	; 0x213a <vfprintf+0x354>
    214c:	aa 94       	dec	r10
    214e:	f4 01       	movw	r30, r8
    2150:	ea 0d       	add	r30, r10
    2152:	f1 1d       	adc	r31, r1
    2154:	80 81       	ld	r24, Z
    2156:	b7 01       	movw	r22, r14
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    215e:	a1 10       	cpse	r10, r1
    2160:	f5 cf       	rjmp	.-22     	; 0x214c <vfprintf+0x366>
    2162:	33 20       	and	r3, r3
    2164:	09 f4       	brne	.+2      	; 0x2168 <vfprintf+0x382>
    2166:	51 ce       	rjmp	.-862    	; 0x1e0a <vfprintf+0x24>
    2168:	b7 01       	movw	r22, r14
    216a:	80 e2       	ldi	r24, 0x20	; 32
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <fputc>
    2172:	3a 94       	dec	r3
    2174:	f6 cf       	rjmp	.-20     	; 0x2162 <vfprintf+0x37c>
    2176:	f7 01       	movw	r30, r14
    2178:	86 81       	ldd	r24, Z+6	; 0x06
    217a:	97 81       	ldd	r25, Z+7	; 0x07
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <vfprintf+0x39c>
    217e:	8f ef       	ldi	r24, 0xFF	; 255
    2180:	9f ef       	ldi	r25, 0xFF	; 255
    2182:	2c 96       	adiw	r28, 0x0c	; 12
    2184:	e2 e1       	ldi	r30, 0x12	; 18
    2186:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__epilogue_restores__>

0000218a <calloc>:
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	86 9f       	mul	r24, r22
    2194:	80 01       	movw	r16, r0
    2196:	87 9f       	mul	r24, r23
    2198:	10 0d       	add	r17, r0
    219a:	96 9f       	mul	r25, r22
    219c:	10 0d       	add	r17, r0
    219e:	11 24       	eor	r1, r1
    21a0:	c8 01       	movw	r24, r16
    21a2:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <malloc>
    21a6:	ec 01       	movw	r28, r24
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	29 f0       	breq	.+10     	; 0x21b6 <calloc+0x2c>
    21ac:	a8 01       	movw	r20, r16
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <memset>
    21b6:	ce 01       	movw	r24, r28
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	08 95       	ret

000021c2 <strnlen_P>:
    21c2:	fc 01       	movw	r30, r24
    21c4:	05 90       	lpm	r0, Z+
    21c6:	61 50       	subi	r22, 0x01	; 1
    21c8:	70 40       	sbci	r23, 0x00	; 0
    21ca:	01 10       	cpse	r0, r1
    21cc:	d8 f7       	brcc	.-10     	; 0x21c4 <strnlen_P+0x2>
    21ce:	80 95       	com	r24
    21d0:	90 95       	com	r25
    21d2:	8e 0f       	add	r24, r30
    21d4:	9f 1f       	adc	r25, r31
    21d6:	08 95       	ret

000021d8 <memset>:
    21d8:	dc 01       	movw	r26, r24
    21da:	01 c0       	rjmp	.+2      	; 0x21de <memset+0x6>
    21dc:	6d 93       	st	X+, r22
    21de:	41 50       	subi	r20, 0x01	; 1
    21e0:	50 40       	sbci	r21, 0x00	; 0
    21e2:	e0 f7       	brcc	.-8      	; 0x21dc <memset+0x4>
    21e4:	08 95       	ret

000021e6 <strnlen>:
    21e6:	fc 01       	movw	r30, r24
    21e8:	61 50       	subi	r22, 0x01	; 1
    21ea:	70 40       	sbci	r23, 0x00	; 0
    21ec:	01 90       	ld	r0, Z+
    21ee:	01 10       	cpse	r0, r1
    21f0:	d8 f7       	brcc	.-10     	; 0x21e8 <strnlen+0x2>
    21f2:	80 95       	com	r24
    21f4:	90 95       	com	r25
    21f6:	8e 0f       	add	r24, r30
    21f8:	9f 1f       	adc	r25, r31
    21fa:	08 95       	ret

000021fc <fputc>:
    21fc:	0f 93       	push	r16
    21fe:	1f 93       	push	r17
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	18 2f       	mov	r17, r24
    2206:	09 2f       	mov	r16, r25
    2208:	eb 01       	movw	r28, r22
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	81 fd       	sbrc	r24, 1
    220e:	03 c0       	rjmp	.+6      	; 0x2216 <fputc+0x1a>
    2210:	8f ef       	ldi	r24, 0xFF	; 255
    2212:	9f ef       	ldi	r25, 0xFF	; 255
    2214:	20 c0       	rjmp	.+64     	; 0x2256 <fputc+0x5a>
    2216:	82 ff       	sbrs	r24, 2
    2218:	10 c0       	rjmp	.+32     	; 0x223a <fputc+0x3e>
    221a:	4e 81       	ldd	r20, Y+6	; 0x06
    221c:	5f 81       	ldd	r21, Y+7	; 0x07
    221e:	2c 81       	ldd	r18, Y+4	; 0x04
    2220:	3d 81       	ldd	r19, Y+5	; 0x05
    2222:	42 17       	cp	r20, r18
    2224:	53 07       	cpc	r21, r19
    2226:	7c f4       	brge	.+30     	; 0x2246 <fputc+0x4a>
    2228:	e8 81       	ld	r30, Y
    222a:	f9 81       	ldd	r31, Y+1	; 0x01
    222c:	9f 01       	movw	r18, r30
    222e:	2f 5f       	subi	r18, 0xFF	; 255
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	39 83       	std	Y+1, r19	; 0x01
    2234:	28 83       	st	Y, r18
    2236:	10 83       	st	Z, r17
    2238:	06 c0       	rjmp	.+12     	; 0x2246 <fputc+0x4a>
    223a:	e8 85       	ldd	r30, Y+8	; 0x08
    223c:	f9 85       	ldd	r31, Y+9	; 0x09
    223e:	81 2f       	mov	r24, r17
    2240:	09 95       	icall
    2242:	89 2b       	or	r24, r25
    2244:	29 f7       	brne	.-54     	; 0x2210 <fputc+0x14>
    2246:	2e 81       	ldd	r18, Y+6	; 0x06
    2248:	3f 81       	ldd	r19, Y+7	; 0x07
    224a:	2f 5f       	subi	r18, 0xFF	; 255
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
    224e:	3f 83       	std	Y+7, r19	; 0x07
    2250:	2e 83       	std	Y+6, r18	; 0x06
    2252:	81 2f       	mov	r24, r17
    2254:	90 2f       	mov	r25, r16
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	1f 91       	pop	r17
    225c:	0f 91       	pop	r16
    225e:	08 95       	ret

00002260 <__ultoa_invert>:
    2260:	fa 01       	movw	r30, r20
    2262:	aa 27       	eor	r26, r26
    2264:	28 30       	cpi	r18, 0x08	; 8
    2266:	51 f1       	breq	.+84     	; 0x22bc <__ultoa_invert+0x5c>
    2268:	20 31       	cpi	r18, 0x10	; 16
    226a:	81 f1       	breq	.+96     	; 0x22cc <__ultoa_invert+0x6c>
    226c:	e8 94       	clt
    226e:	6f 93       	push	r22
    2270:	6e 7f       	andi	r22, 0xFE	; 254
    2272:	6e 5f       	subi	r22, 0xFE	; 254
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	8f 4f       	sbci	r24, 0xFF	; 255
    2278:	9f 4f       	sbci	r25, 0xFF	; 255
    227a:	af 4f       	sbci	r26, 0xFF	; 255
    227c:	b1 e0       	ldi	r27, 0x01	; 1
    227e:	3e d0       	rcall	.+124    	; 0x22fc <__ultoa_invert+0x9c>
    2280:	b4 e0       	ldi	r27, 0x04	; 4
    2282:	3c d0       	rcall	.+120    	; 0x22fc <__ultoa_invert+0x9c>
    2284:	67 0f       	add	r22, r23
    2286:	78 1f       	adc	r23, r24
    2288:	89 1f       	adc	r24, r25
    228a:	9a 1f       	adc	r25, r26
    228c:	a1 1d       	adc	r26, r1
    228e:	68 0f       	add	r22, r24
    2290:	79 1f       	adc	r23, r25
    2292:	8a 1f       	adc	r24, r26
    2294:	91 1d       	adc	r25, r1
    2296:	a1 1d       	adc	r26, r1
    2298:	6a 0f       	add	r22, r26
    229a:	71 1d       	adc	r23, r1
    229c:	81 1d       	adc	r24, r1
    229e:	91 1d       	adc	r25, r1
    22a0:	a1 1d       	adc	r26, r1
    22a2:	20 d0       	rcall	.+64     	; 0x22e4 <__ultoa_invert+0x84>
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <__ultoa_invert+0x48>
    22a6:	68 94       	set
    22a8:	3f 91       	pop	r19
    22aa:	2a e0       	ldi	r18, 0x0A	; 10
    22ac:	26 9f       	mul	r18, r22
    22ae:	11 24       	eor	r1, r1
    22b0:	30 19       	sub	r19, r0
    22b2:	30 5d       	subi	r19, 0xD0	; 208
    22b4:	31 93       	st	Z+, r19
    22b6:	de f6       	brtc	.-74     	; 0x226e <__ultoa_invert+0xe>
    22b8:	cf 01       	movw	r24, r30
    22ba:	08 95       	ret
    22bc:	46 2f       	mov	r20, r22
    22be:	47 70       	andi	r20, 0x07	; 7
    22c0:	40 5d       	subi	r20, 0xD0	; 208
    22c2:	41 93       	st	Z+, r20
    22c4:	b3 e0       	ldi	r27, 0x03	; 3
    22c6:	0f d0       	rcall	.+30     	; 0x22e6 <__ultoa_invert+0x86>
    22c8:	c9 f7       	brne	.-14     	; 0x22bc <__ultoa_invert+0x5c>
    22ca:	f6 cf       	rjmp	.-20     	; 0x22b8 <__ultoa_invert+0x58>
    22cc:	46 2f       	mov	r20, r22
    22ce:	4f 70       	andi	r20, 0x0F	; 15
    22d0:	40 5d       	subi	r20, 0xD0	; 208
    22d2:	4a 33       	cpi	r20, 0x3A	; 58
    22d4:	18 f0       	brcs	.+6      	; 0x22dc <__ultoa_invert+0x7c>
    22d6:	49 5d       	subi	r20, 0xD9	; 217
    22d8:	31 fd       	sbrc	r19, 1
    22da:	40 52       	subi	r20, 0x20	; 32
    22dc:	41 93       	st	Z+, r20
    22de:	02 d0       	rcall	.+4      	; 0x22e4 <__ultoa_invert+0x84>
    22e0:	a9 f7       	brne	.-22     	; 0x22cc <__ultoa_invert+0x6c>
    22e2:	ea cf       	rjmp	.-44     	; 0x22b8 <__ultoa_invert+0x58>
    22e4:	b4 e0       	ldi	r27, 0x04	; 4
    22e6:	a6 95       	lsr	r26
    22e8:	97 95       	ror	r25
    22ea:	87 95       	ror	r24
    22ec:	77 95       	ror	r23
    22ee:	67 95       	ror	r22
    22f0:	ba 95       	dec	r27
    22f2:	c9 f7       	brne	.-14     	; 0x22e6 <__ultoa_invert+0x86>
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	61 05       	cpc	r22, r1
    22f8:	71 05       	cpc	r23, r1
    22fa:	08 95       	ret
    22fc:	9b 01       	movw	r18, r22
    22fe:	ac 01       	movw	r20, r24
    2300:	0a 2e       	mov	r0, r26
    2302:	06 94       	lsr	r0
    2304:	57 95       	ror	r21
    2306:	47 95       	ror	r20
    2308:	37 95       	ror	r19
    230a:	27 95       	ror	r18
    230c:	ba 95       	dec	r27
    230e:	c9 f7       	brne	.-14     	; 0x2302 <__ultoa_invert+0xa2>
    2310:	62 0f       	add	r22, r18
    2312:	73 1f       	adc	r23, r19
    2314:	84 1f       	adc	r24, r20
    2316:	95 1f       	adc	r25, r21
    2318:	a0 1d       	adc	r26, r0
    231a:	08 95       	ret

0000231c <__prologue_saves__>:
    231c:	2f 92       	push	r2
    231e:	3f 92       	push	r3
    2320:	4f 92       	push	r4
    2322:	5f 92       	push	r5
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
    2344:	ca 1b       	sub	r28, r26
    2346:	db 0b       	sbc	r29, r27
    2348:	0f b6       	in	r0, 0x3f	; 63
    234a:	f8 94       	cli
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	0f be       	out	0x3f, r0	; 63
    2350:	cd bf       	out	0x3d, r28	; 61
    2352:	09 94       	ijmp

00002354 <__epilogue_restores__>:
    2354:	2a 88       	ldd	r2, Y+18	; 0x12
    2356:	39 88       	ldd	r3, Y+17	; 0x11
    2358:	48 88       	ldd	r4, Y+16	; 0x10
    235a:	5f 84       	ldd	r5, Y+15	; 0x0f
    235c:	6e 84       	ldd	r6, Y+14	; 0x0e
    235e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2360:	8c 84       	ldd	r8, Y+12	; 0x0c
    2362:	9b 84       	ldd	r9, Y+11	; 0x0b
    2364:	aa 84       	ldd	r10, Y+10	; 0x0a
    2366:	b9 84       	ldd	r11, Y+9	; 0x09
    2368:	c8 84       	ldd	r12, Y+8	; 0x08
    236a:	df 80       	ldd	r13, Y+7	; 0x07
    236c:	ee 80       	ldd	r14, Y+6	; 0x06
    236e:	fd 80       	ldd	r15, Y+5	; 0x05
    2370:	0c 81       	ldd	r16, Y+4	; 0x04
    2372:	1b 81       	ldd	r17, Y+3	; 0x03
    2374:	aa 81       	ldd	r26, Y+2	; 0x02
    2376:	b9 81       	ldd	r27, Y+1	; 0x01
    2378:	ce 0f       	add	r28, r30
    237a:	d1 1d       	adc	r29, r1
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	ed 01       	movw	r28, r26
    2388:	08 95       	ret

0000238a <_exit>:
    238a:	f8 94       	cli

0000238c <__stop_program>:
    238c:	ff cf       	rjmp	.-2      	; 0x238c <__stop_program>
