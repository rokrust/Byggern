
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001cc  00800100  00002372  00002406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002372  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  008002cc  008002cc  000025d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025d2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000400  00000000  00000000  0000262e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003b56  00000000  00000000  00002a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017c3  00000000  00000000  00006584  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001be2  00000000  00000000  00007d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b20  00000000  00000000  0000992c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b13  00000000  00000000  0000a44c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000021c8  00000000  00000000  0000af5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000368  00000000  00000000  0000d127  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__vector_7>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <oled_write+0x10>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e7       	ldi	r30, 0x72	; 114
     37c:	f3 e2       	ldi	r31, 0x23	; 35
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 3c       	cpi	r26, 0xCC	; 204
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ac ec       	ldi	r26, 0xCC	; 204
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 3f       	cpi	r26, 0xF4	; 244
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 0b 09 	call	0x1216	; 0x1216 <main>
     39e:	0c 94 b7 11 	jmp	0x236e	; 0x236e <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:

#include <stdlib.h>
#include <avr/io.h>

void can_init(void){
	mcp_init();
     3a6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <mcp_init>
	mcp_bitModify(MCP_RXB0CTRL, MCP_RXBCTRL_MASK, 0xff);
     3aa:	4f ef       	ldi	r20, 0xFF	; 255
     3ac:	64 e6       	ldi	r22, 0x64	; 100
     3ae:	80 e6       	ldi	r24, 0x60	; 96
     3b0:	0e 94 ce 03 	call	0x79c	; 0x79c <mcp_bitModify>
	mcp_bitModify(MCP_RXB1CTRL, MCP_RXBCTRL_MASK, 0xff);	
     3b4:	4f ef       	ldi	r20, 0xFF	; 255
     3b6:	64 e6       	ldi	r22, 0x64	; 100
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	0e 94 ce 03 	call	0x79c	; 0x79c <mcp_bitModify>
	
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	60 ee       	ldi	r22, 0xE0	; 224
     3c2:	8f e0       	ldi	r24, 0x0F	; 15
     3c4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <mcp_bitModify>

000003c8 <can_write>:
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
	return msg;
}

//tx_buffer is the address of the control register
void can_write(can_message *msg, uint8_t tx_buffer){
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	f6 2e       	mov	r15, r22
	while(mcp_read(tx_buffer) & (1 << MCP_TEXREQ));	//wait for previous message to send
     3d8:	8f 2d       	mov	r24, r15
     3da:	0e 94 a0 03 	call	0x740	; 0x740 <mcp_read>
     3de:	83 fd       	sbrc	r24, 3
     3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <can_write+0x10>
	
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
     3e2:	68 81       	ld	r22, Y
     3e4:	79 81       	ldd	r23, Y+1	; 0x01
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	76 95       	lsr	r23
     3ea:	67 95       	ror	r22
     3ec:	8a 95       	dec	r24
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <can_write+0x20>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	8f 0d       	add	r24, r15
     3f4:	0e 94 af 03 	call	0x75e	; 0x75e <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
     3f8:	68 81       	ld	r22, Y
     3fa:	62 95       	swap	r22
     3fc:	66 0f       	add	r22, r22
     3fe:	60 7e       	andi	r22, 0xE0	; 224
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	8f 0d       	add	r24, r15
     404:	0e 94 af 03 	call	0x75e	; 0x75e <mcp_write>
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
     408:	6a 81       	ldd	r22, Y+2	; 0x02
     40a:	6f 70       	andi	r22, 0x0F	; 15
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	8f 0d       	add	r24, r15
     410:	0e 94 af 03 	call	0x75e	; 0x75e <mcp_write>
	
	for(int i = 0; i < msg->length; i++){
     414:	00 e0       	ldi	r16, 0x00	; 0
     416:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     418:	96 e0       	ldi	r25, 0x06	; 6
     41a:	e9 2e       	mov	r14, r25
     41c:	ef 0c       	add	r14, r15
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     41e:	2a 81       	ldd	r18, Y+2	; 0x02
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 17       	cp	r16, r18
     424:	13 07       	cpc	r17, r19
     426:	5c f4       	brge	.+22     	; 0x43e <can_write+0x76>
     428:	fe 01       	movw	r30, r28
     42a:	e0 0f       	add	r30, r16
     42c:	f1 1f       	adc	r31, r17
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     42e:	63 81       	ldd	r22, Z+3	; 0x03
     430:	8e 2d       	mov	r24, r14
     432:	80 0f       	add	r24, r16
     434:	0e 94 af 03 	call	0x75e	; 0x75e <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     438:	0f 5f       	subi	r16, 0xFF	; 255
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	f0 cf       	rjmp	.-32     	; 0x41e <can_write+0x56>
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     43e:	8f 2d       	mov	r24, r15
     440:	82 95       	swap	r24
     442:	8f 70       	andi	r24, 0x0F	; 15
     444:	82 58       	subi	r24, 0x82	; 130
	
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
	
	for(int i = 0; i < msg->length; i++){
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     452:	0c 94 ed 03 	jmp	0x7da	; 0x7da <mcp_requestToSend>

00000456 <can_pollInterrupt>:
	
}

uint8_t can_pollInterrupt(void){
	if(PIND | (1 << PB3)){ //Check for interrupts
     456:	80 b3       	in	r24, 0x10	; 16
		uint8_t interrupt_register = mcp_read(MCP_CANINTF);
     458:	8c e2       	ldi	r24, 0x2C	; 44
     45a:	0e 94 a0 03 	call	0x740	; 0x740 <mcp_read>
     45e:	98 2f       	mov	r25, r24
		//Finds the register that sent an interrupt signal
		if(interrupt_register & MCP_RX0IF){
     460:	80 ff       	sbrs	r24, 0
     462:	07 c0       	rjmp	.+14     	; 0x472 <can_pollInterrupt+0x1c>
			mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0xFF);
     464:	4f ef       	ldi	r20, 0xFF	; 255
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	8c e2       	ldi	r24, 0x2C	; 44
     46a:	0e 94 ce 03 	call	0x79c	; 0x79c <mcp_bitModify>
			return MCP_RXB0CTRL;
     46e:	80 e6       	ldi	r24, 0x60	; 96
     470:	08 95       	ret
		}
		
		else if(interrupt_register & MCP_RX1IF){
     472:	82 70       	andi	r24, 0x02	; 2
     474:	91 ff       	sbrs	r25, 1
     476:	06 c0       	rjmp	.+12     	; 0x484 <can_pollInterrupt+0x2e>
			mcp_bitModify(MCP_CANINTF, MCP_RX1IF, 0xFF);
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	62 e0       	ldi	r22, 0x02	; 2
     47c:	8c e2       	ldi	r24, 0x2C	; 44
     47e:	0e 94 ce 03 	call	0x79c	; 0x79c <mcp_bitModify>
			return MCP_RXB1CTRL;
     482:	80 e7       	ldi	r24, 0x70	; 112
		}	
	}
	
	return 0x00;
	
}
     484:	08 95       	ret

00000486 <can_read>:
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
	
	
}

can_message can_read(void){
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	2b 97       	sbiw	r28, 0x0b	; 11
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	6c 01       	movw	r12, r24
	can_message msg;
	uint8_t bufferSelect = can_pollInterrupt();
     4b4:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     4b8:	78 2e       	mov	r7, r24
	/*
	if(!bufferSelect){
		printf("No interrupt detected!");
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	87 0d       	add	r24, r7
     4be:	0e 94 a0 03 	call	0x740	; 0x740 <mcp_read>
     4c2:	e8 2e       	mov	r14, r24
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	87 0d       	add	r24, r7
     4c8:	0e 94 a0 03 	call	0x740	; 0x740 <mcp_read>
     4cc:	82 95       	swap	r24
     4ce:	86 95       	lsr	r24
     4d0:	87 70       	andi	r24, 0x07	; 7
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	e9 9e       	mul	r14, r25
     4d6:	70 01       	movw	r14, r0
     4d8:	11 24       	eor	r1, r1
     4da:	e8 2a       	or	r14, r24
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	87 0d       	add	r24, r7
     4e0:	0e 94 a0 03 	call	0x740	; 0x740 <mcp_read>
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	68 2e       	mov	r6, r24
     4e8:	5e 01       	movw	r10, r28
     4ea:	e4 e0       	ldi	r30, 0x04	; 4
     4ec:	ae 0e       	add	r10, r30
     4ee:	b1 1c       	adc	r11, r1
	
	for(int i = 0; i < msg.length; i++){
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	88 2e       	mov	r8, r24
     4f6:	91 2c       	mov	r9, r1
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     4f8:	f6 e0       	ldi	r31, 0x06	; 6
     4fa:	7f 0e       	add	r7, r31
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     4fc:	08 15       	cp	r16, r8
     4fe:	19 05       	cpc	r17, r9
     500:	54 f4       	brge	.+20     	; 0x516 <__stack+0x17>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     502:	87 2d       	mov	r24, r7
     504:	80 0f       	add	r24, r16
     506:	0e 94 a0 03 	call	0x740	; 0x740 <mcp_read>
     50a:	f5 01       	movw	r30, r10
     50c:	81 93       	st	Z+, r24
     50e:	5f 01       	movw	r10, r30
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     510:	0f 5f       	subi	r16, 0xFF	; 255
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	f3 cf       	rjmp	.-26     	; 0x4fc <can_read+0x76>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
	}
	
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	8c e2       	ldi	r24, 0x2C	; 44
     51c:	0e 94 ce 03 	call	0x79c	; 0x79c <mcp_bitModify>
	return msg;
     520:	fa 82       	std	Y+2, r15	; 0x02
     522:	e9 82       	std	Y+1, r14	; 0x01
     524:	6b 82       	std	Y+3, r6	; 0x03
     526:	8b e0       	ldi	r24, 0x0B	; 11
     528:	fe 01       	movw	r30, r28
     52a:	31 96       	adiw	r30, 0x01	; 1
     52c:	d6 01       	movw	r26, r12
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	8a 95       	dec	r24
     534:	e1 f7       	brne	.-8      	; 0x52e <__stack+0x2f>
}
     536:	c6 01       	movw	r24, r12
     538:	2b 96       	adiw	r28, 0x0b	; 11
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	9f 90       	pop	r9
     55a:	8f 90       	pop	r8
     55c:	7f 90       	pop	r7
     55e:	6f 90       	pop	r6
     560:	08 95       	ret

00000562 <new_can_message>:
		printf("%c", msg.data[i]);
	}
	printf("\n");
}

can_message new_can_message(uint16_t id, uint8_t length, uint8_t* data){
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	2b 97       	sbiw	r28, 0x0b	; 11
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	de 01       	movw	r26, r28
     580:	14 96       	adiw	r26, 0x04	; 4
	can_message m;
	m.id = id;
	m.length = length;
	for(int i = 0; i < length; i++){
     582:	f9 01       	movw	r30, r18
     584:	04 2f       	mov	r16, r20
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	7f 01       	movw	r14, r30
     58a:	e2 1a       	sub	r14, r18
     58c:	f3 0a       	sbc	r15, r19
     58e:	e0 16       	cp	r14, r16
     590:	f1 06       	cpc	r15, r17
     592:	1c f4       	brge	.+6      	; 0x59a <new_can_message+0x38>
		m.data[i] = data[i];	
     594:	51 91       	ld	r21, Z+
     596:	5d 93       	st	X+, r21
     598:	f7 cf       	rjmp	.-18     	; 0x588 <new_can_message+0x26>
	}
	
	
	return m;
     59a:	7a 83       	std	Y+2, r23	; 0x02
     59c:	69 83       	std	Y+1, r22	; 0x01
     59e:	4b 83       	std	Y+3, r20	; 0x03
     5a0:	2b e0       	ldi	r18, 0x0B	; 11
     5a2:	fe 01       	movw	r30, r28
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	dc 01       	movw	r26, r24
     5a8:	01 90       	ld	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	2a 95       	dec	r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <new_can_message+0x46>
}
     5b0:	2b 96       	adiw	r28, 0x0b	; 11
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	08 95       	ret

000005ca <can_send_joystick_message>:

void can_send_joystick_message(){
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	64 97       	sbiw	r28, 0x14	; 20
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
	joy_read_joystick();
     5de:	0e 94 a5 04 	call	0x94a	; 0x94a <joy_read_joystick>
	Joystick joy = joy_get_joystick();
     5e2:	0e 94 25 04 	call	0x84a	; 0x84a <joy_get_joystick>
     5e6:	2c 87       	std	Y+12, r18	; 0x0c
     5e8:	3d 87       	std	Y+13, r19	; 0x0d
     5ea:	4e 87       	std	Y+14, r20	; 0x0e
     5ec:	5f 87       	std	Y+15, r21	; 0x0f
     5ee:	68 8b       	std	Y+16, r22	; 0x10
     5f0:	79 8b       	std	Y+17, r23	; 0x11
     5f2:	8a 8b       	std	Y+18, r24	; 0x12
     5f4:	9b 8b       	std	Y+19, r25	; 0x13
	uint8_t joy_data = joy.x;
     5f6:	8c 85       	ldd	r24, Y+12	; 0x0c
     5f8:	9d 85       	ldd	r25, Y+13	; 0x0d
     5fa:	8c 8b       	std	Y+20, r24	; 0x14
	oled_set_write_position(0,0);
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("%d\n", joy.x);
     608:	8c 85       	ldd	r24, Y+12	; 0x0c
     60a:	9d 85       	ldd	r25, Y+13	; 0x0d
     60c:	9f 93       	push	r25
     60e:	8f 93       	push	r24
     610:	84 e1       	ldi	r24, 0x14	; 20
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	9f 93       	push	r25
     616:	8f 93       	push	r24
     618:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	//oled_printf("Test");
	
	can_message msg = new_can_message(MCP_JOYSTICK_MESSAGE, 1, &joy_data);
     61c:	9e 01       	movw	r18, r28
     61e:	2c 5e       	subi	r18, 0xEC	; 236
     620:	3f 4f       	sbci	r19, 0xFF	; 255
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	65 e5       	ldi	r22, 0x55	; 85
     626:	70 e0       	ldi	r23, 0x00	; 0
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     630:	60 e3       	ldi	r22, 0x30	; 48
     632:	ce 01       	movw	r24, r28
     634:	01 96       	adiw	r24, 0x01	; 1
     636:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
}
     642:	64 96       	adiw	r28, 0x14	; 20
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	df 91       	pop	r29
     650:	cf 91       	pop	r28
     652:	08 95       	ret

00000654 <can_send_slider_message>:

void can_send_slider_message(){
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	2c 97       	sbiw	r28, 0x0c	; 12
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg_data = joy_read_left_slider();
     668:	0e 94 8b 05 	call	0xb16	; 0xb16 <joy_read_left_slider>
     66c:	8c 87       	std	Y+12, r24	; 0x0c
	can_message msg = new_can_message(MCP_SLIDER_MESSAGE, 1, &msg_data);
     66e:	9e 01       	movw	r18, r28
     670:	24 5f       	subi	r18, 0xF4	; 244
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	41 e0       	ldi	r20, 0x01	; 1
     676:	68 e8       	ldi	r22, 0x88	; 136
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     682:	60 e3       	ldi	r22, 0x30	; 48
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     68c:	2c 96       	adiw	r28, 0x0c	; 12
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	df 91       	pop	r29
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <can_send_button_message>:
void can_send_button_message(){
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	2c 97       	sbiw	r28, 0x0c	; 12
     6a8:	0f b6       	in	r0, 0x3f	; 63
     6aa:	f8 94       	cli
     6ac:	de bf       	out	0x3e, r29	; 62
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	cd bf       	out	0x3d, r28	; 61
	uint8_t msg_data= joy_read_right_button();
     6b2:	0e 94 95 05 	call	0xb2a	; 0xb2a <joy_read_right_button>
     6b6:	8c 87       	std	Y+12, r24	; 0x0c
	can_message msg = new_can_message(MCP_SOLENOID_MESSAGE, 1, &msg_data);
     6b8:	9e 01       	movw	r18, r28
     6ba:	24 5f       	subi	r18, 0xF4	; 244
     6bc:	3f 4f       	sbci	r19, 0xFF	; 255
     6be:	41 e0       	ldi	r20, 0x01	; 1
     6c0:	67 e7       	ldi	r22, 0x77	; 119
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     6cc:	60 e3       	ldi	r22, 0x30	; 48
     6ce:	ce 01       	movw	r24, r28
     6d0:	01 96       	adiw	r24, 0x01	; 1
     6d2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     6d6:	2c 96       	adiw	r28, 0x0c	; 12
     6d8:	0f b6       	in	r0, 0x3f	; 63
     6da:	f8 94       	cli
     6dc:	de bf       	out	0x3e, r29	; 62
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	cd bf       	out	0x3d, r28	; 61
     6e2:	df 91       	pop	r29
     6e4:	cf 91       	pop	r28
     6e6:	08 95       	ret

000006e8 <can_send_pid_message>:
void can_send_pid_message(uint8_t kp_coeff, uint8_t kp_exp, uint8_t ki_coeff, uint8_t ki_exp, uint8_t kd_coeff, uint8_t kd_exp){
     6e8:	ef 92       	push	r14
     6ea:	0f 93       	push	r16
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	61 97       	sbiw	r28, 0x11	; 17
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
	//Using the scientific form of the numbers.
	uint8_t parameters[6] = {kp_coeff, kp_exp, ki_coeff, ki_exp, kd_coeff, kd_exp}; 
     700:	8c 87       	std	Y+12, r24	; 0x0c
     702:	6d 87       	std	Y+13, r22	; 0x0d
     704:	4e 87       	std	Y+14, r20	; 0x0e
     706:	2f 87       	std	Y+15, r18	; 0x0f
     708:	08 8b       	std	Y+16, r16	; 0x10
     70a:	e9 8a       	std	Y+17, r14	; 0x11
	can_message msg = new_can_message(MCP_PID_MESSAGE, 6, parameters);
     70c:	9e 01       	movw	r18, r28
     70e:	24 5f       	subi	r18, 0xF4	; 244
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	46 e0       	ldi	r20, 0x06	; 6
     714:	69 e9       	ldi	r22, 0x99	; 153
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     720:	60 e3       	ldi	r22, 0x30	; 48
     722:	ce 01       	movw	r24, r28
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
     72a:	61 96       	adiw	r28, 0x11	; 17
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	f8 94       	cli
     730:	de bf       	out	0x3e, r29	; 62
     732:	0f be       	out	0x3f, r0	; 63
     734:	cd bf       	out	0x3d, r28	; 61
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	0f 91       	pop	r16
     73c:	ef 90       	pop	r14
     73e:	08 95       	ret

00000740 <mcp_read>:
#include "mcp.h"
#include "mcp_defines.h"
#include "../../spi/spi.h"
#include <avr/io.h>

char mcp_read(uint8_t address){
     740:	cf 93       	push	r28
     742:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << MCP_CS);
     744:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(MCP_READ);
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	SPI_transmit(address);
     74c:	8c 2f       	mov	r24, r28
     74e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	
	char data = SPI_transmit(0x00);
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	PORTB |= (1 << MCP_CS);
     758:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <mcp_write>:
void mcp_write(uint8_t address, char data){
     75e:	1f 93       	push	r17
     760:	cf 93       	push	r28
     762:	df 93       	push	r29
     764:	1f 92       	push	r1
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     76c:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_WRITE);
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	69 83       	std	Y+1, r22	; 0x01
     772:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	SPI_transmit(address);
     776:	81 2f       	mov	r24, r17
     778:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	SPI_transmit(data);
     77c:	69 81       	ldd	r22, Y+1	; 0x01
     77e:	86 2f       	mov	r24, r22
     780:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     784:	c4 9a       	sbi	0x18, 4	; 24
}	
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	1f 91       	pop	r17
     78e:	08 95       	ret

00000790 <mcp_reset>:
void mcp_reset(){
	PORTB &= ~(1 << MCP_CS);
     790:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_RESET);
     792:	80 ec       	ldi	r24, 0xC0	; 192
     794:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     798:	c4 9a       	sbi	0x18, 4	; 24
     79a:	08 95       	ret

0000079c <mcp_bitModify>:
}	
void mcp_bitModify(uint8_t address, uint8_t mask, char data){
     79c:	1f 93       	push	r17
     79e:	cf 93       	push	r28
     7a0:	df 93       	push	r29
     7a2:	00 d0       	rcall	.+0      	; 0x7a4 <mcp_bitModify+0x8>
     7a4:	cd b7       	in	r28, 0x3d	; 61
     7a6:	de b7       	in	r29, 0x3e	; 62
     7a8:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     7aa:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_BIT_MODIFY);
     7ac:	85 e0       	ldi	r24, 0x05	; 5
     7ae:	4a 83       	std	Y+2, r20	; 0x02
     7b0:	69 83       	std	Y+1, r22	; 0x01
     7b2:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	SPI_transmit(address);
     7b6:	81 2f       	mov	r24, r17
     7b8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	SPI_transmit(mask);
     7bc:	69 81       	ldd	r22, Y+1	; 0x01
     7be:	86 2f       	mov	r24, r22
     7c0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	SPI_transmit(data);
     7c4:	4a 81       	ldd	r20, Y+2	; 0x02
     7c6:	84 2f       	mov	r24, r20
     7c8:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     7cc:	c4 9a       	sbi	0x18, 4	; 24
}
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	08 95       	ret

000007da <mcp_requestToSend>:
void mcp_requestToSend(uint8_t buffer){
	PORTB &= ~(1 << MCP_CS);
     7da:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(buffer);
     7dc:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     7e0:	c4 9a       	sbi	0x18, 4	; 24
     7e2:	08 95       	ret

000007e4 <mcp_init>:
	
	return status;
}

void mcp_init(void){
	SPI_masterInit();
     7e4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <SPI_masterInit>
	mcp_reset();
     7e8:	0c 94 c8 03 	jmp	0x790	; 0x790 <mcp_reset>

000007ec <SPI_masterInit>:
#include <stdio.h>
#include <stdlib.h>

void SPI_masterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5)|(1 << PB7)|(1 << PB4); //4 = SS, 5 = MOSI, 7 = SCK
     7ec:	80 eb       	ldi	r24, 0xB0	; 176
     7ee:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6); //DDRB6
     7f0:	be 98       	cbi	0x17, 6	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     7f2:	81 e5       	ldi	r24, 0x51	; 81
     7f4:	8d b9       	out	0x0d, r24	; 13
     7f6:	08 95       	ret

000007f8 <SPI_transmit>:
}
uint8_t SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
     7f8:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     7fa:	77 9b       	sbis	0x0e, 7	; 14
     7fc:	fe cf       	rjmp	.-4      	; 0x7fa <SPI_transmit+0x2>
	return SPDR;
     7fe:	8f b1       	in	r24, 0x0f	; 15
     800:	08 95       	ret

00000802 <USART_Init>:
	_delay_ms(100);
}
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     802:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     804:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     806:	8a b1       	in	r24, 0x0a	; 10
     808:	88 61       	ori	r24, 0x18	; 24
     80a:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     80c:	80 b5       	in	r24, 0x20	; 32
     80e:	86 68       	ori	r24, 0x86	; 134
     810:	80 bd       	out	0x20, r24	; 32
     812:	08 95       	ret

00000814 <USART_Transmit>:
}
void USART_Transmit(unsigned char data){
	/*Wait for empty transmit buffer*/
	while( !(UCSR0A & (1<<UDRE0)) );
     814:	5d 9b       	sbis	0x0b, 5	; 11
     816:	fe cf       	rjmp	.-4      	; 0x814 <USART_Transmit>
	
	/*Put data into buffer, sends the data*/
	UDR0 = data;
     818:	8c b9       	out	0x0c, r24	; 12
     81a:	08 95       	ret

0000081c <USART_Receive>:
}
unsigned char USART_Receive(void){
	/*Wait for data to be received*/
	while( !(UCSR0A & (1<<RXC0)) );
     81c:	5f 9b       	sbis	0x0b, 7	; 11
     81e:	fe cf       	rjmp	.-4      	; 0x81c <USART_Receive>
	
	
	/*Get and return received data from buffer*/
	return UDR0;
     820:	8c b1       	in	r24, 0x0c	; 12
     822:	08 95       	ret

00000824 <EEPROM_write>:
#include <avr/io.h>

void EEPROM_write(unsigned int uiAddress, unsigned char ucData){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     824:	e1 99       	sbic	0x1c, 1	; 28
     826:	fe cf       	rjmp	.-4      	; 0x824 <EEPROM_write>
	/* Set up address and data registers */
	EEAR = uiAddress;
     828:	9f bb       	out	0x1f, r25	; 31
     82a:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
     82c:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
     82e:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
     830:	e1 9a       	sbi	0x1c, 1	; 28
     832:	08 95       	ret

00000834 <EEPROM_read>:



unsigned char EEPROM_read(unsigned int uiAddress){
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE));
     834:	e1 99       	sbic	0x1c, 1	; 28
     836:	fe cf       	rjmp	.-4      	; 0x834 <EEPROM_read>
	/* Set up address register */
	EEAR = uiAddress;
     838:	9f bb       	out	0x1f, r25	; 31
     83a:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
     83c:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
     83e:	8d b3       	in	r24, 0x1d	; 29
     840:	08 95       	ret

00000842 <SRAM_init>:
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n% 4d errors in retrieval phase \n\n", write_errors, retrieval_errors);
}
void SRAM_init(void){
	MCUCR |= (1 << SRE);
     842:	85 b7       	in	r24, 0x35	; 53
     844:	80 68       	ori	r24, 0x80	; 128
     846:	85 bf       	out	0x35, r24	; 53
     848:	08 95       	ret

0000084a <joy_get_joystick>:
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
	DDRD &= ~(1 << DDD2);
	PORTD |= (1 << PD2);
}
Joystick joy_get_joystick(void){
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
     84e:	cd b7       	in	r28, 0x3d	; 61
     850:	de b7       	in	r29, 0x3e	; 62
     852:	28 97       	sbiw	r28, 0x08	; 8
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	f8 94       	cli
     858:	de bf       	out	0x3e, r29	; 62
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	cd bf       	out	0x3d, r28	; 61
	return joy;
     85e:	88 e0       	ldi	r24, 0x08	; 8
     860:	ec ec       	ldi	r30, 0xCC	; 204
     862:	f2 e0       	ldi	r31, 0x02	; 2
     864:	de 01       	movw	r26, r28
     866:	11 96       	adiw	r26, 0x01	; 1
     868:	01 90       	ld	r0, Z+
     86a:	0d 92       	st	X+, r0
     86c:	8a 95       	dec	r24
     86e:	e1 f7       	brne	.-8      	; 0x868 <joy_get_joystick+0x1e>
     870:	29 81       	ldd	r18, Y+1	; 0x01
     872:	3a 81       	ldd	r19, Y+2	; 0x02
     874:	4b 81       	ldd	r20, Y+3	; 0x03
     876:	5c 81       	ldd	r21, Y+4	; 0x04
     878:	6d 81       	ldd	r22, Y+5	; 0x05
     87a:	7e 81       	ldd	r23, Y+6	; 0x06
}
     87c:	8f 81       	ldd	r24, Y+7	; 0x07
     87e:	98 85       	ldd	r25, Y+8	; 0x08
     880:	28 96       	adiw	r28, 0x08	; 8
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <joy_new_joystick>:
void joy_read_joystick(){
	joy.x = joy_read_x();
	joy.y = joy_read_y();

}
Joystick joy_new_joystick(int x, int y, uint8_t offset_x, uint8_t offset_y){
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	60 97       	sbiw	r28, 0x10	; 16
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	f8 94       	cli
     8a0:	de bf       	out	0x3e, r29	; 62
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	cd bf       	out	0x3d, r28	; 61
	Joystick j;
	j.x = x;
     8a6:	9a 87       	std	Y+10, r25	; 0x0a
     8a8:	89 87       	std	Y+9, r24	; 0x09
	j.y = y;
     8aa:	7c 87       	std	Y+12, r23	; 0x0c
     8ac:	6b 87       	std	Y+11, r22	; 0x0b
	j.offset_x = offset_x;
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	5e 87       	std	Y+14, r21	; 0x0e
     8b2:	4d 87       	std	Y+13, r20	; 0x0d
	j.offset_y = offset_y;
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	38 8b       	std	Y+16, r19	; 0x10
     8b8:	2f 87       	std	Y+15, r18	; 0x0f
	
	return j;
     8ba:	88 e0       	ldi	r24, 0x08	; 8
     8bc:	fe 01       	movw	r30, r28
     8be:	39 96       	adiw	r30, 0x09	; 9
     8c0:	de 01       	movw	r26, r28
     8c2:	11 96       	adiw	r26, 0x01	; 1
     8c4:	01 90       	ld	r0, Z+
     8c6:	0d 92       	st	X+, r0
     8c8:	8a 95       	dec	r24
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <joy_new_joystick+0x32>
     8cc:	29 81       	ldd	r18, Y+1	; 0x01
     8ce:	3a 81       	ldd	r19, Y+2	; 0x02
     8d0:	4b 81       	ldd	r20, Y+3	; 0x03
     8d2:	5c 81       	ldd	r21, Y+4	; 0x04
     8d4:	6d 81       	ldd	r22, Y+5	; 0x05
     8d6:	7e 81       	ldd	r23, Y+6	; 0x06
}
     8d8:	8f 81       	ldd	r24, Y+7	; 0x07
     8da:	98 85       	ldd	r25, Y+8	; 0x08
     8dc:	60 96       	adiw	r28, 0x10	; 16
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	08 95       	ret

000008ee <joy_read_x>:
		return NEUTRAL;
	}		
}

uint8_t joy_read_x(void){
	*adc_data = 0x04;
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f4:	82 e6       	ldi	r24, 0x62	; 98
     8f6:	8a 95       	dec	r24
     8f8:	f1 f7       	brne	.-4      	; 0x8f6 <joy_read_x+0x8>
     8fa:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     8fc:	80 91 00 14 	lds	r24, 0x1400
}
     900:	08 95       	ret

00000902 <joy_read_y>:
uint8_t joy_read_y(void){
	*adc_data = 0x05;
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	80 93 00 14 	sts	0x1400, r24
     908:	82 e6       	ldi	r24, 0x62	; 98
     90a:	8a 95       	dec	r24
     90c:	f1 f7       	brne	.-4      	; 0x90a <joy_read_y+0x8>
     90e:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     910:	80 91 00 14 	lds	r24, 0x1400
}
     914:	08 95       	ret

00000916 <joy_calibrate>:
	int8_t y = (int8_t)((100.0*(joy.y - joy.offset_y))/((float)255-joy.offset_y));
	
	return joy_new_joystick(x, y, joy.offset_x, joy.offset_y);
}
void joy_calibrate(){
	joy.offset_x = joy_read_x();
     916:	0e 94 77 04 	call	0x8ee	; 0x8ee <joy_read_x>
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 d1 02 	sts	0x02D1, r25
     920:	80 93 d0 02 	sts	0x02D0, r24
	joy.offset_y = joy_read_y();
     924:	0e 94 81 04 	call	0x902	; 0x902 <joy_read_y>
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	90 93 d3 02 	sts	0x02D3, r25
     92e:	80 93 d2 02 	sts	0x02D2, r24
     932:	08 95       	ret

00000934 <joy_init>:
#include <stdio.h>

Joystick joy;

void joy_init(){
	joy_calibrate();
     934:	0e 94 8b 04 	call	0x916	; 0x916 <joy_calibrate>
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
     938:	87 b3       	in	r24, 0x17	; 23
     93a:	88 7f       	andi	r24, 0xF8	; 248
     93c:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
     93e:	88 b3       	in	r24, 0x18	; 24
     940:	87 60       	ori	r24, 0x07	; 7
     942:	88 bb       	out	0x18, r24	; 24
	DDRD &= ~(1 << DDD2);
     944:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     946:	92 9a       	sbi	0x12, 2	; 18
     948:	08 95       	ret

0000094a <joy_read_joystick>:
void joy_calibrate(){
	joy.offset_x = joy_read_x();
	joy.offset_y = joy_read_y();
}
void joy_read_joystick(){
	joy.x = joy_read_x();
     94a:	0e 94 77 04 	call	0x8ee	; 0x8ee <joy_read_x>
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	90 93 cd 02 	sts	0x02CD, r25
     954:	80 93 cc 02 	sts	0x02CC, r24
	joy.y = joy_read_y();
     958:	0e 94 81 04 	call	0x902	; 0x902 <joy_read_y>
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	90 93 cf 02 	sts	0x02CF, r25
     962:	80 93 ce 02 	sts	0x02CE, r24
     966:	08 95       	ret

00000968 <joy_toPercent>:
	PORTD |= (1 << PD2);
}
Joystick joy_get_joystick(void){
	return joy;
}
Joystick joy_toPercent(){
     968:	4f 92       	push	r4
     96a:	5f 92       	push	r5
     96c:	6f 92       	push	r6
     96e:	7f 92       	push	r7
     970:	8f 92       	push	r8
     972:	9f 92       	push	r9
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	cd b7       	in	r28, 0x3d	; 61
     98a:	de b7       	in	r29, 0x3e	; 62
     98c:	28 97       	sbiw	r28, 0x08	; 8
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
	joy_read_joystick();
     998:	0e 94 a5 04 	call	0x94a	; 0x94a <joy_read_joystick>
	int8_t x = (int8_t)((100.0*(joy.x - joy.offset_x))/((float)255-joy.offset_x));
     99c:	e0 90 cc 02 	lds	r14, 0x02CC
     9a0:	f0 90 cd 02 	lds	r15, 0x02CD
     9a4:	00 91 d0 02 	lds	r16, 0x02D0
     9a8:	10 91 d1 02 	lds	r17, 0x02D1
	int8_t y = (int8_t)((100.0*(joy.y - joy.offset_y))/((float)255-joy.offset_y));
     9ac:	60 91 ce 02 	lds	r22, 0x02CE
     9b0:	70 91 cf 02 	lds	r23, 0x02CF
     9b4:	a0 90 d2 02 	lds	r10, 0x02D2
     9b8:	b0 90 d3 02 	lds	r11, 0x02D3
     9bc:	6a 19       	sub	r22, r10
     9be:	7b 09       	sbc	r23, r11
     9c0:	88 27       	eor	r24, r24
     9c2:	77 fd       	sbrc	r23, 7
     9c4:	80 95       	com	r24
     9c6:	98 2f       	mov	r25, r24
     9c8:	0e 94 43 0c 	call	0x1886	; 0x1886 <__floatsisf>
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	48 ec       	ldi	r20, 0xC8	; 200
     9d2:	52 e4       	ldi	r21, 0x42	; 66
     9d4:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3>
     9d8:	2b 01       	movw	r4, r22
     9da:	3c 01       	movw	r6, r24
     9dc:	b5 01       	movw	r22, r10
     9de:	88 27       	eor	r24, r24
     9e0:	77 fd       	sbrc	r23, 7
     9e2:	80 95       	com	r24
     9e4:	98 2f       	mov	r25, r24
     9e6:	0e 94 43 0c 	call	0x1886	; 0x1886 <__floatsisf>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	8f e7       	ldi	r24, 0x7F	; 127
     9f4:	93 e4       	ldi	r25, 0x43	; 67
     9f6:	0e 94 43 0b 	call	0x1686	; 0x1686 <__subsf3>
     9fa:	9b 01       	movw	r18, r22
     9fc:	ac 01       	movw	r20, r24
     9fe:	c3 01       	movw	r24, r6
     a00:	b2 01       	movw	r22, r4
     a02:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__divsf3>
     a06:	0e 94 10 0c 	call	0x1820	; 0x1820 <__fixsfsi>
	
	return joy_new_joystick(x, y, joy.offset_x, joy.offset_y);
     a0a:	86 2e       	mov	r8, r22
     a0c:	99 24       	eor	r9, r9
     a0e:	87 fc       	sbrc	r8, 7
     a10:	90 94       	com	r9
Joystick joy_get_joystick(void){
	return joy;
}
Joystick joy_toPercent(){
	joy_read_joystick();
	int8_t x = (int8_t)((100.0*(joy.x - joy.offset_x))/((float)255-joy.offset_x));
     a12:	b7 01       	movw	r22, r14
     a14:	60 1b       	sub	r22, r16
     a16:	71 0b       	sbc	r23, r17
     a18:	88 27       	eor	r24, r24
     a1a:	77 fd       	sbrc	r23, 7
     a1c:	80 95       	com	r24
     a1e:	98 2f       	mov	r25, r24
     a20:	0e 94 43 0c 	call	0x1886	; 0x1886 <__floatsisf>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	48 ec       	ldi	r20, 0xC8	; 200
     a2a:	52 e4       	ldi	r21, 0x42	; 66
     a2c:	0e 94 cf 0c 	call	0x199e	; 0x199e <__mulsf3>
     a30:	6b 01       	movw	r12, r22
     a32:	7c 01       	movw	r14, r24
     a34:	b8 01       	movw	r22, r16
     a36:	88 27       	eor	r24, r24
     a38:	77 fd       	sbrc	r23, 7
     a3a:	80 95       	com	r24
     a3c:	98 2f       	mov	r25, r24
     a3e:	0e 94 43 0c 	call	0x1886	; 0x1886 <__floatsisf>
     a42:	9b 01       	movw	r18, r22
     a44:	ac 01       	movw	r20, r24
     a46:	60 e0       	ldi	r22, 0x00	; 0
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	8f e7       	ldi	r24, 0x7F	; 127
     a4c:	93 e4       	ldi	r25, 0x43	; 67
     a4e:	0e 94 43 0b 	call	0x1686	; 0x1686 <__subsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
     a5a:	0e 94 a8 0b 	call	0x1750	; 0x1750 <__divsf3>
     a5e:	0e 94 10 0c 	call	0x1820	; 0x1820 <__fixsfsi>
     a62:	86 2f       	mov	r24, r22
	int8_t y = (int8_t)((100.0*(joy.y - joy.offset_y))/((float)255-joy.offset_y));
	
	return joy_new_joystick(x, y, joy.offset_x, joy.offset_y);
     a64:	2a 2d       	mov	r18, r10
     a66:	40 2f       	mov	r20, r16
     a68:	b4 01       	movw	r22, r8
     a6a:	99 27       	eor	r25, r25
     a6c:	87 fd       	sbrc	r24, 7
     a6e:	90 95       	com	r25
     a70:	0e 94 49 04 	call	0x892	; 0x892 <joy_new_joystick>
}
     a74:	28 96       	adiw	r28, 0x08	; 8
     a76:	0f b6       	in	r0, 0x3f	; 63
     a78:	f8 94       	cli
     a7a:	de bf       	out	0x3e, r29	; 62
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	cd bf       	out	0x3d, r28	; 61
     a80:	df 91       	pop	r29
     a82:	cf 91       	pop	r28
     a84:	1f 91       	pop	r17
     a86:	0f 91       	pop	r16
     a88:	ff 90       	pop	r15
     a8a:	ef 90       	pop	r14
     a8c:	df 90       	pop	r13
     a8e:	cf 90       	pop	r12
     a90:	bf 90       	pop	r11
     a92:	af 90       	pop	r10
     a94:	9f 90       	pop	r9
     a96:	8f 90       	pop	r8
     a98:	7f 90       	pop	r7
     a9a:	6f 90       	pop	r6
     a9c:	5f 90       	pop	r5
     a9e:	4f 90       	pop	r4
     aa0:	08 95       	ret

00000aa2 <joy_get_direction>:
	j.offset_x = offset_x;
	j.offset_y = offset_y;
	
	return j;
}
direction joy_get_direction(){
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	28 97       	sbiw	r28, 0x08	; 8
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
	Joystick j = joy_toPercent();
     ab6:	0e 94 b4 04 	call	0x968	; 0x968 <joy_toPercent>
     aba:	29 83       	std	Y+1, r18	; 0x01
     abc:	3a 83       	std	Y+2, r19	; 0x02
     abe:	4b 83       	std	Y+3, r20	; 0x03
     ac0:	5c 83       	std	Y+4, r21	; 0x04
     ac2:	6d 83       	std	Y+5, r22	; 0x05
     ac4:	7e 83       	std	Y+6, r23	; 0x06
     ac6:	8f 83       	std	Y+7, r24	; 0x07
     ac8:	98 87       	std	Y+8, r25	; 0x08
	if(j.x >= 90){
     aca:	89 81       	ldd	r24, Y+1	; 0x01
     acc:	9a 81       	ldd	r25, Y+2	; 0x02
     ace:	8a 35       	cpi	r24, 0x5A	; 90
     ad0:	91 05       	cpc	r25, r1
     ad2:	8c f4       	brge	.+34     	; 0xaf6 <joy_get_direction+0x54>
		return RIGHT;
	}else if(j.x <= -90){
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	9a 81       	ldd	r25, Y+2	; 0x02
     ad8:	87 3a       	cpi	r24, 0xA7	; 167
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	74 f0       	brlt	.+28     	; 0xafa <joy_get_direction+0x58>
		return LEFT;
	}else if(j.y >= 90){
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	8a 35       	cpi	r24, 0x5A	; 90
     ae4:	91 05       	cpc	r25, r1
     ae6:	5c f4       	brge	.+22     	; 0xafe <joy_get_direction+0x5c>
		return UP;
	}else if(j.y <= -90){
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	9c 81       	ldd	r25, Y+4	; 0x04
     aec:	87 3a       	cpi	r24, 0xA7	; 167
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	44 f4       	brge	.+16     	; 0xb02 <joy_get_direction+0x60>
		return DOWN;
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <joy_get_direction+0x62>
	return j;
}
direction joy_get_direction(){
	Joystick j = joy_toPercent();
	if(j.x >= 90){
		return RIGHT;
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <joy_get_direction+0x62>
	}else if(j.x <= -90){
		return LEFT;
     afa:	83 e0       	ldi	r24, 0x03	; 3
     afc:	03 c0       	rjmp	.+6      	; 0xb04 <joy_get_direction+0x62>
	}else if(j.y >= 90){
		return UP;
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	01 c0       	rjmp	.+2      	; 0xb04 <joy_get_direction+0x62>
	}else if(j.y <= -90){
		return DOWN;
	}else{
		return NEUTRAL;
     b02:	80 e0       	ldi	r24, 0x00	; 0
	}		
}
     b04:	28 96       	adiw	r28, 0x08	; 8
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	f8 94       	cli
     b0a:	de bf       	out	0x3e, r29	; 62
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	cd bf       	out	0x3d, r28	; 61
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <joy_read_left_slider>:
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
}
uint8_t joy_read_left_slider(void){
	volatile char *ext_joy = (char *) adc_data;	//MUX Address
	ext_joy[0] = 0x07;							//Enable CH4
     b16:	87 e0       	ldi	r24, 0x07	; 7
     b18:	80 93 00 14 	sts	0x1400, r24
     b1c:	81 e4       	ldi	r24, 0x41	; 65
     b1e:	8a 95       	dec	r24
     b20:	f1 f7       	brne	.-4      	; 0xb1e <joy_read_left_slider+0x8>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <joy_read_left_slider+0xe>
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
     b24:	80 91 00 14 	lds	r24, 0x1400
}
     b28:	08 95       	ret

00000b2a <joy_read_right_button>:
int joy_read_left_button(void){
	return (PINB & (1 << PINB1)) >> PINB1;
}
int joy_read_right_button(void){
	return (PINB & (1 << PINB0)) >> PINB0;
     b2a:	86 b3       	in	r24, 0x16	; 22
}
     b2c:	81 70       	andi	r24, 0x01	; 1
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	08 95       	ret

00000b32 <oled_write>:
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = selector[col];
		
	}
}
void oled_write(uint8_t character){	
     b32:	28 e0       	ldi	r18, 0x08	; 8
     b34:	82 9f       	mul	r24, r18
     b36:	c0 01       	movw	r24, r0
     b38:	11 24       	eor	r1, r1
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	80 59       	subi	r24, 0x90	; 144
     b40:	90 40       	sbci	r25, 0x00	; 0
     b42:	fc 01       	movw	r30, r24
     b44:	e2 0f       	add	r30, r18
     b46:	f3 1f       	adc	r31, r19
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = pgm_read_byte(&font[character-' '][col]);
     b48:	e4 91       	lpm	r30, Z
     b4a:	e0 93 00 12 	sts	0x1200, r30
     b4e:	2f 5f       	subi	r18, 0xFF	; 255
     b50:	3f 4f       	sbci	r19, 0xFF	; 255
		*oled_data = selector[col];
		
	}
}
void oled_write(uint8_t character){	
	for(uint8_t col = 0; col < font_width; col++){
     b52:	28 30       	cpi	r18, 0x08	; 8
     b54:	31 05       	cpc	r19, r1
     b56:	a9 f7       	brne	.-22     	; 0xb42 <oled_write+0x10>
		*oled_data = pgm_read_byte(&font[character-' '][col]);
		
	}
}
     b58:	08 95       	ret

00000b5a <oled_write_selector>:


void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
}
void oled_write_selector(){
     b5a:	ee e3       	ldi	r30, 0x3E	; 62
     b5c:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = selector[col];
     b5e:	81 91       	ld	r24, Z+
     b60:	80 93 00 12 	sts	0x1200, r24

void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
}
void oled_write_selector(){
	for(uint8_t col = 0; col < font_width; col++){
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	e6 34       	cpi	r30, 0x46	; 70
     b68:	f8 07       	cpc	r31, r24
     b6a:	c9 f7       	brne	.-14     	; 0xb5e <oled_write_selector+0x4>
		*oled_data = selector[col];
		
	}
}
     b6c:	08 95       	ret

00000b6e <oled_set_start_col>:
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     b6e:	e0 e0       	ldi	r30, 0x00	; 0
     b70:	f0 e1       	ldi	r31, 0x10	; 16
     b72:	91 e2       	ldi	r25, 0x21	; 33
     b74:	90 83       	st	Z, r25
     b76:	80 83       	st	Z, r24
     b78:	8f ef       	ldi	r24, 0xFF	; 255
     b7a:	80 83       	st	Z, r24
     b7c:	08 95       	ret

00000b7e <oled_write_string>:
	oled_control_assign(0x21);
	oled_control_assign(start_col);
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
	oled_control_assign(0xb0 + line_nbr);
     b82:	60 55       	subi	r22, 0x50	; 80
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     b84:	60 93 00 10 	sts	0x1000, r22
     b88:	ec 01       	movw	r28, r24
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
	oled_control_assign(0xb0 + line_nbr);
	for(int i = 0; str[i] != '\0'; i++){
     b8a:	89 91       	ld	r24, Y+
     b8c:	88 23       	and	r24, r24
     b8e:	19 f0       	breq	.+6      	; 0xb96 <oled_write_string+0x18>
		oled_write(str[i]);
     b90:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_write>
     b94:	fa cf       	rjmp	.-12     	; 0xb8a <oled_write_string+0xc>
	}
}
     b96:	df 91       	pop	r29
     b98:	cf 91       	pop	r28
     b9a:	08 95       	ret

00000b9c <oled_clear_screen>:

void oled_clear_screen(){
	oled_set_start_col(0);
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
     ba4:	20 eb       	ldi	r18, 0xB0	; 176
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     ba6:	20 93 00 10 	sts	0x1000, r18
     baa:	80 e8       	ldi	r24, 0x80	; 128
     bac:	90 e0       	ldi	r25, 0x00	; 0
void oled_clear_screen(){
	oled_set_start_col(0);
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
     bae:	10 92 00 12 	sts	0x1200, r1
     bb2:	01 97       	sbiw	r24, 0x01	; 1

void oled_clear_screen(){
	oled_set_start_col(0);
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	d9 f7       	brne	.-10     	; 0xbae <oled_clear_screen+0x12>
     bb8:	2f 5f       	subi	r18, 0xFF	; 255
	}
}

void oled_clear_screen(){
	oled_set_start_col(0);
	for(int page = 0; page < 8; page++){
     bba:	28 3b       	cpi	r18, 0xB8	; 184
     bbc:	a1 f7       	brne	.-24     	; 0xba6 <oled_clear_screen+0xa>
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
		}
	}
}
     bbe:	08 95       	ret

00000bc0 <oled_init>:
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     bc0:	e0 e0       	ldi	r30, 0x00	; 0
     bc2:	f0 e1       	ldi	r31, 0x10	; 16
     bc4:	8e ea       	ldi	r24, 0xAE	; 174
     bc6:	80 83       	st	Z, r24
     bc8:	81 ea       	ldi	r24, 0xA1	; 161
     bca:	80 83       	st	Z, r24
     bcc:	8a ed       	ldi	r24, 0xDA	; 218
     bce:	80 83       	st	Z, r24
     bd0:	82 e1       	ldi	r24, 0x12	; 18
     bd2:	80 83       	st	Z, r24
     bd4:	88 ec       	ldi	r24, 0xC8	; 200
     bd6:	80 83       	st	Z, r24
     bd8:	88 ea       	ldi	r24, 0xA8	; 168
     bda:	80 83       	st	Z, r24
     bdc:	8f e3       	ldi	r24, 0x3F	; 63
     bde:	80 83       	st	Z, r24
     be0:	85 ed       	ldi	r24, 0xD5	; 213
     be2:	80 83       	st	Z, r24
     be4:	80 e8       	ldi	r24, 0x80	; 128
     be6:	80 83       	st	Z, r24
     be8:	81 e8       	ldi	r24, 0x81	; 129
     bea:	80 83       	st	Z, r24
     bec:	80 e5       	ldi	r24, 0x50	; 80
     bee:	80 83       	st	Z, r24
     bf0:	89 ed       	ldi	r24, 0xD9	; 217
     bf2:	80 83       	st	Z, r24
     bf4:	81 e2       	ldi	r24, 0x21	; 33
     bf6:	80 83       	st	Z, r24
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	80 83       	st	Z, r24
     bfc:	82 e0       	ldi	r24, 0x02	; 2
     bfe:	80 83       	st	Z, r24
     c00:	8b ed       	ldi	r24, 0xDB	; 219
     c02:	80 83       	st	Z, r24
     c04:	80 e3       	ldi	r24, 0x30	; 48
     c06:	80 83       	st	Z, r24
     c08:	8d ea       	ldi	r24, 0xAD	; 173
     c0a:	80 83       	st	Z, r24
     c0c:	10 82       	st	Z, r1
     c0e:	84 ea       	ldi	r24, 0xA4	; 164
     c10:	80 83       	st	Z, r24
     c12:	86 ea       	ldi	r24, 0xA6	; 166
     c14:	80 83       	st	Z, r24
     c16:	8f ea       	ldi	r24, 0xAF	; 175
     c18:	80 83       	st	Z, r24
	oled_control_assign(0xad);    //master configuration
	oled_control_assign(0x00);
	oled_control_assign(0xa4);    //out follows RAM content
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
     c1a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <oled_clear_screen>
	
	is_party_toggle = 0;
     c1e:	10 92 d5 02 	sts	0x02D5, r1
     c22:	10 92 d4 02 	sts	0x02D4, r1
     c26:	08 95       	ret

00000c28 <oled_set_write_position>:
			*oled_data = 0x00;
		}
	}
}

void oled_set_write_position(int row, int col){
     c28:	cf 93       	push	r28
     c2a:	c8 2f       	mov	r28, r24
	oled_set_start_col(col);
     c2c:	cb 01       	movw	r24, r22
     c2e:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
	oled_control_assign(0xb0 + row);
     c32:	c0 55       	subi	r28, 0x50	; 80
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c34:	c0 93 00 10 	sts	0x1000, r28
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
	oled_control_assign(0xb0 + row);
}
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <oled_printf>:
		oled_control_assign(0xa7);
		is_party_toggle=1;		
	}
}

void oled_printf(char* fmt, ...){
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
     c44:	fe 01       	movw	r30, r28
     c46:	35 96       	adiw	r30, 0x05	; 5
     c48:	61 91       	ld	r22, Z+
     c4a:	71 91       	ld	r23, Z+
	va_list v;
	va_start(v, fmt);
	vfprintf(&oled_stdout, fmt, v);
     c4c:	af 01       	movw	r20, r30
     c4e:	86 e0       	ldi	r24, 0x06	; 6
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <vfprintf>
	va_end(v);
}
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	08 95       	ret

00000c5c <oled_set_brightness>:

void oled_set_brightness(){
     c5c:	cf 93       	push	r28
	oled_clear_screen();
     c5e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <oled_clear_screen>
		}
	}
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c6a:	82 eb       	ldi	r24, 0xB2	; 178
     c6c:	80 93 00 10 	sts	0x1000, r24
}

void oled_set_brightness(){
	oled_clear_screen();
	oled_set_write_position(2, 0);
	oled_printf("Use the left");
     c70:	88 e1       	ldi	r24, 0x18	; 24
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	9f 93       	push	r25
     c76:	8f 93       	push	r24
     c78:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
		}
	}
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c84:	83 eb       	ldi	r24, 0xB3	; 179
     c86:	80 93 00 10 	sts	0x1000, r24
void oled_set_brightness(){
	oled_clear_screen();
	oled_set_write_position(2, 0);
	oled_printf("Use the left");
	oled_set_write_position(3, 0);
	oled_printf("slider to");
     c8a:	85 e2       	ldi	r24, 0x25	; 37
     c8c:	91 e0       	ldi	r25, 0x01	; 1
     c8e:	9f 93       	push	r25
     c90:	8f 93       	push	r24
     c92:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
		}
	}
}

void oled_set_write_position(int row, int col){
	oled_set_start_col(col);
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     c9e:	84 eb       	ldi	r24, 0xB4	; 180
     ca0:	80 93 00 10 	sts	0x1000, r24
	oled_set_write_position(2, 0);
	oled_printf("Use the left");
	oled_set_write_position(3, 0);
	oled_printf("slider to");
	oled_set_write_position(4, 0);
	oled_printf("set brightness");
     ca4:	8f e2       	ldi	r24, 0x2F	; 47
     ca6:	91 e0       	ldi	r25, 0x01	; 1
     ca8:	9f 93       	push	r25
     caa:	8f 93       	push	r24
     cac:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	while(joy_get_direction() != LEFT){
     cb0:	0f 90       	pop	r0
     cb2:	0f 90       	pop	r0
     cb4:	0f 90       	pop	r0
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     cbc:	c1 e8       	ldi	r28, 0x81	; 129
	oled_printf("Use the left");
	oled_set_write_position(3, 0);
	oled_printf("slider to");
	oled_set_write_position(4, 0);
	oled_printf("set brightness");
	while(joy_get_direction() != LEFT){
     cbe:	0e 94 51 05 	call	0xaa2	; 0xaa2 <joy_get_direction>
     cc2:	83 30       	cpi	r24, 0x03	; 3
     cc4:	39 f0       	breq	.+14     	; 0xcd4 <oled_set_brightness+0x78>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     cc6:	c0 93 00 10 	sts	0x1000, r28
	oled_printf("slider to");
	oled_set_write_position(4, 0);
	oled_printf("set brightness");
	while(joy_get_direction() != LEFT){
		oled_control_assign(0x81);
		oled_control_assign(joy_read_left_slider());
     cca:	0e 94 8b 05 	call	0xb16	; 0xb16 <joy_read_left_slider>
}



void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     cce:	80 93 00 10 	sts	0x1000, r24
     cd2:	f5 cf       	rjmp	.-22     	; 0xcbe <oled_set_brightness+0x62>
	oled_printf("set brightness");
	while(joy_get_direction() != LEFT){
		oled_control_assign(0x81);
		oled_control_assign(joy_read_left_slider());
	}
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <ir_init>:
#include "ir.h"

ir_state ir;

void ir_init(void){
	ir = new_ir_state(0, 0, 0);
     cd8:	e8 ed       	ldi	r30, 0xD8	; 216
     cda:	f2 e0       	ldi	r31, 0x02	; 2
     cdc:	10 82       	st	Z, r1
     cde:	12 82       	std	Z+2, r1	; 0x02
     ce0:	11 82       	std	Z+1, r1	; 0x01
     ce2:	13 82       	std	Z+3, r1	; 0x03
     ce4:	08 95       	ret

00000ce6 <timer_init>:
#include <avr/interrupt.h>
#include <stdlib.h>


void timer_init() {
	TCCR3A &= ~(1<<WGM30);
     ce6:	eb e8       	ldi	r30, 0x8B	; 139
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8e 7f       	andi	r24, 0xFE	; 254
     cee:	80 83       	st	Z, r24
	TCCR3A &= ~(1<<WGM31);
     cf0:	80 81       	ld	r24, Z
     cf2:	8d 7f       	andi	r24, 0xFD	; 253
     cf4:	80 83       	st	Z, r24
	TCCR3B |=  (1<<WGM32);
     cf6:	ea e8       	ldi	r30, 0x8A	; 138
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	88 60       	ori	r24, 0x08	; 8
     cfe:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<WGM33);
     d00:	80 81       	ld	r24, Z
     d02:	8f 7e       	andi	r24, 0xEF	; 239
     d04:	80 83       	st	Z, r24
	
	OCR3A = 68; //68 for 70Hz, 4760 for 1Hz
     d06:	84 e4       	ldi	r24, 0x44	; 68
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	90 93 87 00 	sts	0x0087, r25
     d0e:	80 93 86 00 	sts	0x0086, r24
	
	//enable interrupt on OCR3A compare
	ETIMSK |= (1<<OCIE3A);
     d12:	ed e7       	ldi	r30, 0x7D	; 125
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 61       	ori	r24, 0x10	; 16
     d1a:	80 83       	st	Z, r24
	TIFR |= (1<<ICF1);
     d1c:	88 b7       	in	r24, 0x38	; 56
     d1e:	88 60       	ori	r24, 0x08	; 8
     d20:	88 bf       	out	0x38, r24	; 56
	
	sei();
     d22:	78 94       	sei
     d24:	08 95       	ret

00000d26 <timer_enable>:

}

void timer_enable(){
	//CS3{2:0}   = 101  prescaler set to 1024
	TCCR3B |=  (1<<CS32) | (1<<CS30);
     d26:	ea e8       	ldi	r30, 0x8A	; 138
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	85 60       	ori	r24, 0x05	; 5
     d2e:	80 83       	st	Z, r24
	TCCR3B &= ~(1<<CS31);
     d30:	80 81       	ld	r24, Z
     d32:	8d 7f       	andi	r24, 0xFD	; 253
     d34:	80 83       	st	Z, r24
     d36:	08 95       	ret

00000d38 <timer_disable>:
}

void timer_disable(){
	TCCR3B &= ~((1<<CS30) | (1<<CS31) | (1<<CS32));
     d38:	ea e8       	ldi	r30, 0x8A	; 138
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	88 7f       	andi	r24, 0xF8	; 248
     d40:	80 83       	st	Z, r24
     d42:	08 95       	ret

00000d44 <__vector_7>:
	else{
		timer_disable();
	}
}

ISR(TIMER3_COMPA_vect){
     d44:	1f 92       	push	r1
     d46:	0f 92       	push	r0
     d48:	0f b6       	in	r0, 0x3f	; 63
     d4a:	0f 92       	push	r0
     d4c:	11 24       	eor	r1, r1
     d4e:	2f 93       	push	r18
     d50:	3f 93       	push	r19
     d52:	4f 93       	push	r20
     d54:	5f 93       	push	r21
     d56:	6f 93       	push	r22
     d58:	7f 93       	push	r23
     d5a:	8f 93       	push	r24
     d5c:	9f 93       	push	r25
     d5e:	af 93       	push	r26
     d60:	bf 93       	push	r27
     d62:	ef 93       	push	r30
     d64:	ff 93       	push	r31
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	2b 97       	sbiw	r28, 0x0b	; 11
     d70:	de bf       	out	0x3e, r29	; 62
     d72:	cd bf       	out	0x3d, r28	; 61
	can_message msg = new_can_message(0, 0, NULL);
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	60 e0       	ldi	r22, 0x00	; 0
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	if(can_pollInterrupt()){
     d86:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     d8a:	88 23       	and	r24, r24
     d8c:	21 f0       	breq	.+8      	; 0xd96 <__vector_7+0x52>
		msg = can_read();
     d8e:	ce 01       	movw	r24, r28
     d90:	01 96       	adiw	r24, 0x01	; 1
     d92:	0e 94 43 02 	call	0x486	; 0x486 <can_read>
	}
	
	if(msg.id == MCP_IR_MESSAGE){
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	86 36       	cpi	r24, 0x66	; 102
     d9c:	91 05       	cpc	r25, r1
     d9e:	31 f4       	brne	.+12     	; 0xdac <__vector_7+0x68>
		game_lost = msg.data[0];
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	90 93 d7 02 	sts	0x02D7, r25
     da8:	80 93 d6 02 	sts	0x02D6, r24
	}
	
	if (!game_lost){	
     dac:	80 91 d6 02 	lds	r24, 0x02D6
     db0:	90 91 d7 02 	lds	r25, 0x02D7
     db4:	89 2b       	or	r24, r25
     db6:	11 f4       	brne	.+4      	; 0xdbc <__vector_7+0x78>
		game_track_score();
     db8:	0e 94 00 07 	call	0xe00	; 0xe00 <game_track_score>
	}
	

	//oled_toggle_party_mode();
	
	can_send_joystick_message();
     dbc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <can_send_joystick_message>
	can_send_slider_message();
     dc0:	0e 94 2a 03 	call	0x654	; 0x654 <can_send_slider_message>
	can_send_button_message();
     dc4:	0e 94 4f 03 	call	0x69e	; 0x69e <can_send_button_message>
	
     dc8:	2b 96       	adiw	r28, 0x0b	; 11
     dca:	0f b6       	in	r0, 0x3f	; 63
     dcc:	f8 94       	cli
     dce:	de bf       	out	0x3e, r29	; 62
     dd0:	0f be       	out	0x3f, r0	; 63
     dd2:	cd bf       	out	0x3d, r28	; 61
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	ff 91       	pop	r31
     dda:	ef 91       	pop	r30
     ddc:	bf 91       	pop	r27
     dde:	af 91       	pop	r26
     de0:	9f 91       	pop	r25
     de2:	8f 91       	pop	r24
     de4:	7f 91       	pop	r23
     de6:	6f 91       	pop	r22
     de8:	5f 91       	pop	r21
     dea:	4f 91       	pop	r20
     dec:	3f 91       	pop	r19
     dee:	2f 91       	pop	r18
     df0:	0f 90       	pop	r0
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	0f 90       	pop	r0
     df6:	1f 90       	pop	r1
     df8:	18 95       	reti

00000dfa <game_init>:
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
     dfa:	80 93 de 02 	sts	0x02DE, r24
     dfe:	08 95       	ret

00000e00 <game_track_score>:
	game_reset_score();
	oled_clear_screen();
}

void game_track_score(){
	game_score_counter++;
     e00:	80 91 dd 02 	lds	r24, 0x02DD
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 93 dd 02 	sts	0x02DD, r24
	
	//Using 70 Hz clock
	if(game_score_counter > counting_speed){
     e0a:	90 91 de 02 	lds	r25, 0x02DE
     e0e:	98 17       	cp	r25, r24
     e10:	d8 f4       	brcc	.+54     	; 0xe48 <game_track_score+0x48>
		game_score++;
     e12:	80 91 dc 02 	lds	r24, 0x02DC
     e16:	8f 5f       	subi	r24, 0xFF	; 255
     e18:	80 93 dc 02 	sts	0x02DC, r24
		game_score_counter = 0;
     e1c:	10 92 dd 02 	sts	0x02DD, r1
		oled_set_write_position(4, 16);
     e20:	60 e1       	ldi	r22, 0x10	; 16
     e22:	70 e0       	ldi	r23, 0x00	; 0
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
		oled_printf("Score: %d", game_score);
     e2c:	80 91 dc 02 	lds	r24, 0x02DC
     e30:	1f 92       	push	r1
     e32:	8f 93       	push	r24
     e34:	86 e4       	ldi	r24, 0x46	; 70
     e36:	91 e0       	ldi	r25, 0x01	; 1
     e38:	9f 93       	push	r25
     e3a:	8f 93       	push	r24
     e3c:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
     e40:	0f 90       	pop	r0
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	0f 90       	pop	r0
     e48:	08 95       	ret

00000e4a <game_reset_score>:
	
	highscore_print();
}

void game_reset_score(void){
	game_score = 0;
     e4a:	10 92 dc 02 	sts	0x02DC, r1
	game_score_counter = 0;
     e4e:	10 92 dd 02 	sts	0x02DD, r1
     e52:	08 95       	ret

00000e54 <game_start>:

void game_init(uint8_t speed){
	counting_speed = speed;
}
void game_start(void){
	game_lost = 0;
     e54:	10 92 d7 02 	sts	0x02D7, r1
     e58:	10 92 d6 02 	sts	0x02D6, r1
	timer_enable();
     e5c:	0e 94 93 06 	call	0xd26	; 0xd26 <timer_enable>
	game_reset_score();
     e60:	0e 94 25 07 	call	0xe4a	; 0xe4a <game_reset_score>
	oled_clear_screen();
     e64:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <oled_clear_screen>

00000e68 <game_introMessage>:
void game_reset_score(void){
	game_score = 0;
	game_score_counter = 0;
}
void game_introMessage(void){
	oled_clear_screen();
     e68:	0e 94 ce 05 	call	0xb9c	; 0xb9c <oled_clear_screen>
	oled_set_write_position(0, 0);
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("Welcome to this");
     e78:	80 e5       	ldi	r24, 0x50	; 80
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(1, 0);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("interactive ball");
     e90:	80 e6       	ldi	r24, 0x60	; 96
     e92:	91 e0       	ldi	r25, 0x01	; 1
     e94:	9f 93       	push	r25
     e96:	8f 93       	push	r24
     e98:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(2, 0);
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("bump experience.");
     ea8:	81 e7       	ldi	r24, 0x71	; 113
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	9f 93       	push	r25
     eae:	8f 93       	push	r24
     eb0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(4, 0);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	84 e0       	ldi	r24, 0x04	; 4
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("Put your balls");
     ec0:	82 e8       	ldi	r24, 0x82	; 130
     ec2:	91 e0       	ldi	r25, 0x01	; 1
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(5, 0);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	85 e0       	ldi	r24, 0x05	; 5
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("on the solenoid");
     ed8:	81 e9       	ldi	r24, 0x91	; 145
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	9f 93       	push	r25
     ede:	8f 93       	push	r24
     ee0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(6, 0);
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	86 e0       	ldi	r24, 0x06	; 6
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("to begin..");
     ef0:	81 ea       	ldi	r24, 0xA1	; 161
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	9f 93       	push	r25
     ef6:	8f 93       	push	r24
     ef8:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(7, 0);
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	87 e0       	ldi	r24, 0x07	; 7
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("  ..good luck");
     f08:	8c ea       	ldi	r24, 0xAC	; 172
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	9f 93       	push	r25
     f0e:	8f 93       	push	r24
     f10:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
     f14:	8d b7       	in	r24, 0x3d	; 61
     f16:	9e b7       	in	r25, 0x3e	; 62
     f18:	0e 96       	adiw	r24, 0x0e	; 14
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	9e bf       	out	0x3e, r25	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	8d bf       	out	0x3d, r24	; 61
     f24:	08 95       	ret

00000f26 <game_postGameMessage>:
}

void game_postGameMessage(int rank){
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
	oled_set_write_position(1,8);
     f2c:	68 e0       	ldi	r22, 0x08	; 8
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("NEW HIGHSCORE!");
     f38:	2a eb       	ldi	r18, 0xBA	; 186
     f3a:	31 e0       	ldi	r19, 0x01	; 1
     f3c:	3f 93       	push	r19
     f3e:	2f 93       	push	r18
     f40:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(2,0);
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	70 e0       	ldi	r23, 0x00	; 0
     f48:	82 e0       	ldi	r24, 0x02	; 2
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("Finished as");
     f50:	29 ec       	ldi	r18, 0xC9	; 201
     f52:	31 e0       	ldi	r19, 0x01	; 1
     f54:	3f 93       	push	r19
     f56:	2f 93       	push	r18
     f58:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	oled_set_write_position(3,0);
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("number %d", rank);
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	85 ed       	ldi	r24, 0xD5	; 213
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	9f 93       	push	r25
     f72:	8f 93       	push	r24
     f74:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
     f78:	8d b7       	in	r24, 0x3d	; 61
     f7a:	9e b7       	in	r25, 0x3e	; 62
     f7c:	08 96       	adiw	r24, 0x08	; 8
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	9e bf       	out	0x3e, r25	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	8d bf       	out	0x3d, r24	; 61
}
     f88:	df 91       	pop	r29
     f8a:	cf 91       	pop	r28
     f8c:	08 95       	ret

00000f8e <game_end>:
		oled_printf("Score: %d", game_score);
	}
}

void game_end(void){
	timer_disable();
     f8e:	0e 94 9c 06 	call	0xd38	; 0xd38 <timer_disable>
	oled_clear_screen();
     f92:	0e 94 ce 05 	call	0xb9c	; 0xb9c <oled_clear_screen>
	uint8_t rank = highscore_update(game_score);
     f96:	80 91 dc 02 	lds	r24, 0x02DC
     f9a:	0e 94 61 08 	call	0x10c2	; 0x10c2 <highscore_update>
	if(rank){
     f9e:	88 23       	and	r24, r24
     fa0:	69 f0       	breq	.+26     	; 0xfbc <game_end+0x2e>
		game_postGameMessage(rank);
     fa2:	99 27       	eor	r25, r25
     fa4:	0e 94 93 07 	call	0xf26	; 0xf26 <game_postGameMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fa8:	2f ef       	ldi	r18, 0xFF	; 255
     faa:	8f ef       	ldi	r24, 0xFF	; 255
     fac:	9a e4       	ldi	r25, 0x4A	; 74
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	80 40       	sbci	r24, 0x00	; 0
     fb2:	90 40       	sbci	r25, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <game_end+0x20>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <game_end+0x2a>
     fb8:	00 00       	nop
     fba:	17 c0       	rjmp	.+46     	; 0xfea <game_end+0x5c>
		_delay_ms(5000);
	
	}
	else{
		oled_set_write_position(2, 8);	
     fbc:	68 e0       	ldi	r22, 0x08	; 8
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
		printf("You so bad.");
     fc8:	8f ed       	ldi	r24, 0xDF	; 223
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	9f 93       	push	r25
     fce:	8f 93       	push	r24
     fd0:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <printf>
     fd4:	2f ef       	ldi	r18, 0xFF	; 255
     fd6:	8f ef       	ldi	r24, 0xFF	; 255
     fd8:	9a e4       	ldi	r25, 0x4A	; 74
     fda:	21 50       	subi	r18, 0x01	; 1
     fdc:	80 40       	sbci	r24, 0x00	; 0
     fde:	90 40       	sbci	r25, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <game_end+0x4c>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <game_end+0x56>
     fe4:	00 00       	nop
     fe6:	0f 90       	pop	r0
     fe8:	0f 90       	pop	r0
		_delay_ms(5000);
	}
	
	highscore_print();
     fea:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <highscore_print>

00000fee <game_main>:
	oled_printf("number %d", rank);
}


void game_main(void){
	game_introMessage();
     fee:	0e 94 34 07 	call	0xe68	; 0xe68 <game_introMessage>
	while(!joy_read_right_button()){
     ff2:	0e 94 95 05 	call	0xb2a	; 0xb2a <joy_read_right_button>
     ff6:	89 2b       	or	r24, r25
     ff8:	29 f4       	brne	.+10     	; 0x1004 <game_main+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ffa:	80 e1       	ldi	r24, 0x10	; 16
     ffc:	8a 95       	dec	r24
     ffe:	f1 f7       	brne	.-4      	; 0xffc <game_main+0xe>
    1000:	00 c0       	rjmp	.+0      	; 0x1002 <game_main+0x14>
    1002:	f7 cf       	rjmp	.-18     	; 0xff2 <game_main+0x4>
		_delay_us(10);
	}
	game_start();
    1004:	0e 94 2a 07 	call	0xe54	; 0xe54 <game_start>
	while(!game_lost){
    1008:	80 91 d6 02 	lds	r24, 0x02D6
    100c:	90 91 d7 02 	lds	r25, 0x02D7
    1010:	89 2b       	or	r24, r25
    1012:	29 f4       	brne	.+10     	; 0x101e <game_main+0x30>
    1014:	80 e1       	ldi	r24, 0x10	; 16
    1016:	8a 95       	dec	r24
    1018:	f1 f7       	brne	.-4      	; 0x1016 <game_main+0x28>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <game_main+0x2e>
    101c:	f5 cf       	rjmp	.-22     	; 0x1008 <game_main+0x1a>
		_delay_us(10);
	}
	oled_printf("Game lost!");
    101e:	8b ee       	ldi	r24, 0xEB	; 235
    1020:	91 e0       	ldi	r25, 0x01	; 1
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
	game_end();
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <game_end>

00001032 <game_hard_difficulty>:
}

void game_hard_difficulty(void){
    1032:	ef 92       	push	r14
    1034:	0f 93       	push	r16
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
    1036:	83 e2       	ldi	r24, 0x23	; 35
    1038:	80 93 de 02 	sts	0x02DE, r24
	game_end();
}

void game_hard_difficulty(void){
	game_init(35);
	can_send_pid_message(7, 1, 1, 1, 0, 0);
    103c:	e1 2c       	mov	r14, r1
    103e:	00 e0       	ldi	r16, 0x00	; 0
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	41 e0       	ldi	r20, 0x01	; 1
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	87 e0       	ldi	r24, 0x07	; 7
    1048:	0e 94 74 03 	call	0x6e8	; 0x6e8 <can_send_pid_message>
}
    104c:	0f 91       	pop	r16
    104e:	ef 90       	pop	r14
    1050:	08 95       	ret

00001052 <game_medium_difficulty>:

void game_medium_difficulty(void){
    1052:	ef 92       	push	r14
    1054:	0f 93       	push	r16
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
    1056:	86 e4       	ldi	r24, 0x46	; 70
    1058:	80 93 de 02 	sts	0x02DE, r24
	can_send_pid_message(7, 1, 1, 1, 0, 0);
}

void game_medium_difficulty(void){
	game_init(70);
	can_send_pid_message(1, 1, 2, 1, 0, 0);
    105c:	e1 2c       	mov	r14, r1
    105e:	00 e0       	ldi	r16, 0x00	; 0
    1060:	21 e0       	ldi	r18, 0x01	; 1
    1062:	42 e0       	ldi	r20, 0x02	; 2
    1064:	61 e0       	ldi	r22, 0x01	; 1
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	0e 94 74 03 	call	0x6e8	; 0x6e8 <can_send_pid_message>
}
    106c:	0f 91       	pop	r16
    106e:	ef 90       	pop	r14
    1070:	08 95       	ret

00001072 <game_impossible_difficulty>:

void game_impossible_difficulty(void){
    1072:	ef 92       	push	r14
    1074:	0f 93       	push	r16
uint8_t game_score;
uint8_t game_score_counter;
uint8_t counting_speed;

void game_init(uint8_t speed){
	counting_speed = speed;
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	80 93 de 02 	sts	0x02DE, r24
	can_send_pid_message(1, 1, 2, 1, 0, 0);
}

void game_impossible_difficulty(void){
	game_init(10);
	can_send_pid_message(1, 2, 1, 2, 1, 1);
    107c:	ee 24       	eor	r14, r14
    107e:	e3 94       	inc	r14
    1080:	01 e0       	ldi	r16, 0x01	; 1
    1082:	22 e0       	ldi	r18, 0x02	; 2
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	62 e0       	ldi	r22, 0x02	; 2
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <can_send_pid_message>
	
}
    108e:	0f 91       	pop	r16
    1090:	ef 90       	pop	r14
    1092:	08 95       	ret

00001094 <highscore_init>:
#include <stdio.h>

uint8_t highscores[7];

//Save highscores to array
void highscore_init(){
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	0f ed       	ldi	r16, 0xDF	; 223
    109e:	12 e0       	ldi	r17, 0x02	; 2
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    10a0:	c0 e0       	ldi	r28, 0x00	; 0
    10a2:	d0 e0       	ldi	r29, 0x00	; 0
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
    10a4:	ce 01       	movw	r24, r28
    10a6:	0e 94 1a 04 	call	0x834	; 0x834 <EEPROM_read>
    10aa:	f8 01       	movw	r30, r16
    10ac:	81 93       	st	Z+, r24
    10ae:	8f 01       	movw	r16, r30

uint8_t highscores[7];

//Save highscores to array
void highscore_init(){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    10b0:	21 96       	adiw	r28, 0x01	; 1
    10b2:	c7 30       	cpi	r28, 0x07	; 7
    10b4:	d1 05       	cpc	r29, r1
    10b6:	b1 f7       	brne	.-20     	; 0x10a4 <highscore_init+0x10>
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
	}
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	08 95       	ret

000010c2 <highscore_update>:
	
int highscore_update(uint8_t score){
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	b8 2e       	mov	r11, r24
    10d6:	ef ed       	ldi	r30, 0xDF	; 223
    10d8:	f2 e0       	ldi	r31, 0x02	; 2
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    10da:	c0 e0       	ldi	r28, 0x00	; 0
    10dc:	d0 e0       	ldi	r29, 0x00	; 0
		if(score > highscores[i]){
    10de:	81 91       	ld	r24, Z+
    10e0:	8b 15       	cp	r24, r11
    10e2:	10 f5       	brcc	.+68     	; 0x1128 <highscore_update+0x66>
    10e4:	85 ee       	ldi	r24, 0xE5	; 229
    10e6:	c8 2e       	mov	r12, r24
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	d8 2e       	mov	r13, r24
    10ec:	96 ee       	ldi	r25, 0xE6	; 230
    10ee:	e9 2e       	mov	r14, r25
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	f9 2e       	mov	r15, r25
    10f4:	06 e0       	ldi	r16, 0x06	; 6
    10f6:	10 e0       	ldi	r17, 0x00	; 0
			for(int j = NUMBER_OF_HIGHSCORES - 1; j > i - 1; j--){
				highscores[j] = highscores[j - 1];
    10f8:	f6 01       	movw	r30, r12
    10fa:	62 91       	ld	r22, -Z
    10fc:	6f 01       	movw	r12, r30
    10fe:	f7 01       	movw	r30, r14
    1100:	62 93       	st	-Z, r22
    1102:	7f 01       	movw	r14, r30
				EEPROM_write(HIGHSCORE_START_ADDR + j, highscores[j]);
    1104:	c8 01       	movw	r24, r16
    1106:	0e 94 12 04 	call	0x824	; 0x824 <EEPROM_write>
    110a:	01 50       	subi	r16, 0x01	; 1
    110c:	11 09       	sbc	r17, r1
}
	
int highscore_update(uint8_t score){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
		if(score > highscores[i]){
			for(int j = NUMBER_OF_HIGHSCORES - 1; j > i - 1; j--){
    110e:	0c 17       	cp	r16, r28
    1110:	1d 07       	cpc	r17, r29
    1112:	94 f7       	brge	.-28     	; 0x10f8 <highscore_update+0x36>
				highscores[j] = highscores[j - 1];
				EEPROM_write(HIGHSCORE_START_ADDR + j, highscores[j]);
			}
			highscores[i] = score;
    1114:	fe 01       	movw	r30, r28
    1116:	e1 52       	subi	r30, 0x21	; 33
    1118:	fd 4f       	sbci	r31, 0xFD	; 253
    111a:	b0 82       	st	Z, r11
			EEPROM_write(HIGHSCORE_START_ADDR + i, highscores[i]);
    111c:	6b 2d       	mov	r22, r11
    111e:	ce 01       	movw	r24, r28
    1120:	0e 94 12 04 	call	0x824	; 0x824 <EEPROM_write>
			return i;
    1124:	ce 01       	movw	r24, r28
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <highscore_update+0x72>
		highscores[i] = EEPROM_read(HIGHSCORE_START_ADDR + i);
	}
}
	
int highscore_update(uint8_t score){
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    1128:	21 96       	adiw	r28, 0x01	; 1
    112a:	c7 30       	cpi	r28, 0x07	; 7
    112c:	d1 05       	cpc	r29, r1
    112e:	b9 f6       	brne	.-82     	; 0x10de <highscore_update+0x1c>
			highscores[i] = score;
			EEPROM_write(HIGHSCORE_START_ADDR + i, highscores[i]);
			return i;
		}
	}
	return 0;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
}
    1134:	df 91       	pop	r29
    1136:	cf 91       	pop	r28
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	ff 90       	pop	r15
    113e:	ef 90       	pop	r14
    1140:	df 90       	pop	r13
    1142:	cf 90       	pop	r12
    1144:	bf 90       	pop	r11
    1146:	08 95       	ret

00001148 <highscore_resetAll>:

void highscore_resetAll(void){
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	0f ed       	ldi	r16, 0xDF	; 223
    1152:	12 e0       	ldi	r17, 0x02	; 2
	for (int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    1154:	c0 e0       	ldi	r28, 0x00	; 0
    1156:	d0 e0       	ldi	r29, 0x00	; 0
		EEPROM_write(HIGHSCORE_START_ADDR + i, 0);
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	ce 01       	movw	r24, r28
    115c:	0e 94 12 04 	call	0x824	; 0x824 <EEPROM_write>
		highscores[i] = 0;
    1160:	f8 01       	movw	r30, r16
    1162:	11 92       	st	Z+, r1
    1164:	8f 01       	movw	r16, r30
	}
	return 0;
}

void highscore_resetAll(void){
	for (int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    1166:	21 96       	adiw	r28, 0x01	; 1
    1168:	c7 30       	cpi	r28, 0x07	; 7
    116a:	d1 05       	cpc	r29, r1
    116c:	a9 f7       	brne	.-22     	; 0x1158 <highscore_resetAll+0x10>
		EEPROM_write(HIGHSCORE_START_ADDR + i, 0);
		highscores[i] = 0;
	}
	
}
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <highscore_print>:

void highscore_print(void){
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
	oled_clear_screen();
    1184:	0e 94 ce 05 	call	0xb9c	; 0xb9c <oled_clear_screen>
	oled_set_write_position(0, 0);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_printf("Highscores!", 0);
    1194:	1f 92       	push	r1
    1196:	1f 92       	push	r1
    1198:	86 ef       	ldi	r24, 0xF6	; 246
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	9f 93       	push	r25
    119e:	8f 93       	push	r24
    11a0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>
    11a4:	2f ed       	ldi	r18, 0xDF	; 223
    11a6:	e2 2e       	mov	r14, r18
    11a8:	22 e0       	ldi	r18, 0x02	; 2
    11aa:	f2 2e       	mov	r15, r18
    11ac:	0f 90       	pop	r0
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    11b4:	c0 e0       	ldi	r28, 0x00	; 0
    11b6:	d0 e0       	ldi	r29, 0x00	; 0
		oled_set_write_position(i + 1, 16);
		oled_printf("%d.  %d", i + 1, highscores[i]);
    11b8:	02 e0       	ldi	r16, 0x02	; 2
    11ba:	12 e0       	ldi	r17, 0x02	; 2
void highscore_print(void){
	oled_clear_screen();
	oled_set_write_position(0, 0);
	oled_printf("Highscores!", 0);
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
		oled_set_write_position(i + 1, 16);
    11bc:	21 96       	adiw	r28, 0x01	; 1
    11be:	60 e1       	ldi	r22, 0x10	; 16
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	ce 01       	movw	r24, r28
    11c4:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
		oled_printf("%d.  %d", i + 1, highscores[i]);
    11c8:	f7 01       	movw	r30, r14
    11ca:	81 91       	ld	r24, Z+
    11cc:	7f 01       	movw	r14, r30
    11ce:	1f 92       	push	r1
    11d0:	8f 93       	push	r24
    11d2:	df 93       	push	r29
    11d4:	cf 93       	push	r28
    11d6:	1f 93       	push	r17
    11d8:	0f 93       	push	r16
    11da:	0e 94 1e 06 	call	0xc3c	; 0xc3c <oled_printf>

void highscore_print(void){
	oled_clear_screen();
	oled_set_write_position(0, 0);
	oled_printf("Highscores!", 0);
	for(int i = 0; i < NUMBER_OF_HIGHSCORES; i++){
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	0f 90       	pop	r0
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	c7 30       	cpi	r28, 0x07	; 7
    11ec:	d1 05       	cpc	r29, r1
    11ee:	31 f7       	brne	.-52     	; 0x11bc <highscore_print+0x44>
		oled_set_write_position(i + 1, 16);
		oled_printf("%d.  %d", i + 1, highscores[i]);
	}
	while(joy_get_direction() != LEFT){
    11f0:	0e 94 51 05 	call	0xaa2	; 0xaa2 <joy_get_direction>
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	29 f0       	breq	.+10     	; 0x1202 <highscore_print+0x8a>
    11f8:	e0 e1       	ldi	r30, 0x10	; 16
    11fa:	ea 95       	dec	r30
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <highscore_print+0x82>
    11fe:	00 c0       	rjmp	.+0      	; 0x1200 <highscore_print+0x88>
    1200:	f7 cf       	rjmp	.-18     	; 0x11f0 <highscore_print+0x78>
		_delay_us(10);
	}
	interface_print(interface_get_current_menu());
    1202:	0e 94 3e 0b 	call	0x167c	; 0x167c <interface_get_current_menu>
    1206:	df 91       	pop	r29
    1208:	cf 91       	pop	r28
    120a:	1f 91       	pop	r17
    120c:	0f 91       	pop	r16
    120e:	ff 90       	pop	r15
    1210:	ef 90       	pop	r14
		oled_printf("%d.  %d", i + 1, highscores[i]);
	}
	while(joy_get_direction() != LEFT){
		_delay_us(10);
	}
	interface_print(interface_get_current_menu());
    1212:	0c 94 80 09 	jmp	0x1300	; 0x1300 <interface_print>

00001216 <main>:
#include "Interface/interface.h"

int main(void)
{
	
	USART_Init(MYUBRR);
    1216:	8f e1       	ldi	r24, 0x1F	; 31
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 01 04 	call	0x802	; 0x802 <USART_Init>
	fdevopen((int (*)(char,  struct __file *))USART_Transmit, (int (*)(struct __file *))USART_Receive);
    121e:	6e e0       	ldi	r22, 0x0E	; 14
    1220:	74 e0       	ldi	r23, 0x04	; 4
    1222:	8a e0       	ldi	r24, 0x0A	; 10
    1224:	94 e0       	ldi	r25, 0x04	; 4
    1226:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <fdevopen>
	printf("UART setup done\n");
    122a:	8a e0       	ldi	r24, 0x0A	; 10
    122c:	92 e0       	ldi	r25, 0x02	; 2
    122e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
	SRAM_init();
    1232:	0e 94 21 04 	call	0x842	; 0x842 <SRAM_init>
	printf("SRAM setup done\n");
    1236:	8a e1       	ldi	r24, 0x1A	; 26
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
	joy_init();
    123e:	0e 94 9a 04 	call	0x934	; 0x934 <joy_init>
	printf("joy setup done\n");
    1242:	8a e2       	ldi	r24, 0x2A	; 42
    1244:	92 e0       	ldi	r25, 0x02	; 2
    1246:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
	oled_init();
    124a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <oled_init>
	can_init();
    124e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	timer_init();
    1252:	0e 94 73 06 	call	0xce6	; 0xce6 <timer_init>
	ir_init();
    1256:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <ir_init>
	highscore_init();
    125a:	0e 94 4a 08 	call	0x1094	; 0x1094 <highscore_init>
	game_init(10);
    125e:	8a e0       	ldi	r24, 0x0A	; 10
    1260:	0e 94 fd 06 	call	0xdfa	; 0xdfa <game_init>
	printf("Initialization done\n");
    1264:	89 e3       	ldi	r24, 0x39	; 57
    1266:	92 e0       	ldi	r25, 0x02	; 2
    1268:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <puts>
	interface_init();
    126c:	0e 94 c2 09 	call	0x1384	; 0x1384 <interface_init>
    while(1)
        {	
			interface_select();
    1270:	0e 94 c2 0a 	call	0x1584	; 0x1584 <interface_select>
    1274:	fd cf       	rjmp	.-6      	; 0x1270 <main+0x5a>

00001276 <new_Menu>:
	select_pos = 1;
	current_menu = mainMenu;
	
	interface_print(mainMenu);
}
Menu* new_Menu(char* title, void(*action)(void), uint8_t num_submenus){
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	1f 92       	push	r1
    1288:	cd b7       	in	r28, 0x3d	; 61
    128a:	de b7       	in	r29, 0x3e	; 62
    128c:	8c 01       	movw	r16, r24
    128e:	7b 01       	movw	r14, r22
	Menu* m = malloc(sizeof(Menu));
    1290:	89 e0       	ldi	r24, 0x09	; 9
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	49 83       	std	Y+1, r20	; 0x01
    1296:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <malloc>
    129a:	6c 01       	movw	r12, r24
	
	m->title = title;
    129c:	fc 01       	movw	r30, r24
    129e:	16 83       	std	Z+6, r17	; 0x06
    12a0:	05 83       	std	Z+5, r16	; 0x05
	m->num_submenus = num_submenus;
    12a2:	49 81       	ldd	r20, Y+1	; 0x01
    12a4:	40 83       	st	Z, r20
	m->action = action;
    12a6:	f0 86       	std	Z+8, r15	; 0x08
    12a8:	e7 82       	std	Z+7, r14	; 0x07
	m->submenus = malloc(sizeof(Menu)*num_submenus);
    12aa:	f9 e0       	ldi	r31, 0x09	; 9
    12ac:	4f 9f       	mul	r20, r31
    12ae:	c0 01       	movw	r24, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <malloc>
    12b6:	f6 01       	movw	r30, r12
    12b8:	92 83       	std	Z+2, r25	; 0x02
    12ba:	81 83       	std	Z+1, r24	; 0x01
	return m;
}
    12bc:	c6 01       	movw	r24, r12
    12be:	0f 90       	pop	r0
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	08 95       	ret

000012d2 <interface_draw_selector>:
	}
	
	interface_draw_selector(1);
	
}
void interface_draw_selector(int pos){
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	ec 01       	movw	r28, r24
	oled_set_start_col(0);
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
	oled_write(' ');
    12e0:	80 e2       	ldi	r24, 0x20	; 32
    12e2:	0e 94 99 05 	call	0xb32	; 0xb32 <oled_write>
	
	oled_set_write_position(pos, 0);
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	ce 01       	movw	r24, r28
    12ec:	0e 94 14 06 	call	0xc28	; 0xc28 <oled_set_write_position>
	oled_write_selector();
    12f0:	0e 94 ad 05 	call	0xb5a	; 0xb5a <oled_write_selector>
	
	oled_set_start_col(8);
    12f4:	88 e0       	ldi	r24, 0x08	; 8
    12f6:	90 e0       	ldi	r25, 0x00	; 0
}
    12f8:	df 91       	pop	r29
    12fa:	cf 91       	pop	r28
	oled_write(' ');
	
	oled_set_write_position(pos, 0);
	oled_write_selector();
	
	oled_set_start_col(8);
    12fc:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <oled_set_start_col>

00001300 <interface_print>:
	m->num_submenus = num_submenus;
	m->action = action;
	m->submenus = malloc(sizeof(Menu)*num_submenus);
	return m;
}
void interface_print(Menu *menu){
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	8c 01       	movw	r16, r24
	oled_clear_screen();
    130e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <oled_clear_screen>
	oled_set_start_col(0);
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
	oled_write_string(menu->title, 0);
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	70 e0       	ldi	r23, 0x00	; 0
    131e:	d8 01       	movw	r26, r16
    1320:	15 96       	adiw	r26, 0x05	; 5
    1322:	8d 91       	ld	r24, X+
    1324:	9c 91       	ld	r25, X
    1326:	16 97       	sbiw	r26, 0x06	; 6
    1328:	0e 94 bf 05 	call	0xb7e	; 0xb7e <oled_write_string>
	
	for(int i = 0; i < menu->num_submenus; i++){
    132c:	e1 2c       	mov	r14, r1
    132e:	f1 2c       	mov	r15, r1
    1330:	c0 e0       	ldi	r28, 0x00	; 0
    1332:	d0 e0       	ldi	r29, 0x00	; 0
    1334:	f8 01       	movw	r30, r16
    1336:	80 81       	ld	r24, Z
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	c8 17       	cp	r28, r24
    133c:	d9 07       	cpc	r29, r25
    133e:	c4 f4       	brge	.+48     	; 0x1370 <interface_print+0x70>
		oled_set_start_col(10);
    1340:	8a e0       	ldi	r24, 0x0A	; 10
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	0e 94 b7 05 	call	0xb6e	; 0xb6e <oled_set_start_col>
		oled_write_string(menu->submenus[i]->title, i + 1);
    1348:	21 96       	adiw	r28, 0x01	; 1
    134a:	d8 01       	movw	r26, r16
    134c:	11 96       	adiw	r26, 0x01	; 1
    134e:	ed 91       	ld	r30, X+
    1350:	fc 91       	ld	r31, X
    1352:	12 97       	sbiw	r26, 0x02	; 2
    1354:	ee 0d       	add	r30, r14
    1356:	ff 1d       	adc	r31, r15
    1358:	01 90       	ld	r0, Z+
    135a:	f0 81       	ld	r31, Z
    135c:	e0 2d       	mov	r30, r0
    135e:	be 01       	movw	r22, r28
    1360:	85 81       	ldd	r24, Z+5	; 0x05
    1362:	96 81       	ldd	r25, Z+6	; 0x06
    1364:	0e 94 bf 05 	call	0xb7e	; 0xb7e <oled_write_string>
    1368:	b2 e0       	ldi	r27, 0x02	; 2
    136a:	eb 0e       	add	r14, r27
    136c:	f1 1c       	adc	r15, r1
    136e:	e2 cf       	rjmp	.-60     	; 0x1334 <interface_print+0x34>
	}
	
	interface_draw_selector(1);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
	
}
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
	for(int i = 0; i < menu->num_submenus; i++){
		oled_set_start_col(10);
		oled_write_string(menu->submenus[i]->title, i + 1);
	}
	
	interface_draw_selector(1);
    1380:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <interface_draw_selector>

00001384 <interface_init>:


int select_pos;
Menu* current_menu;

void interface_init(){
    1384:	2f 92       	push	r2
    1386:	3f 92       	push	r3
    1388:	4f 92       	push	r4
    138a:	5f 92       	push	r5
    138c:	6f 92       	push	r6
    138e:	7f 92       	push	r7
    1390:	8f 92       	push	r8
    1392:	9f 92       	push	r9
    1394:	af 92       	push	r10
    1396:	bf 92       	push	r11
    1398:	cf 92       	push	r12
    139a:	df 92       	push	r13
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <interface_init+0x26>
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <interface_init+0x28>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
	Menu *mainMenu = new_Menu("Main menu", NULL, 4);
    13b0:	44 e0       	ldi	r20, 0x04	; 4
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	70 e0       	ldi	r23, 0x00	; 0
    13b6:	8d e4       	ldi	r24, 0x4D	; 77
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    13be:	9c 83       	std	Y+4, r25	; 0x04
    13c0:	8b 83       	std	Y+3, r24	; 0x03
	
	Menu *menu0 = new_Menu("Play game!", game_main, 0);
    13c2:	40 e0       	ldi	r20, 0x00	; 0
    13c4:	67 ef       	ldi	r22, 0xF7	; 247
    13c6:	77 e0       	ldi	r23, 0x07	; 7
    13c8:	87 e5       	ldi	r24, 0x57	; 87
    13ca:	92 e0       	ldi	r25, 0x02	; 2
    13cc:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    13d0:	5c 01       	movw	r10, r24
	
	Menu *menu1 = new_Menu("High scores!", highscore_print, 0);
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	6c eb       	ldi	r22, 0xBC	; 188
    13d6:	78 e0       	ldi	r23, 0x08	; 8
    13d8:	82 e6       	ldi	r24, 0x62	; 98
    13da:	92 e0       	ldi	r25, 0x02	; 2
    13dc:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    13e0:	9c 01       	movw	r18, r24
	
	Menu *menu2 = new_Menu("Screen options", NULL, 1);
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	8f e6       	ldi	r24, 0x6F	; 111
    13ea:	92 e0       	ldi	r25, 0x02	; 2
    13ec:	29 83       	std	Y+1, r18	; 0x01
    13ee:	3a 83       	std	Y+2, r19	; 0x02
    13f0:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    13f4:	6c 01       	movw	r12, r24
	Menu *menu21 = new_Menu("Brightness", oled_set_brightness, 0);
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	6e e2       	ldi	r22, 0x2E	; 46
    13fa:	76 e0       	ldi	r23, 0x06	; 6
    13fc:	8e e7       	ldi	r24, 0x7E	; 126
    13fe:	92 e0       	ldi	r25, 0x02	; 2
    1400:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    1404:	3c 01       	movw	r6, r24
	
	Menu *menu3 = new_Menu("Game options", NULL, 2);
    1406:	42 e0       	ldi	r20, 0x02	; 2
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	89 e8       	ldi	r24, 0x89	; 137
    140e:	92 e0       	ldi	r25, 0x02	; 2
    1410:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    1414:	7c 01       	movw	r14, r24
	Menu *menu31 = new_Menu("Set difficulty", NULL, 3);
    1416:	43 e0       	ldi	r20, 0x03	; 3
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	70 e0       	ldi	r23, 0x00	; 0
    141c:	86 e9       	ldi	r24, 0x96	; 150
    141e:	92 e0       	ldi	r25, 0x02	; 2
    1420:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    1424:	8c 01       	movw	r16, r24
	Menu *menu32 = new_Menu("Reset Hi-scores", highscore_resetAll, 0);
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	64 ea       	ldi	r22, 0xA4	; 164
    142a:	78 e0       	ldi	r23, 0x08	; 8
    142c:	85 ea       	ldi	r24, 0xA5	; 165
    142e:	92 e0       	ldi	r25, 0x02	; 2
    1430:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    1434:	4c 01       	movw	r8, r24
	Menu *menu311 = new_Menu("Medium", game_medium_difficulty, 0);
    1436:	40 e0       	ldi	r20, 0x00	; 0
    1438:	69 e2       	ldi	r22, 0x29	; 41
    143a:	78 e0       	ldi	r23, 0x08	; 8
    143c:	85 eb       	ldi	r24, 0xB5	; 181
    143e:	92 e0       	ldi	r25, 0x02	; 2
    1440:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    1444:	2c 01       	movw	r4, r24
	Menu *menu312 = new_Menu("Hard", game_hard_difficulty, 0);
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	69 e1       	ldi	r22, 0x19	; 25
    144a:	78 e0       	ldi	r23, 0x08	; 8
    144c:	8c eb       	ldi	r24, 0xBC	; 188
    144e:	92 e0       	ldi	r25, 0x02	; 2
    1450:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
    1454:	1c 01       	movw	r2, r24
	Menu *menu313 = new_Menu("Impossible", game_impossible_difficulty, 0);
    1456:	40 e0       	ldi	r20, 0x00	; 0
    1458:	69 e3       	ldi	r22, 0x39	; 57
    145a:	78 e0       	ldi	r23, 0x08	; 8
    145c:	81 ec       	ldi	r24, 0xC1	; 193
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	0e 94 3b 09 	call	0x1276	; 0x1276 <new_Menu>
	
	mainMenu->submenus[0] = menu0, mainMenu->submenus[1] = menu1;
    1464:	ab 81       	ldd	r26, Y+3	; 0x03
    1466:	bc 81       	ldd	r27, Y+4	; 0x04
    1468:	11 96       	adiw	r26, 0x01	; 1
    146a:	ed 91       	ld	r30, X+
    146c:	fc 91       	ld	r31, X
    146e:	12 97       	sbiw	r26, 0x02	; 2
    1470:	b1 82       	std	Z+1, r11	; 0x01
    1472:	a0 82       	st	Z, r10
    1474:	11 96       	adiw	r26, 0x01	; 1
    1476:	ed 91       	ld	r30, X+
    1478:	fc 91       	ld	r31, X
    147a:	12 97       	sbiw	r26, 0x02	; 2
    147c:	29 81       	ldd	r18, Y+1	; 0x01
    147e:	3a 81       	ldd	r19, Y+2	; 0x02
    1480:	33 83       	std	Z+3, r19	; 0x03
    1482:	22 83       	std	Z+2, r18	; 0x02
	mainMenu->submenus[2] = menu2, mainMenu->submenus[3] = menu3;
    1484:	11 96       	adiw	r26, 0x01	; 1
    1486:	ed 91       	ld	r30, X+
    1488:	fc 91       	ld	r31, X
    148a:	12 97       	sbiw	r26, 0x02	; 2
    148c:	d5 82       	std	Z+5, r13	; 0x05
    148e:	c4 82       	std	Z+4, r12	; 0x04
    1490:	11 96       	adiw	r26, 0x01	; 1
    1492:	ed 91       	ld	r30, X+
    1494:	fc 91       	ld	r31, X
    1496:	12 97       	sbiw	r26, 0x02	; 2
    1498:	f7 82       	std	Z+7, r15	; 0x07
    149a:	e6 82       	std	Z+6, r14	; 0x06
	mainMenu->prev = NULL;
    149c:	14 96       	adiw	r26, 0x04	; 4
    149e:	1c 92       	st	X, r1
    14a0:	1e 92       	st	-X, r1
    14a2:	13 97       	sbiw	r26, 0x03	; 3
	
	menu0->submenus = NULL, menu0->prev = NULL;
    14a4:	f5 01       	movw	r30, r10
    14a6:	12 82       	std	Z+2, r1	; 0x02
    14a8:	11 82       	std	Z+1, r1	; 0x01
    14aa:	14 82       	std	Z+4, r1	; 0x04
    14ac:	13 82       	std	Z+3, r1	; 0x03
	
	menu2->submenus[0] = menu21;
    14ae:	d6 01       	movw	r26, r12
    14b0:	11 96       	adiw	r26, 0x01	; 1
    14b2:	ed 91       	ld	r30, X+
    14b4:	fc 91       	ld	r31, X
    14b6:	12 97       	sbiw	r26, 0x02	; 2
    14b8:	71 82       	std	Z+1, r7	; 0x01
    14ba:	60 82       	st	Z, r6
	menu2->prev = mainMenu;
    14bc:	2b 81       	ldd	r18, Y+3	; 0x03
    14be:	3c 81       	ldd	r19, Y+4	; 0x04
    14c0:	14 96       	adiw	r26, 0x04	; 4
    14c2:	3c 93       	st	X, r19
    14c4:	2e 93       	st	-X, r18
    14c6:	13 97       	sbiw	r26, 0x03	; 3
	menu21->submenus = NULL;
    14c8:	d3 01       	movw	r26, r6
    14ca:	12 96       	adiw	r26, 0x02	; 2
    14cc:	1c 92       	st	X, r1
    14ce:	1e 92       	st	-X, r1
    14d0:	11 97       	sbiw	r26, 0x01	; 1
	
	//Set difficulty
	menu3->prev = mainMenu;
    14d2:	f7 01       	movw	r30, r14
    14d4:	34 83       	std	Z+4, r19	; 0x04
    14d6:	23 83       	std	Z+3, r18	; 0x03
	menu3->submenus[0] = menu31, menu3->submenus[1] = menu32;
    14d8:	01 80       	ldd	r0, Z+1	; 0x01
    14da:	f2 81       	ldd	r31, Z+2	; 0x02
    14dc:	e0 2d       	mov	r30, r0
    14de:	11 83       	std	Z+1, r17	; 0x01
    14e0:	00 83       	st	Z, r16
    14e2:	d7 01       	movw	r26, r14
    14e4:	11 96       	adiw	r26, 0x01	; 1
    14e6:	ed 91       	ld	r30, X+
    14e8:	fc 91       	ld	r31, X
    14ea:	12 97       	sbiw	r26, 0x02	; 2
    14ec:	93 82       	std	Z+3, r9	; 0x03
    14ee:	82 82       	std	Z+2, r8	; 0x02
	menu31->submenus[0] = menu311, menu31->submenus[1] = menu312, menu31->submenus[2] = menu313;
    14f0:	d8 01       	movw	r26, r16
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	ed 91       	ld	r30, X+
    14f6:	fc 91       	ld	r31, X
    14f8:	12 97       	sbiw	r26, 0x02	; 2
    14fa:	51 82       	std	Z+1, r5	; 0x01
    14fc:	40 82       	st	Z, r4
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	12 97       	sbiw	r26, 0x02	; 2
    1506:	33 82       	std	Z+3, r3	; 0x03
    1508:	22 82       	std	Z+2, r2	; 0x02
    150a:	11 96       	adiw	r26, 0x01	; 1
    150c:	ed 91       	ld	r30, X+
    150e:	fc 91       	ld	r31, X
    1510:	12 97       	sbiw	r26, 0x02	; 2
    1512:	95 83       	std	Z+5, r25	; 0x05
    1514:	84 83       	std	Z+4, r24	; 0x04
	menu31->prev = mainMenu;
    1516:	14 96       	adiw	r26, 0x04	; 4
    1518:	3c 93       	st	X, r19
    151a:	2e 93       	st	-X, r18
    151c:	13 97       	sbiw	r26, 0x03	; 3
	menu32->submenus=NULL;
    151e:	f4 01       	movw	r30, r8
    1520:	12 82       	std	Z+2, r1	; 0x02
    1522:	11 82       	std	Z+1, r1	; 0x01
	menu311->submenus = NULL, menu312->submenus = NULL, menu313->submenus = NULL;
    1524:	d2 01       	movw	r26, r4
    1526:	12 96       	adiw	r26, 0x02	; 2
    1528:	1c 92       	st	X, r1
    152a:	1e 92       	st	-X, r1
    152c:	11 97       	sbiw	r26, 0x01	; 1
    152e:	f1 01       	movw	r30, r2
    1530:	12 82       	std	Z+2, r1	; 0x02
    1532:	11 82       	std	Z+1, r1	; 0x01
    1534:	dc 01       	movw	r26, r24
    1536:	12 96       	adiw	r26, 0x02	; 2
    1538:	1c 92       	st	X, r1
    153a:	1e 92       	st	-X, r1
    153c:	11 97       	sbiw	r26, 0x01	; 1
	
	select_pos = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	90 93 e7 02 	sts	0x02E7, r25
    1546:	80 93 e6 02 	sts	0x02E6, r24
	current_menu = mainMenu;
    154a:	30 93 e9 02 	sts	0x02E9, r19
    154e:	20 93 e8 02 	sts	0x02E8, r18
	
	interface_print(mainMenu);
    1552:	c9 01       	movw	r24, r18
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	1f 91       	pop	r17
    1562:	0f 91       	pop	r16
    1564:	ff 90       	pop	r15
    1566:	ef 90       	pop	r14
    1568:	df 90       	pop	r13
    156a:	cf 90       	pop	r12
    156c:	bf 90       	pop	r11
    156e:	af 90       	pop	r10
    1570:	9f 90       	pop	r9
    1572:	8f 90       	pop	r8
    1574:	7f 90       	pop	r7
    1576:	6f 90       	pop	r6
    1578:	5f 90       	pop	r5
    157a:	4f 90       	pop	r4
    157c:	3f 90       	pop	r3
    157e:	2f 90       	pop	r2
	menu311->submenus = NULL, menu312->submenus = NULL, menu313->submenus = NULL;
	
	select_pos = 1;
	current_menu = mainMenu;
	
	interface_print(mainMenu);
    1580:	0c 94 80 09 	jmp	0x1300	; 0x1300 <interface_print>

00001584 <interface_select>:
	
	oled_set_start_col(8);
}
void interface_select(){ //version created using delay, 0,25s
	
	if(joy_get_direction()!=NEUTRAL){
    1584:	0e 94 51 05 	call	0xaa2	; 0xaa2 <joy_get_direction>
    1588:	88 23       	and	r24, r24
    158a:	09 f4       	brne	.+2      	; 0x158e <interface_select+0xa>
    158c:	76 c0       	rjmp	.+236    	; 0x167a <interface_select+0xf6>
		switch(joy_get_direction()){
    158e:	0e 94 51 05 	call	0xaa2	; 0xaa2 <joy_get_direction>
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	a1 f0       	breq	.+40     	; 0x15be <interface_select+0x3a>
    1596:	18 f4       	brcc	.+6      	; 0x159e <interface_select+0x1a>
    1598:	81 30       	cpi	r24, 0x01	; 1
    159a:	39 f0       	breq	.+14     	; 0x15aa <interface_select+0x26>
    159c:	65 c0       	rjmp	.+202    	; 0x1668 <interface_select+0xe4>
    159e:	83 30       	cpi	r24, 0x03	; 3
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <interface_select+0x20>
    15a2:	4e c0       	rjmp	.+156    	; 0x1640 <interface_select+0xbc>
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	09 f1       	breq	.+66     	; 0x15ea <interface_select+0x66>
    15a8:	5f c0       	rjmp	.+190    	; 0x1668 <interface_select+0xe4>
			case UP:
			//Move selector up if it's not on line 0.
				if(select_pos != 1){
    15aa:	80 91 e6 02 	lds	r24, 0x02E6
    15ae:	90 91 e7 02 	lds	r25, 0x02E7
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 05       	cpc	r25, r1
    15b6:	09 f4       	brne	.+2      	; 0x15ba <interface_select+0x36>
    15b8:	57 c0       	rjmp	.+174    	; 0x1668 <interface_select+0xe4>
					select_pos--;
    15ba:	01 97       	sbiw	r24, 0x01	; 1
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <interface_select+0x58>
				}
				break;
				
			case DOWN:
				//Move selector down if it's not on line 7.
				if(current_menu->num_submenus != select_pos){
    15be:	80 91 e6 02 	lds	r24, 0x02E6
    15c2:	90 91 e7 02 	lds	r25, 0x02E7
    15c6:	e0 91 e8 02 	lds	r30, 0x02E8
    15ca:	f0 91 e9 02 	lds	r31, 0x02E9
    15ce:	20 81       	ld	r18, Z
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	28 17       	cp	r18, r24
    15d4:	39 07       	cpc	r19, r25
    15d6:	09 f4       	brne	.+2      	; 0x15da <interface_select+0x56>
    15d8:	47 c0       	rjmp	.+142    	; 0x1668 <interface_select+0xe4>
					(select_pos)++;
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	90 93 e7 02 	sts	0x02E7, r25
    15e0:	80 93 e6 02 	sts	0x02E6, r24
					interface_draw_selector(select_pos);
    15e4:	0e 94 69 09 	call	0x12d2	; 0x12d2 <interface_draw_selector>
    15e8:	3f c0       	rjmp	.+126    	; 0x1668 <interface_select+0xe4>
				}
				break;
				
			case RIGHT:
				//Check for Menu pointer and go to nex Menu.
				if(current_menu->submenus[select_pos-1]->num_submenus){
    15ea:	e0 91 e8 02 	lds	r30, 0x02E8
    15ee:	f0 91 e9 02 	lds	r31, 0x02E9
    15f2:	80 91 e6 02 	lds	r24, 0x02E6
    15f6:	90 91 e7 02 	lds	r25, 0x02E7
    15fa:	81 50       	subi	r24, 0x01	; 1
    15fc:	90 48       	sbci	r25, 0x80	; 128
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	01 80       	ldd	r0, Z+1	; 0x01
    1604:	f2 81       	ldd	r31, Z+2	; 0x02
    1606:	e0 2d       	mov	r30, r0
    1608:	e8 0f       	add	r30, r24
    160a:	f9 1f       	adc	r31, r25
    160c:	80 81       	ld	r24, Z
    160e:	91 81       	ldd	r25, Z+1	; 0x01
    1610:	dc 01       	movw	r26, r24
    1612:	2c 91       	ld	r18, X
    1614:	22 23       	and	r18, r18
    1616:	69 f0       	breq	.+26     	; 0x1632 <interface_select+0xae>
					current_menu = current_menu->submenus[select_pos-1];
    1618:	90 93 e9 02 	sts	0x02E9, r25
    161c:	80 93 e8 02 	sts	0x02E8, r24
					interface_print(current_menu);
    1620:	0e 94 80 09 	call	0x1300	; 0x1300 <interface_print>
					select_pos = 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	90 93 e7 02 	sts	0x02E7, r25
    162c:	80 93 e6 02 	sts	0x02E6, r24
    1630:	1b c0       	rjmp	.+54     	; 0x1668 <interface_select+0xe4>
				
				}
				//Found function pointer.
				else{
					current_menu->submenus[select_pos-1]->action();
    1632:	dc 01       	movw	r26, r24
    1634:	17 96       	adiw	r26, 0x07	; 7
    1636:	ed 91       	ld	r30, X+
    1638:	fc 91       	ld	r31, X
    163a:	18 97       	sbiw	r26, 0x08	; 8
    163c:	09 95       	icall
    163e:	14 c0       	rjmp	.+40     	; 0x1668 <interface_select+0xe4>
			
				break;
			
			case LEFT:
				//Go to previous menu.
				if(current_menu->prev){
    1640:	e0 91 e8 02 	lds	r30, 0x02E8
    1644:	f0 91 e9 02 	lds	r31, 0x02E9
    1648:	83 81       	ldd	r24, Z+3	; 0x03
    164a:	94 81       	ldd	r25, Z+4	; 0x04
    164c:	00 97       	sbiw	r24, 0x00	; 0
    164e:	61 f0       	breq	.+24     	; 0x1668 <interface_select+0xe4>
					select_pos = 1;
    1650:	21 e0       	ldi	r18, 0x01	; 1
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	30 93 e7 02 	sts	0x02E7, r19
    1658:	20 93 e6 02 	sts	0x02E6, r18
					current_menu = current_menu->prev;
    165c:	90 93 e9 02 	sts	0x02E9, r25
    1660:	80 93 e8 02 	sts	0x02E8, r24
					interface_print(current_menu);
    1664:	0e 94 80 09 	call	0x1300	; 0x1300 <interface_print>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1668:	bf ef       	ldi	r27, 0xFF	; 255
    166a:	ef eb       	ldi	r30, 0xBF	; 191
    166c:	f3 e0       	ldi	r31, 0x03	; 3
    166e:	b1 50       	subi	r27, 0x01	; 1
    1670:	e0 40       	sbci	r30, 0x00	; 0
    1672:	f0 40       	sbci	r31, 0x00	; 0
    1674:	e1 f7       	brne	.-8      	; 0x166e <interface_select+0xea>
    1676:	00 c0       	rjmp	.+0      	; 0x1678 <interface_select+0xf4>
    1678:	00 00       	nop
    167a:	08 95       	ret

0000167c <interface_get_current_menu>:
	}
}

Menu* interface_get_current_menu(){
	return current_menu;
    167c:	80 91 e8 02 	lds	r24, 0x02E8
    1680:	90 91 e9 02 	lds	r25, 0x02E9
    1684:	08 95       	ret

00001686 <__subsf3>:
    1686:	50 58       	subi	r21, 0x80	; 128

00001688 <__addsf3>:
    1688:	bb 27       	eor	r27, r27
    168a:	aa 27       	eor	r26, r26
    168c:	0e d0       	rcall	.+28     	; 0x16aa <__addsf3x>
    168e:	4d c1       	rjmp	.+666    	; 0x192a <__fp_round>
    1690:	3e d1       	rcall	.+636    	; 0x190e <__fp_pscA>
    1692:	30 f0       	brcs	.+12     	; 0x16a0 <__addsf3+0x18>
    1694:	43 d1       	rcall	.+646    	; 0x191c <__fp_pscB>
    1696:	20 f0       	brcs	.+8      	; 0x16a0 <__addsf3+0x18>
    1698:	31 f4       	brne	.+12     	; 0x16a6 <__addsf3+0x1e>
    169a:	9f 3f       	cpi	r25, 0xFF	; 255
    169c:	11 f4       	brne	.+4      	; 0x16a2 <__addsf3+0x1a>
    169e:	1e f4       	brtc	.+6      	; 0x16a6 <__addsf3+0x1e>
    16a0:	33 c1       	rjmp	.+614    	; 0x1908 <__fp_nan>
    16a2:	0e f4       	brtc	.+2      	; 0x16a6 <__addsf3+0x1e>
    16a4:	e0 95       	com	r30
    16a6:	e7 fb       	bst	r30, 7
    16a8:	29 c1       	rjmp	.+594    	; 0x18fc <__fp_inf>

000016aa <__addsf3x>:
    16aa:	e9 2f       	mov	r30, r25
    16ac:	4f d1       	rcall	.+670    	; 0x194c <__fp_split3>
    16ae:	80 f3       	brcs	.-32     	; 0x1690 <__addsf3+0x8>
    16b0:	ba 17       	cp	r27, r26
    16b2:	62 07       	cpc	r22, r18
    16b4:	73 07       	cpc	r23, r19
    16b6:	84 07       	cpc	r24, r20
    16b8:	95 07       	cpc	r25, r21
    16ba:	18 f0       	brcs	.+6      	; 0x16c2 <__addsf3x+0x18>
    16bc:	71 f4       	brne	.+28     	; 0x16da <__addsf3x+0x30>
    16be:	9e f5       	brtc	.+102    	; 0x1726 <__addsf3x+0x7c>
    16c0:	67 c1       	rjmp	.+718    	; 0x1990 <__fp_zero>
    16c2:	0e f4       	brtc	.+2      	; 0x16c6 <__addsf3x+0x1c>
    16c4:	e0 95       	com	r30
    16c6:	0b 2e       	mov	r0, r27
    16c8:	ba 2f       	mov	r27, r26
    16ca:	a0 2d       	mov	r26, r0
    16cc:	0b 01       	movw	r0, r22
    16ce:	b9 01       	movw	r22, r18
    16d0:	90 01       	movw	r18, r0
    16d2:	0c 01       	movw	r0, r24
    16d4:	ca 01       	movw	r24, r20
    16d6:	a0 01       	movw	r20, r0
    16d8:	11 24       	eor	r1, r1
    16da:	ff 27       	eor	r31, r31
    16dc:	59 1b       	sub	r21, r25
    16de:	99 f0       	breq	.+38     	; 0x1706 <__addsf3x+0x5c>
    16e0:	59 3f       	cpi	r21, 0xF9	; 249
    16e2:	50 f4       	brcc	.+20     	; 0x16f8 <__addsf3x+0x4e>
    16e4:	50 3e       	cpi	r21, 0xE0	; 224
    16e6:	68 f1       	brcs	.+90     	; 0x1742 <__addsf3x+0x98>
    16e8:	1a 16       	cp	r1, r26
    16ea:	f0 40       	sbci	r31, 0x00	; 0
    16ec:	a2 2f       	mov	r26, r18
    16ee:	23 2f       	mov	r18, r19
    16f0:	34 2f       	mov	r19, r20
    16f2:	44 27       	eor	r20, r20
    16f4:	58 5f       	subi	r21, 0xF8	; 248
    16f6:	f3 cf       	rjmp	.-26     	; 0x16de <__addsf3x+0x34>
    16f8:	46 95       	lsr	r20
    16fa:	37 95       	ror	r19
    16fc:	27 95       	ror	r18
    16fe:	a7 95       	ror	r26
    1700:	f0 40       	sbci	r31, 0x00	; 0
    1702:	53 95       	inc	r21
    1704:	c9 f7       	brne	.-14     	; 0x16f8 <__addsf3x+0x4e>
    1706:	7e f4       	brtc	.+30     	; 0x1726 <__addsf3x+0x7c>
    1708:	1f 16       	cp	r1, r31
    170a:	ba 0b       	sbc	r27, r26
    170c:	62 0b       	sbc	r22, r18
    170e:	73 0b       	sbc	r23, r19
    1710:	84 0b       	sbc	r24, r20
    1712:	ba f0       	brmi	.+46     	; 0x1742 <__addsf3x+0x98>
    1714:	91 50       	subi	r25, 0x01	; 1
    1716:	a1 f0       	breq	.+40     	; 0x1740 <__addsf3x+0x96>
    1718:	ff 0f       	add	r31, r31
    171a:	bb 1f       	adc	r27, r27
    171c:	66 1f       	adc	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	c2 f7       	brpl	.-16     	; 0x1714 <__addsf3x+0x6a>
    1724:	0e c0       	rjmp	.+28     	; 0x1742 <__addsf3x+0x98>
    1726:	ba 0f       	add	r27, r26
    1728:	62 1f       	adc	r22, r18
    172a:	73 1f       	adc	r23, r19
    172c:	84 1f       	adc	r24, r20
    172e:	48 f4       	brcc	.+18     	; 0x1742 <__addsf3x+0x98>
    1730:	87 95       	ror	r24
    1732:	77 95       	ror	r23
    1734:	67 95       	ror	r22
    1736:	b7 95       	ror	r27
    1738:	f7 95       	ror	r31
    173a:	9e 3f       	cpi	r25, 0xFE	; 254
    173c:	08 f0       	brcs	.+2      	; 0x1740 <__addsf3x+0x96>
    173e:	b3 cf       	rjmp	.-154    	; 0x16a6 <__addsf3+0x1e>
    1740:	93 95       	inc	r25
    1742:	88 0f       	add	r24, r24
    1744:	08 f0       	brcs	.+2      	; 0x1748 <__addsf3x+0x9e>
    1746:	99 27       	eor	r25, r25
    1748:	ee 0f       	add	r30, r30
    174a:	97 95       	ror	r25
    174c:	87 95       	ror	r24
    174e:	08 95       	ret

00001750 <__divsf3>:
    1750:	0c d0       	rcall	.+24     	; 0x176a <__divsf3x>
    1752:	eb c0       	rjmp	.+470    	; 0x192a <__fp_round>
    1754:	e3 d0       	rcall	.+454    	; 0x191c <__fp_pscB>
    1756:	40 f0       	brcs	.+16     	; 0x1768 <__divsf3+0x18>
    1758:	da d0       	rcall	.+436    	; 0x190e <__fp_pscA>
    175a:	30 f0       	brcs	.+12     	; 0x1768 <__divsf3+0x18>
    175c:	21 f4       	brne	.+8      	; 0x1766 <__divsf3+0x16>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	19 f0       	breq	.+6      	; 0x1768 <__divsf3+0x18>
    1762:	cc c0       	rjmp	.+408    	; 0x18fc <__fp_inf>
    1764:	51 11       	cpse	r21, r1
    1766:	15 c1       	rjmp	.+554    	; 0x1992 <__fp_szero>
    1768:	cf c0       	rjmp	.+414    	; 0x1908 <__fp_nan>

0000176a <__divsf3x>:
    176a:	f0 d0       	rcall	.+480    	; 0x194c <__fp_split3>
    176c:	98 f3       	brcs	.-26     	; 0x1754 <__divsf3+0x4>

0000176e <__divsf3_pse>:
    176e:	99 23       	and	r25, r25
    1770:	c9 f3       	breq	.-14     	; 0x1764 <__divsf3+0x14>
    1772:	55 23       	and	r21, r21
    1774:	b1 f3       	breq	.-20     	; 0x1762 <__divsf3+0x12>
    1776:	95 1b       	sub	r25, r21
    1778:	55 0b       	sbc	r21, r21
    177a:	bb 27       	eor	r27, r27
    177c:	aa 27       	eor	r26, r26
    177e:	62 17       	cp	r22, r18
    1780:	73 07       	cpc	r23, r19
    1782:	84 07       	cpc	r24, r20
    1784:	38 f0       	brcs	.+14     	; 0x1794 <__divsf3_pse+0x26>
    1786:	9f 5f       	subi	r25, 0xFF	; 255
    1788:	5f 4f       	sbci	r21, 0xFF	; 255
    178a:	22 0f       	add	r18, r18
    178c:	33 1f       	adc	r19, r19
    178e:	44 1f       	adc	r20, r20
    1790:	aa 1f       	adc	r26, r26
    1792:	a9 f3       	breq	.-22     	; 0x177e <__divsf3_pse+0x10>
    1794:	33 d0       	rcall	.+102    	; 0x17fc <__divsf3_pse+0x8e>
    1796:	0e 2e       	mov	r0, r30
    1798:	3a f0       	brmi	.+14     	; 0x17a8 <__divsf3_pse+0x3a>
    179a:	e0 e8       	ldi	r30, 0x80	; 128
    179c:	30 d0       	rcall	.+96     	; 0x17fe <__divsf3_pse+0x90>
    179e:	91 50       	subi	r25, 0x01	; 1
    17a0:	50 40       	sbci	r21, 0x00	; 0
    17a2:	e6 95       	lsr	r30
    17a4:	00 1c       	adc	r0, r0
    17a6:	ca f7       	brpl	.-14     	; 0x179a <__divsf3_pse+0x2c>
    17a8:	29 d0       	rcall	.+82     	; 0x17fc <__divsf3_pse+0x8e>
    17aa:	fe 2f       	mov	r31, r30
    17ac:	27 d0       	rcall	.+78     	; 0x17fc <__divsf3_pse+0x8e>
    17ae:	66 0f       	add	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	88 1f       	adc	r24, r24
    17b4:	bb 1f       	adc	r27, r27
    17b6:	26 17       	cp	r18, r22
    17b8:	37 07       	cpc	r19, r23
    17ba:	48 07       	cpc	r20, r24
    17bc:	ab 07       	cpc	r26, r27
    17be:	b0 e8       	ldi	r27, 0x80	; 128
    17c0:	09 f0       	breq	.+2      	; 0x17c4 <__divsf3_pse+0x56>
    17c2:	bb 0b       	sbc	r27, r27
    17c4:	80 2d       	mov	r24, r0
    17c6:	bf 01       	movw	r22, r30
    17c8:	ff 27       	eor	r31, r31
    17ca:	93 58       	subi	r25, 0x83	; 131
    17cc:	5f 4f       	sbci	r21, 0xFF	; 255
    17ce:	2a f0       	brmi	.+10     	; 0x17da <__divsf3_pse+0x6c>
    17d0:	9e 3f       	cpi	r25, 0xFE	; 254
    17d2:	51 05       	cpc	r21, r1
    17d4:	68 f0       	brcs	.+26     	; 0x17f0 <__divsf3_pse+0x82>
    17d6:	92 c0       	rjmp	.+292    	; 0x18fc <__fp_inf>
    17d8:	dc c0       	rjmp	.+440    	; 0x1992 <__fp_szero>
    17da:	5f 3f       	cpi	r21, 0xFF	; 255
    17dc:	ec f3       	brlt	.-6      	; 0x17d8 <__divsf3_pse+0x6a>
    17de:	98 3e       	cpi	r25, 0xE8	; 232
    17e0:	dc f3       	brlt	.-10     	; 0x17d8 <__divsf3_pse+0x6a>
    17e2:	86 95       	lsr	r24
    17e4:	77 95       	ror	r23
    17e6:	67 95       	ror	r22
    17e8:	b7 95       	ror	r27
    17ea:	f7 95       	ror	r31
    17ec:	9f 5f       	subi	r25, 0xFF	; 255
    17ee:	c9 f7       	brne	.-14     	; 0x17e2 <__divsf3_pse+0x74>
    17f0:	88 0f       	add	r24, r24
    17f2:	91 1d       	adc	r25, r1
    17f4:	96 95       	lsr	r25
    17f6:	87 95       	ror	r24
    17f8:	97 f9       	bld	r25, 7
    17fa:	08 95       	ret
    17fc:	e1 e0       	ldi	r30, 0x01	; 1
    17fe:	66 0f       	add	r22, r22
    1800:	77 1f       	adc	r23, r23
    1802:	88 1f       	adc	r24, r24
    1804:	bb 1f       	adc	r27, r27
    1806:	62 17       	cp	r22, r18
    1808:	73 07       	cpc	r23, r19
    180a:	84 07       	cpc	r24, r20
    180c:	ba 07       	cpc	r27, r26
    180e:	20 f0       	brcs	.+8      	; 0x1818 <__divsf3_pse+0xaa>
    1810:	62 1b       	sub	r22, r18
    1812:	73 0b       	sbc	r23, r19
    1814:	84 0b       	sbc	r24, r20
    1816:	ba 0b       	sbc	r27, r26
    1818:	ee 1f       	adc	r30, r30
    181a:	88 f7       	brcc	.-30     	; 0x17fe <__divsf3_pse+0x90>
    181c:	e0 95       	com	r30
    181e:	08 95       	ret

00001820 <__fixsfsi>:
    1820:	04 d0       	rcall	.+8      	; 0x182a <__fixunssfsi>
    1822:	68 94       	set
    1824:	b1 11       	cpse	r27, r1
    1826:	b5 c0       	rjmp	.+362    	; 0x1992 <__fp_szero>
    1828:	08 95       	ret

0000182a <__fixunssfsi>:
    182a:	98 d0       	rcall	.+304    	; 0x195c <__fp_splitA>
    182c:	88 f0       	brcs	.+34     	; 0x1850 <__fixunssfsi+0x26>
    182e:	9f 57       	subi	r25, 0x7F	; 127
    1830:	90 f0       	brcs	.+36     	; 0x1856 <__fixunssfsi+0x2c>
    1832:	b9 2f       	mov	r27, r25
    1834:	99 27       	eor	r25, r25
    1836:	b7 51       	subi	r27, 0x17	; 23
    1838:	a0 f0       	brcs	.+40     	; 0x1862 <__fixunssfsi+0x38>
    183a:	d1 f0       	breq	.+52     	; 0x1870 <__fixunssfsi+0x46>
    183c:	66 0f       	add	r22, r22
    183e:	77 1f       	adc	r23, r23
    1840:	88 1f       	adc	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	1a f0       	brmi	.+6      	; 0x184c <__fixunssfsi+0x22>
    1846:	ba 95       	dec	r27
    1848:	c9 f7       	brne	.-14     	; 0x183c <__fixunssfsi+0x12>
    184a:	12 c0       	rjmp	.+36     	; 0x1870 <__fixunssfsi+0x46>
    184c:	b1 30       	cpi	r27, 0x01	; 1
    184e:	81 f0       	breq	.+32     	; 0x1870 <__fixunssfsi+0x46>
    1850:	9f d0       	rcall	.+318    	; 0x1990 <__fp_zero>
    1852:	b1 e0       	ldi	r27, 0x01	; 1
    1854:	08 95       	ret
    1856:	9c c0       	rjmp	.+312    	; 0x1990 <__fp_zero>
    1858:	67 2f       	mov	r22, r23
    185a:	78 2f       	mov	r23, r24
    185c:	88 27       	eor	r24, r24
    185e:	b8 5f       	subi	r27, 0xF8	; 248
    1860:	39 f0       	breq	.+14     	; 0x1870 <__fixunssfsi+0x46>
    1862:	b9 3f       	cpi	r27, 0xF9	; 249
    1864:	cc f3       	brlt	.-14     	; 0x1858 <__fixunssfsi+0x2e>
    1866:	86 95       	lsr	r24
    1868:	77 95       	ror	r23
    186a:	67 95       	ror	r22
    186c:	b3 95       	inc	r27
    186e:	d9 f7       	brne	.-10     	; 0x1866 <__fixunssfsi+0x3c>
    1870:	3e f4       	brtc	.+14     	; 0x1880 <__fixunssfsi+0x56>
    1872:	90 95       	com	r25
    1874:	80 95       	com	r24
    1876:	70 95       	com	r23
    1878:	61 95       	neg	r22
    187a:	7f 4f       	sbci	r23, 0xFF	; 255
    187c:	8f 4f       	sbci	r24, 0xFF	; 255
    187e:	9f 4f       	sbci	r25, 0xFF	; 255
    1880:	08 95       	ret

00001882 <__floatunsisf>:
    1882:	e8 94       	clt
    1884:	09 c0       	rjmp	.+18     	; 0x1898 <__floatsisf+0x12>

00001886 <__floatsisf>:
    1886:	97 fb       	bst	r25, 7
    1888:	3e f4       	brtc	.+14     	; 0x1898 <__floatsisf+0x12>
    188a:	90 95       	com	r25
    188c:	80 95       	com	r24
    188e:	70 95       	com	r23
    1890:	61 95       	neg	r22
    1892:	7f 4f       	sbci	r23, 0xFF	; 255
    1894:	8f 4f       	sbci	r24, 0xFF	; 255
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	99 23       	and	r25, r25
    189a:	a9 f0       	breq	.+42     	; 0x18c6 <__floatsisf+0x40>
    189c:	f9 2f       	mov	r31, r25
    189e:	96 e9       	ldi	r25, 0x96	; 150
    18a0:	bb 27       	eor	r27, r27
    18a2:	93 95       	inc	r25
    18a4:	f6 95       	lsr	r31
    18a6:	87 95       	ror	r24
    18a8:	77 95       	ror	r23
    18aa:	67 95       	ror	r22
    18ac:	b7 95       	ror	r27
    18ae:	f1 11       	cpse	r31, r1
    18b0:	f8 cf       	rjmp	.-16     	; 0x18a2 <__floatsisf+0x1c>
    18b2:	fa f4       	brpl	.+62     	; 0x18f2 <__floatsisf+0x6c>
    18b4:	bb 0f       	add	r27, r27
    18b6:	11 f4       	brne	.+4      	; 0x18bc <__floatsisf+0x36>
    18b8:	60 ff       	sbrs	r22, 0
    18ba:	1b c0       	rjmp	.+54     	; 0x18f2 <__floatsisf+0x6c>
    18bc:	6f 5f       	subi	r22, 0xFF	; 255
    18be:	7f 4f       	sbci	r23, 0xFF	; 255
    18c0:	8f 4f       	sbci	r24, 0xFF	; 255
    18c2:	9f 4f       	sbci	r25, 0xFF	; 255
    18c4:	16 c0       	rjmp	.+44     	; 0x18f2 <__floatsisf+0x6c>
    18c6:	88 23       	and	r24, r24
    18c8:	11 f0       	breq	.+4      	; 0x18ce <__floatsisf+0x48>
    18ca:	96 e9       	ldi	r25, 0x96	; 150
    18cc:	11 c0       	rjmp	.+34     	; 0x18f0 <__floatsisf+0x6a>
    18ce:	77 23       	and	r23, r23
    18d0:	21 f0       	breq	.+8      	; 0x18da <__floatsisf+0x54>
    18d2:	9e e8       	ldi	r25, 0x8E	; 142
    18d4:	87 2f       	mov	r24, r23
    18d6:	76 2f       	mov	r23, r22
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <__floatsisf+0x5e>
    18da:	66 23       	and	r22, r22
    18dc:	71 f0       	breq	.+28     	; 0x18fa <__floatsisf+0x74>
    18de:	96 e8       	ldi	r25, 0x86	; 134
    18e0:	86 2f       	mov	r24, r22
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	60 e0       	ldi	r22, 0x00	; 0
    18e6:	2a f0       	brmi	.+10     	; 0x18f2 <__floatsisf+0x6c>
    18e8:	9a 95       	dec	r25
    18ea:	66 0f       	add	r22, r22
    18ec:	77 1f       	adc	r23, r23
    18ee:	88 1f       	adc	r24, r24
    18f0:	da f7       	brpl	.-10     	; 0x18e8 <__floatsisf+0x62>
    18f2:	88 0f       	add	r24, r24
    18f4:	96 95       	lsr	r25
    18f6:	87 95       	ror	r24
    18f8:	97 f9       	bld	r25, 7
    18fa:	08 95       	ret

000018fc <__fp_inf>:
    18fc:	97 f9       	bld	r25, 7
    18fe:	9f 67       	ori	r25, 0x7F	; 127
    1900:	80 e8       	ldi	r24, 0x80	; 128
    1902:	70 e0       	ldi	r23, 0x00	; 0
    1904:	60 e0       	ldi	r22, 0x00	; 0
    1906:	08 95       	ret

00001908 <__fp_nan>:
    1908:	9f ef       	ldi	r25, 0xFF	; 255
    190a:	80 ec       	ldi	r24, 0xC0	; 192
    190c:	08 95       	ret

0000190e <__fp_pscA>:
    190e:	00 24       	eor	r0, r0
    1910:	0a 94       	dec	r0
    1912:	16 16       	cp	r1, r22
    1914:	17 06       	cpc	r1, r23
    1916:	18 06       	cpc	r1, r24
    1918:	09 06       	cpc	r0, r25
    191a:	08 95       	ret

0000191c <__fp_pscB>:
    191c:	00 24       	eor	r0, r0
    191e:	0a 94       	dec	r0
    1920:	12 16       	cp	r1, r18
    1922:	13 06       	cpc	r1, r19
    1924:	14 06       	cpc	r1, r20
    1926:	05 06       	cpc	r0, r21
    1928:	08 95       	ret

0000192a <__fp_round>:
    192a:	09 2e       	mov	r0, r25
    192c:	03 94       	inc	r0
    192e:	00 0c       	add	r0, r0
    1930:	11 f4       	brne	.+4      	; 0x1936 <__fp_round+0xc>
    1932:	88 23       	and	r24, r24
    1934:	52 f0       	brmi	.+20     	; 0x194a <__fp_round+0x20>
    1936:	bb 0f       	add	r27, r27
    1938:	40 f4       	brcc	.+16     	; 0x194a <__fp_round+0x20>
    193a:	bf 2b       	or	r27, r31
    193c:	11 f4       	brne	.+4      	; 0x1942 <__fp_round+0x18>
    193e:	60 ff       	sbrs	r22, 0
    1940:	04 c0       	rjmp	.+8      	; 0x194a <__fp_round+0x20>
    1942:	6f 5f       	subi	r22, 0xFF	; 255
    1944:	7f 4f       	sbci	r23, 0xFF	; 255
    1946:	8f 4f       	sbci	r24, 0xFF	; 255
    1948:	9f 4f       	sbci	r25, 0xFF	; 255
    194a:	08 95       	ret

0000194c <__fp_split3>:
    194c:	57 fd       	sbrc	r21, 7
    194e:	90 58       	subi	r25, 0x80	; 128
    1950:	44 0f       	add	r20, r20
    1952:	55 1f       	adc	r21, r21
    1954:	59 f0       	breq	.+22     	; 0x196c <__fp_splitA+0x10>
    1956:	5f 3f       	cpi	r21, 0xFF	; 255
    1958:	71 f0       	breq	.+28     	; 0x1976 <__fp_splitA+0x1a>
    195a:	47 95       	ror	r20

0000195c <__fp_splitA>:
    195c:	88 0f       	add	r24, r24
    195e:	97 fb       	bst	r25, 7
    1960:	99 1f       	adc	r25, r25
    1962:	61 f0       	breq	.+24     	; 0x197c <__fp_splitA+0x20>
    1964:	9f 3f       	cpi	r25, 0xFF	; 255
    1966:	79 f0       	breq	.+30     	; 0x1986 <__fp_splitA+0x2a>
    1968:	87 95       	ror	r24
    196a:	08 95       	ret
    196c:	12 16       	cp	r1, r18
    196e:	13 06       	cpc	r1, r19
    1970:	14 06       	cpc	r1, r20
    1972:	55 1f       	adc	r21, r21
    1974:	f2 cf       	rjmp	.-28     	; 0x195a <__fp_split3+0xe>
    1976:	46 95       	lsr	r20
    1978:	f1 df       	rcall	.-30     	; 0x195c <__fp_splitA>
    197a:	08 c0       	rjmp	.+16     	; 0x198c <__fp_splitA+0x30>
    197c:	16 16       	cp	r1, r22
    197e:	17 06       	cpc	r1, r23
    1980:	18 06       	cpc	r1, r24
    1982:	99 1f       	adc	r25, r25
    1984:	f1 cf       	rjmp	.-30     	; 0x1968 <__fp_splitA+0xc>
    1986:	86 95       	lsr	r24
    1988:	71 05       	cpc	r23, r1
    198a:	61 05       	cpc	r22, r1
    198c:	08 94       	sec
    198e:	08 95       	ret

00001990 <__fp_zero>:
    1990:	e8 94       	clt

00001992 <__fp_szero>:
    1992:	bb 27       	eor	r27, r27
    1994:	66 27       	eor	r22, r22
    1996:	77 27       	eor	r23, r23
    1998:	cb 01       	movw	r24, r22
    199a:	97 f9       	bld	r25, 7
    199c:	08 95       	ret

0000199e <__mulsf3>:
    199e:	0b d0       	rcall	.+22     	; 0x19b6 <__mulsf3x>
    19a0:	c4 cf       	rjmp	.-120    	; 0x192a <__fp_round>
    19a2:	b5 df       	rcall	.-150    	; 0x190e <__fp_pscA>
    19a4:	28 f0       	brcs	.+10     	; 0x19b0 <__mulsf3+0x12>
    19a6:	ba df       	rcall	.-140    	; 0x191c <__fp_pscB>
    19a8:	18 f0       	brcs	.+6      	; 0x19b0 <__mulsf3+0x12>
    19aa:	95 23       	and	r25, r21
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <__mulsf3+0x12>
    19ae:	a6 cf       	rjmp	.-180    	; 0x18fc <__fp_inf>
    19b0:	ab cf       	rjmp	.-170    	; 0x1908 <__fp_nan>
    19b2:	11 24       	eor	r1, r1
    19b4:	ee cf       	rjmp	.-36     	; 0x1992 <__fp_szero>

000019b6 <__mulsf3x>:
    19b6:	ca df       	rcall	.-108    	; 0x194c <__fp_split3>
    19b8:	a0 f3       	brcs	.-24     	; 0x19a2 <__mulsf3+0x4>

000019ba <__mulsf3_pse>:
    19ba:	95 9f       	mul	r25, r21
    19bc:	d1 f3       	breq	.-12     	; 0x19b2 <__mulsf3+0x14>
    19be:	95 0f       	add	r25, r21
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	55 1f       	adc	r21, r21
    19c4:	62 9f       	mul	r22, r18
    19c6:	f0 01       	movw	r30, r0
    19c8:	72 9f       	mul	r23, r18
    19ca:	bb 27       	eor	r27, r27
    19cc:	f0 0d       	add	r31, r0
    19ce:	b1 1d       	adc	r27, r1
    19d0:	63 9f       	mul	r22, r19
    19d2:	aa 27       	eor	r26, r26
    19d4:	f0 0d       	add	r31, r0
    19d6:	b1 1d       	adc	r27, r1
    19d8:	aa 1f       	adc	r26, r26
    19da:	64 9f       	mul	r22, r20
    19dc:	66 27       	eor	r22, r22
    19de:	b0 0d       	add	r27, r0
    19e0:	a1 1d       	adc	r26, r1
    19e2:	66 1f       	adc	r22, r22
    19e4:	82 9f       	mul	r24, r18
    19e6:	22 27       	eor	r18, r18
    19e8:	b0 0d       	add	r27, r0
    19ea:	a1 1d       	adc	r26, r1
    19ec:	62 1f       	adc	r22, r18
    19ee:	73 9f       	mul	r23, r19
    19f0:	b0 0d       	add	r27, r0
    19f2:	a1 1d       	adc	r26, r1
    19f4:	62 1f       	adc	r22, r18
    19f6:	83 9f       	mul	r24, r19
    19f8:	a0 0d       	add	r26, r0
    19fa:	61 1d       	adc	r22, r1
    19fc:	22 1f       	adc	r18, r18
    19fe:	74 9f       	mul	r23, r20
    1a00:	33 27       	eor	r19, r19
    1a02:	a0 0d       	add	r26, r0
    1a04:	61 1d       	adc	r22, r1
    1a06:	23 1f       	adc	r18, r19
    1a08:	84 9f       	mul	r24, r20
    1a0a:	60 0d       	add	r22, r0
    1a0c:	21 1d       	adc	r18, r1
    1a0e:	82 2f       	mov	r24, r18
    1a10:	76 2f       	mov	r23, r22
    1a12:	6a 2f       	mov	r22, r26
    1a14:	11 24       	eor	r1, r1
    1a16:	9f 57       	subi	r25, 0x7F	; 127
    1a18:	50 40       	sbci	r21, 0x00	; 0
    1a1a:	8a f0       	brmi	.+34     	; 0x1a3e <__mulsf3_pse+0x84>
    1a1c:	e1 f0       	breq	.+56     	; 0x1a56 <__mulsf3_pse+0x9c>
    1a1e:	88 23       	and	r24, r24
    1a20:	4a f0       	brmi	.+18     	; 0x1a34 <__mulsf3_pse+0x7a>
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	bb 1f       	adc	r27, r27
    1a28:	66 1f       	adc	r22, r22
    1a2a:	77 1f       	adc	r23, r23
    1a2c:	88 1f       	adc	r24, r24
    1a2e:	91 50       	subi	r25, 0x01	; 1
    1a30:	50 40       	sbci	r21, 0x00	; 0
    1a32:	a9 f7       	brne	.-22     	; 0x1a1e <__mulsf3_pse+0x64>
    1a34:	9e 3f       	cpi	r25, 0xFE	; 254
    1a36:	51 05       	cpc	r21, r1
    1a38:	70 f0       	brcs	.+28     	; 0x1a56 <__mulsf3_pse+0x9c>
    1a3a:	60 cf       	rjmp	.-320    	; 0x18fc <__fp_inf>
    1a3c:	aa cf       	rjmp	.-172    	; 0x1992 <__fp_szero>
    1a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a40:	ec f3       	brlt	.-6      	; 0x1a3c <__mulsf3_pse+0x82>
    1a42:	98 3e       	cpi	r25, 0xE8	; 232
    1a44:	dc f3       	brlt	.-10     	; 0x1a3c <__mulsf3_pse+0x82>
    1a46:	86 95       	lsr	r24
    1a48:	77 95       	ror	r23
    1a4a:	67 95       	ror	r22
    1a4c:	b7 95       	ror	r27
    1a4e:	f7 95       	ror	r31
    1a50:	e7 95       	ror	r30
    1a52:	9f 5f       	subi	r25, 0xFF	; 255
    1a54:	c1 f7       	brne	.-16     	; 0x1a46 <__mulsf3_pse+0x8c>
    1a56:	fe 2b       	or	r31, r30
    1a58:	88 0f       	add	r24, r24
    1a5a:	91 1d       	adc	r25, r1
    1a5c:	96 95       	lsr	r25
    1a5e:	87 95       	ror	r24
    1a60:	97 f9       	bld	r25, 7
    1a62:	08 95       	ret

00001a64 <malloc>:
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	82 30       	cpi	r24, 0x02	; 2
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	10 f4       	brcc	.+4      	; 0x1a72 <malloc+0xe>
    1a6e:	82 e0       	ldi	r24, 0x02	; 2
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	e0 91 ec 02 	lds	r30, 0x02EC
    1a76:	f0 91 ed 02 	lds	r31, 0x02ED
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	30 97       	sbiw	r30, 0x00	; 0
    1a84:	39 f1       	breq	.+78     	; 0x1ad4 <malloc+0x70>
    1a86:	40 81       	ld	r20, Z
    1a88:	51 81       	ldd	r21, Z+1	; 0x01
    1a8a:	48 17       	cp	r20, r24
    1a8c:	59 07       	cpc	r21, r25
    1a8e:	b8 f0       	brcs	.+46     	; 0x1abe <malloc+0x5a>
    1a90:	48 17       	cp	r20, r24
    1a92:	59 07       	cpc	r21, r25
    1a94:	71 f4       	brne	.+28     	; 0x1ab2 <malloc+0x4e>
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	10 97       	sbiw	r26, 0x00	; 0
    1a9c:	29 f0       	breq	.+10     	; 0x1aa8 <malloc+0x44>
    1a9e:	13 96       	adiw	r26, 0x03	; 3
    1aa0:	9c 93       	st	X, r25
    1aa2:	8e 93       	st	-X, r24
    1aa4:	12 97       	sbiw	r26, 0x02	; 2
    1aa6:	2c c0       	rjmp	.+88     	; 0x1b00 <malloc+0x9c>
    1aa8:	90 93 ed 02 	sts	0x02ED, r25
    1aac:	80 93 ec 02 	sts	0x02EC, r24
    1ab0:	27 c0       	rjmp	.+78     	; 0x1b00 <malloc+0x9c>
    1ab2:	21 15       	cp	r18, r1
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	31 f0       	breq	.+12     	; 0x1ac4 <malloc+0x60>
    1ab8:	42 17       	cp	r20, r18
    1aba:	53 07       	cpc	r21, r19
    1abc:	18 f0       	brcs	.+6      	; 0x1ac4 <malloc+0x60>
    1abe:	a9 01       	movw	r20, r18
    1ac0:	db 01       	movw	r26, r22
    1ac2:	01 c0       	rjmp	.+2      	; 0x1ac6 <malloc+0x62>
    1ac4:	ef 01       	movw	r28, r30
    1ac6:	9a 01       	movw	r18, r20
    1ac8:	bd 01       	movw	r22, r26
    1aca:	df 01       	movw	r26, r30
    1acc:	02 80       	ldd	r0, Z+2	; 0x02
    1ace:	f3 81       	ldd	r31, Z+3	; 0x03
    1ad0:	e0 2d       	mov	r30, r0
    1ad2:	d7 cf       	rjmp	.-82     	; 0x1a82 <malloc+0x1e>
    1ad4:	21 15       	cp	r18, r1
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	f9 f0       	breq	.+62     	; 0x1b18 <malloc+0xb4>
    1ada:	28 1b       	sub	r18, r24
    1adc:	39 0b       	sbc	r19, r25
    1ade:	24 30       	cpi	r18, 0x04	; 4
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	80 f4       	brcc	.+32     	; 0x1b04 <malloc+0xa0>
    1ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae8:	61 15       	cp	r22, r1
    1aea:	71 05       	cpc	r23, r1
    1aec:	21 f0       	breq	.+8      	; 0x1af6 <malloc+0x92>
    1aee:	fb 01       	movw	r30, r22
    1af0:	93 83       	std	Z+3, r25	; 0x03
    1af2:	82 83       	std	Z+2, r24	; 0x02
    1af4:	04 c0       	rjmp	.+8      	; 0x1afe <malloc+0x9a>
    1af6:	90 93 ed 02 	sts	0x02ED, r25
    1afa:	80 93 ec 02 	sts	0x02EC, r24
    1afe:	fe 01       	movw	r30, r28
    1b00:	32 96       	adiw	r30, 0x02	; 2
    1b02:	44 c0       	rjmp	.+136    	; 0x1b8c <malloc+0x128>
    1b04:	fe 01       	movw	r30, r28
    1b06:	e2 0f       	add	r30, r18
    1b08:	f3 1f       	adc	r31, r19
    1b0a:	81 93       	st	Z+, r24
    1b0c:	91 93       	st	Z+, r25
    1b0e:	22 50       	subi	r18, 0x02	; 2
    1b10:	31 09       	sbc	r19, r1
    1b12:	39 83       	std	Y+1, r19	; 0x01
    1b14:	28 83       	st	Y, r18
    1b16:	3a c0       	rjmp	.+116    	; 0x1b8c <malloc+0x128>
    1b18:	20 91 ea 02 	lds	r18, 0x02EA
    1b1c:	30 91 eb 02 	lds	r19, 0x02EB
    1b20:	23 2b       	or	r18, r19
    1b22:	41 f4       	brne	.+16     	; 0x1b34 <malloc+0xd0>
    1b24:	20 91 02 01 	lds	r18, 0x0102
    1b28:	30 91 03 01 	lds	r19, 0x0103
    1b2c:	30 93 eb 02 	sts	0x02EB, r19
    1b30:	20 93 ea 02 	sts	0x02EA, r18
    1b34:	20 91 00 01 	lds	r18, 0x0100
    1b38:	30 91 01 01 	lds	r19, 0x0101
    1b3c:	21 15       	cp	r18, r1
    1b3e:	31 05       	cpc	r19, r1
    1b40:	41 f4       	brne	.+16     	; 0x1b52 <malloc+0xee>
    1b42:	2d b7       	in	r18, 0x3d	; 61
    1b44:	3e b7       	in	r19, 0x3e	; 62
    1b46:	40 91 04 01 	lds	r20, 0x0104
    1b4a:	50 91 05 01 	lds	r21, 0x0105
    1b4e:	24 1b       	sub	r18, r20
    1b50:	35 0b       	sbc	r19, r21
    1b52:	e0 91 ea 02 	lds	r30, 0x02EA
    1b56:	f0 91 eb 02 	lds	r31, 0x02EB
    1b5a:	e2 17       	cp	r30, r18
    1b5c:	f3 07       	cpc	r31, r19
    1b5e:	a0 f4       	brcc	.+40     	; 0x1b88 <malloc+0x124>
    1b60:	2e 1b       	sub	r18, r30
    1b62:	3f 0b       	sbc	r19, r31
    1b64:	28 17       	cp	r18, r24
    1b66:	39 07       	cpc	r19, r25
    1b68:	78 f0       	brcs	.+30     	; 0x1b88 <malloc+0x124>
    1b6a:	ac 01       	movw	r20, r24
    1b6c:	4e 5f       	subi	r20, 0xFE	; 254
    1b6e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b70:	24 17       	cp	r18, r20
    1b72:	35 07       	cpc	r19, r21
    1b74:	48 f0       	brcs	.+18     	; 0x1b88 <malloc+0x124>
    1b76:	4e 0f       	add	r20, r30
    1b78:	5f 1f       	adc	r21, r31
    1b7a:	50 93 eb 02 	sts	0x02EB, r21
    1b7e:	40 93 ea 02 	sts	0x02EA, r20
    1b82:	81 93       	st	Z+, r24
    1b84:	91 93       	st	Z+, r25
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <malloc+0x128>
    1b88:	e0 e0       	ldi	r30, 0x00	; 0
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	cf 01       	movw	r24, r30
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	08 95       	ret

00001b94 <free>:
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	00 97       	sbiw	r24, 0x00	; 0
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <free+0xa>
    1b9c:	87 c0       	rjmp	.+270    	; 0x1cac <free+0x118>
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	32 97       	sbiw	r30, 0x02	; 2
    1ba2:	13 82       	std	Z+3, r1	; 0x03
    1ba4:	12 82       	std	Z+2, r1	; 0x02
    1ba6:	c0 91 ec 02 	lds	r28, 0x02EC
    1baa:	d0 91 ed 02 	lds	r29, 0x02ED
    1bae:	20 97       	sbiw	r28, 0x00	; 0
    1bb0:	81 f4       	brne	.+32     	; 0x1bd2 <free+0x3e>
    1bb2:	20 81       	ld	r18, Z
    1bb4:	31 81       	ldd	r19, Z+1	; 0x01
    1bb6:	28 0f       	add	r18, r24
    1bb8:	39 1f       	adc	r19, r25
    1bba:	80 91 ea 02 	lds	r24, 0x02EA
    1bbe:	90 91 eb 02 	lds	r25, 0x02EB
    1bc2:	82 17       	cp	r24, r18
    1bc4:	93 07       	cpc	r25, r19
    1bc6:	79 f5       	brne	.+94     	; 0x1c26 <free+0x92>
    1bc8:	f0 93 eb 02 	sts	0x02EB, r31
    1bcc:	e0 93 ea 02 	sts	0x02EA, r30
    1bd0:	6d c0       	rjmp	.+218    	; 0x1cac <free+0x118>
    1bd2:	de 01       	movw	r26, r28
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	ae 17       	cp	r26, r30
    1bda:	bf 07       	cpc	r27, r31
    1bdc:	50 f4       	brcc	.+20     	; 0x1bf2 <free+0x5e>
    1bde:	12 96       	adiw	r26, 0x02	; 2
    1be0:	4d 91       	ld	r20, X+
    1be2:	5c 91       	ld	r21, X
    1be4:	13 97       	sbiw	r26, 0x03	; 3
    1be6:	9d 01       	movw	r18, r26
    1be8:	41 15       	cp	r20, r1
    1bea:	51 05       	cpc	r21, r1
    1bec:	09 f1       	breq	.+66     	; 0x1c30 <free+0x9c>
    1bee:	da 01       	movw	r26, r20
    1bf0:	f3 cf       	rjmp	.-26     	; 0x1bd8 <free+0x44>
    1bf2:	b3 83       	std	Z+3, r27	; 0x03
    1bf4:	a2 83       	std	Z+2, r26	; 0x02
    1bf6:	40 81       	ld	r20, Z
    1bf8:	51 81       	ldd	r21, Z+1	; 0x01
    1bfa:	84 0f       	add	r24, r20
    1bfc:	95 1f       	adc	r25, r21
    1bfe:	8a 17       	cp	r24, r26
    1c00:	9b 07       	cpc	r25, r27
    1c02:	71 f4       	brne	.+28     	; 0x1c20 <free+0x8c>
    1c04:	8d 91       	ld	r24, X+
    1c06:	9c 91       	ld	r25, X
    1c08:	11 97       	sbiw	r26, 0x01	; 1
    1c0a:	84 0f       	add	r24, r20
    1c0c:	95 1f       	adc	r25, r21
    1c0e:	02 96       	adiw	r24, 0x02	; 2
    1c10:	91 83       	std	Z+1, r25	; 0x01
    1c12:	80 83       	st	Z, r24
    1c14:	12 96       	adiw	r26, 0x02	; 2
    1c16:	8d 91       	ld	r24, X+
    1c18:	9c 91       	ld	r25, X
    1c1a:	13 97       	sbiw	r26, 0x03	; 3
    1c1c:	93 83       	std	Z+3, r25	; 0x03
    1c1e:	82 83       	std	Z+2, r24	; 0x02
    1c20:	21 15       	cp	r18, r1
    1c22:	31 05       	cpc	r19, r1
    1c24:	29 f4       	brne	.+10     	; 0x1c30 <free+0x9c>
    1c26:	f0 93 ed 02 	sts	0x02ED, r31
    1c2a:	e0 93 ec 02 	sts	0x02EC, r30
    1c2e:	3e c0       	rjmp	.+124    	; 0x1cac <free+0x118>
    1c30:	d9 01       	movw	r26, r18
    1c32:	13 96       	adiw	r26, 0x03	; 3
    1c34:	fc 93       	st	X, r31
    1c36:	ee 93       	st	-X, r30
    1c38:	12 97       	sbiw	r26, 0x02	; 2
    1c3a:	4d 91       	ld	r20, X+
    1c3c:	5d 91       	ld	r21, X+
    1c3e:	a4 0f       	add	r26, r20
    1c40:	b5 1f       	adc	r27, r21
    1c42:	ea 17       	cp	r30, r26
    1c44:	fb 07       	cpc	r31, r27
    1c46:	79 f4       	brne	.+30     	; 0x1c66 <free+0xd2>
    1c48:	80 81       	ld	r24, Z
    1c4a:	91 81       	ldd	r25, Z+1	; 0x01
    1c4c:	84 0f       	add	r24, r20
    1c4e:	95 1f       	adc	r25, r21
    1c50:	02 96       	adiw	r24, 0x02	; 2
    1c52:	d9 01       	movw	r26, r18
    1c54:	11 96       	adiw	r26, 0x01	; 1
    1c56:	9c 93       	st	X, r25
    1c58:	8e 93       	st	-X, r24
    1c5a:	82 81       	ldd	r24, Z+2	; 0x02
    1c5c:	93 81       	ldd	r25, Z+3	; 0x03
    1c5e:	13 96       	adiw	r26, 0x03	; 3
    1c60:	9c 93       	st	X, r25
    1c62:	8e 93       	st	-X, r24
    1c64:	12 97       	sbiw	r26, 0x02	; 2
    1c66:	e0 e0       	ldi	r30, 0x00	; 0
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <free+0xe4>
    1c72:	fe 01       	movw	r30, r28
    1c74:	ec 01       	movw	r28, r24
    1c76:	f9 cf       	rjmp	.-14     	; 0x1c6a <free+0xd6>
    1c78:	ce 01       	movw	r24, r28
    1c7a:	02 96       	adiw	r24, 0x02	; 2
    1c7c:	28 81       	ld	r18, Y
    1c7e:	39 81       	ldd	r19, Y+1	; 0x01
    1c80:	82 0f       	add	r24, r18
    1c82:	93 1f       	adc	r25, r19
    1c84:	20 91 ea 02 	lds	r18, 0x02EA
    1c88:	30 91 eb 02 	lds	r19, 0x02EB
    1c8c:	28 17       	cp	r18, r24
    1c8e:	39 07       	cpc	r19, r25
    1c90:	69 f4       	brne	.+26     	; 0x1cac <free+0x118>
    1c92:	30 97       	sbiw	r30, 0x00	; 0
    1c94:	29 f4       	brne	.+10     	; 0x1ca0 <free+0x10c>
    1c96:	10 92 ed 02 	sts	0x02ED, r1
    1c9a:	10 92 ec 02 	sts	0x02EC, r1
    1c9e:	02 c0       	rjmp	.+4      	; 0x1ca4 <free+0x110>
    1ca0:	13 82       	std	Z+3, r1	; 0x03
    1ca2:	12 82       	std	Z+2, r1	; 0x02
    1ca4:	d0 93 eb 02 	sts	0x02EB, r29
    1ca8:	c0 93 ea 02 	sts	0x02EA, r28
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <fdevopen>:
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	ec 01       	movw	r28, r24
    1cbc:	8b 01       	movw	r16, r22
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	31 f4       	brne	.+12     	; 0x1cce <fdevopen+0x1c>
    1cc2:	61 15       	cp	r22, r1
    1cc4:	71 05       	cpc	r23, r1
    1cc6:	19 f4       	brne	.+6      	; 0x1cce <fdevopen+0x1c>
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	38 c0       	rjmp	.+112    	; 0x1d3e <fdevopen+0x8c>
    1cce:	6e e0       	ldi	r22, 0x0E	; 14
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	0e 94 b7 10 	call	0x216e	; 0x216e <calloc>
    1cda:	fc 01       	movw	r30, r24
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	a1 f3       	breq	.-24     	; 0x1cc8 <fdevopen+0x16>
    1ce0:	80 e8       	ldi	r24, 0x80	; 128
    1ce2:	83 83       	std	Z+3, r24	; 0x03
    1ce4:	01 15       	cp	r16, r1
    1ce6:	11 05       	cpc	r17, r1
    1ce8:	71 f0       	breq	.+28     	; 0x1d06 <fdevopen+0x54>
    1cea:	13 87       	std	Z+11, r17	; 0x0b
    1cec:	02 87       	std	Z+10, r16	; 0x0a
    1cee:	81 e8       	ldi	r24, 0x81	; 129
    1cf0:	83 83       	std	Z+3, r24	; 0x03
    1cf2:	80 91 ee 02 	lds	r24, 0x02EE
    1cf6:	90 91 ef 02 	lds	r25, 0x02EF
    1cfa:	89 2b       	or	r24, r25
    1cfc:	21 f4       	brne	.+8      	; 0x1d06 <fdevopen+0x54>
    1cfe:	f0 93 ef 02 	sts	0x02EF, r31
    1d02:	e0 93 ee 02 	sts	0x02EE, r30
    1d06:	20 97       	sbiw	r28, 0x00	; 0
    1d08:	c9 f0       	breq	.+50     	; 0x1d3c <fdevopen+0x8a>
    1d0a:	d1 87       	std	Z+9, r29	; 0x09
    1d0c:	c0 87       	std	Z+8, r28	; 0x08
    1d0e:	83 81       	ldd	r24, Z+3	; 0x03
    1d10:	82 60       	ori	r24, 0x02	; 2
    1d12:	83 83       	std	Z+3, r24	; 0x03
    1d14:	80 91 f0 02 	lds	r24, 0x02F0
    1d18:	90 91 f1 02 	lds	r25, 0x02F1
    1d1c:	89 2b       	or	r24, r25
    1d1e:	71 f4       	brne	.+28     	; 0x1d3c <fdevopen+0x8a>
    1d20:	f0 93 f1 02 	sts	0x02F1, r31
    1d24:	e0 93 f0 02 	sts	0x02F0, r30
    1d28:	80 91 f2 02 	lds	r24, 0x02F2
    1d2c:	90 91 f3 02 	lds	r25, 0x02F3
    1d30:	89 2b       	or	r24, r25
    1d32:	21 f4       	brne	.+8      	; 0x1d3c <fdevopen+0x8a>
    1d34:	f0 93 f3 02 	sts	0x02F3, r31
    1d38:	e0 93 f2 02 	sts	0x02F2, r30
    1d3c:	cf 01       	movw	r24, r30
    1d3e:	df 91       	pop	r29
    1d40:	cf 91       	pop	r28
    1d42:	1f 91       	pop	r17
    1d44:	0f 91       	pop	r16
    1d46:	08 95       	ret

00001d48 <printf>:
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	ea ea       	ldi	r30, 0xAA	; 170
    1d4e:	fe e0       	ldi	r31, 0x0E	; 14
    1d50:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__prologue_saves__+0x20>
    1d54:	fe 01       	movw	r30, r28
    1d56:	35 96       	adiw	r30, 0x05	; 5
    1d58:	61 91       	ld	r22, Z+
    1d5a:	71 91       	ld	r23, Z+
    1d5c:	af 01       	movw	r20, r30
    1d5e:	80 91 f0 02 	lds	r24, 0x02F0
    1d62:	90 91 f1 02 	lds	r25, 0x02F1
    1d66:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <vfprintf>
    1d6a:	e2 e0       	ldi	r30, 0x02	; 2
    1d6c:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__epilogue_restores__+0x20>

00001d70 <puts>:
    1d70:	0f 93       	push	r16
    1d72:	1f 93       	push	r17
    1d74:	cf 93       	push	r28
    1d76:	df 93       	push	r29
    1d78:	e0 91 f0 02 	lds	r30, 0x02F0
    1d7c:	f0 91 f1 02 	lds	r31, 0x02F1
    1d80:	23 81       	ldd	r18, Z+3	; 0x03
    1d82:	21 ff       	sbrs	r18, 1
    1d84:	1b c0       	rjmp	.+54     	; 0x1dbc <puts+0x4c>
    1d86:	ec 01       	movw	r28, r24
    1d88:	00 e0       	ldi	r16, 0x00	; 0
    1d8a:	10 e0       	ldi	r17, 0x00	; 0
    1d8c:	89 91       	ld	r24, Y+
    1d8e:	60 91 f0 02 	lds	r22, 0x02F0
    1d92:	70 91 f1 02 	lds	r23, 0x02F1
    1d96:	db 01       	movw	r26, r22
    1d98:	18 96       	adiw	r26, 0x08	; 8
    1d9a:	ed 91       	ld	r30, X+
    1d9c:	fc 91       	ld	r31, X
    1d9e:	19 97       	sbiw	r26, 0x09	; 9
    1da0:	88 23       	and	r24, r24
    1da2:	31 f0       	breq	.+12     	; 0x1db0 <puts+0x40>
    1da4:	09 95       	icall
    1da6:	89 2b       	or	r24, r25
    1da8:	89 f3       	breq	.-30     	; 0x1d8c <puts+0x1c>
    1daa:	0f ef       	ldi	r16, 0xFF	; 255
    1dac:	1f ef       	ldi	r17, 0xFF	; 255
    1dae:	ee cf       	rjmp	.-36     	; 0x1d8c <puts+0x1c>
    1db0:	8a e0       	ldi	r24, 0x0A	; 10
    1db2:	09 95       	icall
    1db4:	89 2b       	or	r24, r25
    1db6:	11 f4       	brne	.+4      	; 0x1dbc <puts+0x4c>
    1db8:	c8 01       	movw	r24, r16
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <puts+0x50>
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	9f ef       	ldi	r25, 0xFF	; 255
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	08 95       	ret

00001dca <vfprintf>:
    1dca:	ac e0       	ldi	r26, 0x0C	; 12
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	eb ee       	ldi	r30, 0xEB	; 235
    1dd0:	fe e0       	ldi	r31, 0x0E	; 14
    1dd2:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__prologue_saves__>
    1dd6:	7c 01       	movw	r14, r24
    1dd8:	6b 01       	movw	r12, r22
    1dda:	8a 01       	movw	r16, r20
    1ddc:	fc 01       	movw	r30, r24
    1dde:	17 82       	std	Z+7, r1	; 0x07
    1de0:	16 82       	std	Z+6, r1	; 0x06
    1de2:	83 81       	ldd	r24, Z+3	; 0x03
    1de4:	81 ff       	sbrs	r24, 1
    1de6:	bd c1       	rjmp	.+890    	; 0x2162 <vfprintf+0x398>
    1de8:	ce 01       	movw	r24, r28
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	4c 01       	movw	r8, r24
    1dee:	f7 01       	movw	r30, r14
    1df0:	93 81       	ldd	r25, Z+3	; 0x03
    1df2:	f6 01       	movw	r30, r12
    1df4:	93 fd       	sbrc	r25, 3
    1df6:	85 91       	lpm	r24, Z+
    1df8:	93 ff       	sbrs	r25, 3
    1dfa:	81 91       	ld	r24, Z+
    1dfc:	6f 01       	movw	r12, r30
    1dfe:	88 23       	and	r24, r24
    1e00:	09 f4       	brne	.+2      	; 0x1e04 <vfprintf+0x3a>
    1e02:	ab c1       	rjmp	.+854    	; 0x215a <vfprintf+0x390>
    1e04:	85 32       	cpi	r24, 0x25	; 37
    1e06:	39 f4       	brne	.+14     	; 0x1e16 <vfprintf+0x4c>
    1e08:	93 fd       	sbrc	r25, 3
    1e0a:	85 91       	lpm	r24, Z+
    1e0c:	93 ff       	sbrs	r25, 3
    1e0e:	81 91       	ld	r24, Z+
    1e10:	6f 01       	movw	r12, r30
    1e12:	85 32       	cpi	r24, 0x25	; 37
    1e14:	29 f4       	brne	.+10     	; 0x1e20 <vfprintf+0x56>
    1e16:	b7 01       	movw	r22, r14
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    1e1e:	e7 cf       	rjmp	.-50     	; 0x1dee <vfprintf+0x24>
    1e20:	51 2c       	mov	r5, r1
    1e22:	31 2c       	mov	r3, r1
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	20 32       	cpi	r18, 0x20	; 32
    1e28:	a0 f4       	brcc	.+40     	; 0x1e52 <vfprintf+0x88>
    1e2a:	8b 32       	cpi	r24, 0x2B	; 43
    1e2c:	69 f0       	breq	.+26     	; 0x1e48 <vfprintf+0x7e>
    1e2e:	30 f4       	brcc	.+12     	; 0x1e3c <vfprintf+0x72>
    1e30:	80 32       	cpi	r24, 0x20	; 32
    1e32:	59 f0       	breq	.+22     	; 0x1e4a <vfprintf+0x80>
    1e34:	83 32       	cpi	r24, 0x23	; 35
    1e36:	69 f4       	brne	.+26     	; 0x1e52 <vfprintf+0x88>
    1e38:	20 61       	ori	r18, 0x10	; 16
    1e3a:	2c c0       	rjmp	.+88     	; 0x1e94 <vfprintf+0xca>
    1e3c:	8d 32       	cpi	r24, 0x2D	; 45
    1e3e:	39 f0       	breq	.+14     	; 0x1e4e <vfprintf+0x84>
    1e40:	80 33       	cpi	r24, 0x30	; 48
    1e42:	39 f4       	brne	.+14     	; 0x1e52 <vfprintf+0x88>
    1e44:	21 60       	ori	r18, 0x01	; 1
    1e46:	26 c0       	rjmp	.+76     	; 0x1e94 <vfprintf+0xca>
    1e48:	22 60       	ori	r18, 0x02	; 2
    1e4a:	24 60       	ori	r18, 0x04	; 4
    1e4c:	23 c0       	rjmp	.+70     	; 0x1e94 <vfprintf+0xca>
    1e4e:	28 60       	ori	r18, 0x08	; 8
    1e50:	21 c0       	rjmp	.+66     	; 0x1e94 <vfprintf+0xca>
    1e52:	27 fd       	sbrc	r18, 7
    1e54:	27 c0       	rjmp	.+78     	; 0x1ea4 <vfprintf+0xda>
    1e56:	30 ed       	ldi	r19, 0xD0	; 208
    1e58:	38 0f       	add	r19, r24
    1e5a:	3a 30       	cpi	r19, 0x0A	; 10
    1e5c:	78 f4       	brcc	.+30     	; 0x1e7c <vfprintf+0xb2>
    1e5e:	26 ff       	sbrs	r18, 6
    1e60:	06 c0       	rjmp	.+12     	; 0x1e6e <vfprintf+0xa4>
    1e62:	fa e0       	ldi	r31, 0x0A	; 10
    1e64:	5f 9e       	mul	r5, r31
    1e66:	30 0d       	add	r19, r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	53 2e       	mov	r5, r19
    1e6c:	13 c0       	rjmp	.+38     	; 0x1e94 <vfprintf+0xca>
    1e6e:	8a e0       	ldi	r24, 0x0A	; 10
    1e70:	38 9e       	mul	r3, r24
    1e72:	30 0d       	add	r19, r0
    1e74:	11 24       	eor	r1, r1
    1e76:	33 2e       	mov	r3, r19
    1e78:	20 62       	ori	r18, 0x20	; 32
    1e7a:	0c c0       	rjmp	.+24     	; 0x1e94 <vfprintf+0xca>
    1e7c:	8e 32       	cpi	r24, 0x2E	; 46
    1e7e:	21 f4       	brne	.+8      	; 0x1e88 <vfprintf+0xbe>
    1e80:	26 fd       	sbrc	r18, 6
    1e82:	6b c1       	rjmp	.+726    	; 0x215a <vfprintf+0x390>
    1e84:	20 64       	ori	r18, 0x40	; 64
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <vfprintf+0xca>
    1e88:	8c 36       	cpi	r24, 0x6C	; 108
    1e8a:	11 f4       	brne	.+4      	; 0x1e90 <vfprintf+0xc6>
    1e8c:	20 68       	ori	r18, 0x80	; 128
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <vfprintf+0xca>
    1e90:	88 36       	cpi	r24, 0x68	; 104
    1e92:	41 f4       	brne	.+16     	; 0x1ea4 <vfprintf+0xda>
    1e94:	f6 01       	movw	r30, r12
    1e96:	93 fd       	sbrc	r25, 3
    1e98:	85 91       	lpm	r24, Z+
    1e9a:	93 ff       	sbrs	r25, 3
    1e9c:	81 91       	ld	r24, Z+
    1e9e:	6f 01       	movw	r12, r30
    1ea0:	81 11       	cpse	r24, r1
    1ea2:	c1 cf       	rjmp	.-126    	; 0x1e26 <vfprintf+0x5c>
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	9f 7d       	andi	r25, 0xDF	; 223
    1ea8:	95 54       	subi	r25, 0x45	; 69
    1eaa:	93 30       	cpi	r25, 0x03	; 3
    1eac:	28 f4       	brcc	.+10     	; 0x1eb8 <vfprintf+0xee>
    1eae:	0c 5f       	subi	r16, 0xFC	; 252
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	ff e3       	ldi	r31, 0x3F	; 63
    1eb4:	f9 83       	std	Y+1, r31	; 0x01
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <vfprintf+0x108>
    1eb8:	83 36       	cpi	r24, 0x63	; 99
    1eba:	31 f0       	breq	.+12     	; 0x1ec8 <vfprintf+0xfe>
    1ebc:	83 37       	cpi	r24, 0x73	; 115
    1ebe:	71 f0       	breq	.+28     	; 0x1edc <vfprintf+0x112>
    1ec0:	83 35       	cpi	r24, 0x53	; 83
    1ec2:	09 f0       	breq	.+2      	; 0x1ec6 <vfprintf+0xfc>
    1ec4:	5b c0       	rjmp	.+182    	; 0x1f7c <vfprintf+0x1b2>
    1ec6:	22 c0       	rjmp	.+68     	; 0x1f0c <vfprintf+0x142>
    1ec8:	f8 01       	movw	r30, r16
    1eca:	80 81       	ld	r24, Z
    1ecc:	89 83       	std	Y+1, r24	; 0x01
    1ece:	0e 5f       	subi	r16, 0xFE	; 254
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	44 24       	eor	r4, r4
    1ed4:	43 94       	inc	r4
    1ed6:	51 2c       	mov	r5, r1
    1ed8:	54 01       	movw	r10, r8
    1eda:	15 c0       	rjmp	.+42     	; 0x1f06 <vfprintf+0x13c>
    1edc:	38 01       	movw	r6, r16
    1ede:	f2 e0       	ldi	r31, 0x02	; 2
    1ee0:	6f 0e       	add	r6, r31
    1ee2:	71 1c       	adc	r7, r1
    1ee4:	f8 01       	movw	r30, r16
    1ee6:	a0 80       	ld	r10, Z
    1ee8:	b1 80       	ldd	r11, Z+1	; 0x01
    1eea:	26 ff       	sbrs	r18, 6
    1eec:	03 c0       	rjmp	.+6      	; 0x1ef4 <vfprintf+0x12a>
    1eee:	65 2d       	mov	r22, r5
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <vfprintf+0x12e>
    1ef4:	6f ef       	ldi	r22, 0xFF	; 255
    1ef6:	7f ef       	ldi	r23, 0xFF	; 255
    1ef8:	c5 01       	movw	r24, r10
    1efa:	2c 87       	std	Y+12, r18	; 0x0c
    1efc:	0e 94 e5 10 	call	0x21ca	; 0x21ca <strnlen>
    1f00:	2c 01       	movw	r4, r24
    1f02:	83 01       	movw	r16, r6
    1f04:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f06:	2f 77       	andi	r18, 0x7F	; 127
    1f08:	22 2e       	mov	r2, r18
    1f0a:	17 c0       	rjmp	.+46     	; 0x1f3a <vfprintf+0x170>
    1f0c:	38 01       	movw	r6, r16
    1f0e:	f2 e0       	ldi	r31, 0x02	; 2
    1f10:	6f 0e       	add	r6, r31
    1f12:	71 1c       	adc	r7, r1
    1f14:	f8 01       	movw	r30, r16
    1f16:	a0 80       	ld	r10, Z
    1f18:	b1 80       	ldd	r11, Z+1	; 0x01
    1f1a:	26 ff       	sbrs	r18, 6
    1f1c:	03 c0       	rjmp	.+6      	; 0x1f24 <vfprintf+0x15a>
    1f1e:	65 2d       	mov	r22, r5
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0x15e>
    1f24:	6f ef       	ldi	r22, 0xFF	; 255
    1f26:	7f ef       	ldi	r23, 0xFF	; 255
    1f28:	c5 01       	movw	r24, r10
    1f2a:	2c 87       	std	Y+12, r18	; 0x0c
    1f2c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <strnlen_P>
    1f30:	2c 01       	movw	r4, r24
    1f32:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f34:	20 68       	ori	r18, 0x80	; 128
    1f36:	22 2e       	mov	r2, r18
    1f38:	83 01       	movw	r16, r6
    1f3a:	23 fc       	sbrc	r2, 3
    1f3c:	1b c0       	rjmp	.+54     	; 0x1f74 <vfprintf+0x1aa>
    1f3e:	83 2d       	mov	r24, r3
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	48 16       	cp	r4, r24
    1f44:	59 06       	cpc	r5, r25
    1f46:	b0 f4       	brcc	.+44     	; 0x1f74 <vfprintf+0x1aa>
    1f48:	b7 01       	movw	r22, r14
    1f4a:	80 e2       	ldi	r24, 0x20	; 32
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    1f52:	3a 94       	dec	r3
    1f54:	f4 cf       	rjmp	.-24     	; 0x1f3e <vfprintf+0x174>
    1f56:	f5 01       	movw	r30, r10
    1f58:	27 fc       	sbrc	r2, 7
    1f5a:	85 91       	lpm	r24, Z+
    1f5c:	27 fe       	sbrs	r2, 7
    1f5e:	81 91       	ld	r24, Z+
    1f60:	5f 01       	movw	r10, r30
    1f62:	b7 01       	movw	r22, r14
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    1f6a:	31 10       	cpse	r3, r1
    1f6c:	3a 94       	dec	r3
    1f6e:	f1 e0       	ldi	r31, 0x01	; 1
    1f70:	4f 1a       	sub	r4, r31
    1f72:	51 08       	sbc	r5, r1
    1f74:	41 14       	cp	r4, r1
    1f76:	51 04       	cpc	r5, r1
    1f78:	71 f7       	brne	.-36     	; 0x1f56 <vfprintf+0x18c>
    1f7a:	e5 c0       	rjmp	.+458    	; 0x2146 <vfprintf+0x37c>
    1f7c:	84 36       	cpi	r24, 0x64	; 100
    1f7e:	11 f0       	breq	.+4      	; 0x1f84 <vfprintf+0x1ba>
    1f80:	89 36       	cpi	r24, 0x69	; 105
    1f82:	39 f5       	brne	.+78     	; 0x1fd2 <vfprintf+0x208>
    1f84:	f8 01       	movw	r30, r16
    1f86:	27 ff       	sbrs	r18, 7
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <vfprintf+0x1ce>
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	0c 5f       	subi	r16, 0xFC	; 252
    1f94:	1f 4f       	sbci	r17, 0xFF	; 255
    1f96:	08 c0       	rjmp	.+16     	; 0x1fa8 <vfprintf+0x1de>
    1f98:	60 81       	ld	r22, Z
    1f9a:	71 81       	ldd	r23, Z+1	; 0x01
    1f9c:	88 27       	eor	r24, r24
    1f9e:	77 fd       	sbrc	r23, 7
    1fa0:	80 95       	com	r24
    1fa2:	98 2f       	mov	r25, r24
    1fa4:	0e 5f       	subi	r16, 0xFE	; 254
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	2f 76       	andi	r18, 0x6F	; 111
    1faa:	b2 2e       	mov	r11, r18
    1fac:	97 ff       	sbrs	r25, 7
    1fae:	09 c0       	rjmp	.+18     	; 0x1fc2 <vfprintf+0x1f8>
    1fb0:	90 95       	com	r25
    1fb2:	80 95       	com	r24
    1fb4:	70 95       	com	r23
    1fb6:	61 95       	neg	r22
    1fb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fba:	8f 4f       	sbci	r24, 0xFF	; 255
    1fbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbe:	20 68       	ori	r18, 0x80	; 128
    1fc0:	b2 2e       	mov	r11, r18
    1fc2:	2a e0       	ldi	r18, 0x0A	; 10
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	a4 01       	movw	r20, r8
    1fc8:	0e 94 22 11 	call	0x2244	; 0x2244 <__ultoa_invert>
    1fcc:	a8 2e       	mov	r10, r24
    1fce:	a8 18       	sub	r10, r8
    1fd0:	44 c0       	rjmp	.+136    	; 0x205a <vfprintf+0x290>
    1fd2:	85 37       	cpi	r24, 0x75	; 117
    1fd4:	29 f4       	brne	.+10     	; 0x1fe0 <vfprintf+0x216>
    1fd6:	2f 7e       	andi	r18, 0xEF	; 239
    1fd8:	b2 2e       	mov	r11, r18
    1fda:	2a e0       	ldi	r18, 0x0A	; 10
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	25 c0       	rjmp	.+74     	; 0x202a <vfprintf+0x260>
    1fe0:	f2 2f       	mov	r31, r18
    1fe2:	f9 7f       	andi	r31, 0xF9	; 249
    1fe4:	bf 2e       	mov	r11, r31
    1fe6:	8f 36       	cpi	r24, 0x6F	; 111
    1fe8:	c1 f0       	breq	.+48     	; 0x201a <vfprintf+0x250>
    1fea:	18 f4       	brcc	.+6      	; 0x1ff2 <vfprintf+0x228>
    1fec:	88 35       	cpi	r24, 0x58	; 88
    1fee:	79 f0       	breq	.+30     	; 0x200e <vfprintf+0x244>
    1ff0:	b4 c0       	rjmp	.+360    	; 0x215a <vfprintf+0x390>
    1ff2:	80 37       	cpi	r24, 0x70	; 112
    1ff4:	19 f0       	breq	.+6      	; 0x1ffc <vfprintf+0x232>
    1ff6:	88 37       	cpi	r24, 0x78	; 120
    1ff8:	21 f0       	breq	.+8      	; 0x2002 <vfprintf+0x238>
    1ffa:	af c0       	rjmp	.+350    	; 0x215a <vfprintf+0x390>
    1ffc:	2f 2f       	mov	r18, r31
    1ffe:	20 61       	ori	r18, 0x10	; 16
    2000:	b2 2e       	mov	r11, r18
    2002:	b4 fe       	sbrs	r11, 4
    2004:	0d c0       	rjmp	.+26     	; 0x2020 <vfprintf+0x256>
    2006:	8b 2d       	mov	r24, r11
    2008:	84 60       	ori	r24, 0x04	; 4
    200a:	b8 2e       	mov	r11, r24
    200c:	09 c0       	rjmp	.+18     	; 0x2020 <vfprintf+0x256>
    200e:	24 ff       	sbrs	r18, 4
    2010:	0a c0       	rjmp	.+20     	; 0x2026 <vfprintf+0x25c>
    2012:	9f 2f       	mov	r25, r31
    2014:	96 60       	ori	r25, 0x06	; 6
    2016:	b9 2e       	mov	r11, r25
    2018:	06 c0       	rjmp	.+12     	; 0x2026 <vfprintf+0x25c>
    201a:	28 e0       	ldi	r18, 0x08	; 8
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	05 c0       	rjmp	.+10     	; 0x202a <vfprintf+0x260>
    2020:	20 e1       	ldi	r18, 0x10	; 16
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	02 c0       	rjmp	.+4      	; 0x202a <vfprintf+0x260>
    2026:	20 e1       	ldi	r18, 0x10	; 16
    2028:	32 e0       	ldi	r19, 0x02	; 2
    202a:	f8 01       	movw	r30, r16
    202c:	b7 fe       	sbrs	r11, 7
    202e:	07 c0       	rjmp	.+14     	; 0x203e <vfprintf+0x274>
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	0c 5f       	subi	r16, 0xFC	; 252
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	06 c0       	rjmp	.+12     	; 0x204a <vfprintf+0x280>
    203e:	60 81       	ld	r22, Z
    2040:	71 81       	ldd	r23, Z+1	; 0x01
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 5f       	subi	r16, 0xFE	; 254
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	a4 01       	movw	r20, r8
    204c:	0e 94 22 11 	call	0x2244	; 0x2244 <__ultoa_invert>
    2050:	a8 2e       	mov	r10, r24
    2052:	a8 18       	sub	r10, r8
    2054:	fb 2d       	mov	r31, r11
    2056:	ff 77       	andi	r31, 0x7F	; 127
    2058:	bf 2e       	mov	r11, r31
    205a:	b6 fe       	sbrs	r11, 6
    205c:	0b c0       	rjmp	.+22     	; 0x2074 <vfprintf+0x2aa>
    205e:	2b 2d       	mov	r18, r11
    2060:	2e 7f       	andi	r18, 0xFE	; 254
    2062:	a5 14       	cp	r10, r5
    2064:	50 f4       	brcc	.+20     	; 0x207a <vfprintf+0x2b0>
    2066:	b4 fe       	sbrs	r11, 4
    2068:	0a c0       	rjmp	.+20     	; 0x207e <vfprintf+0x2b4>
    206a:	b2 fc       	sbrc	r11, 2
    206c:	08 c0       	rjmp	.+16     	; 0x207e <vfprintf+0x2b4>
    206e:	2b 2d       	mov	r18, r11
    2070:	2e 7e       	andi	r18, 0xEE	; 238
    2072:	05 c0       	rjmp	.+10     	; 0x207e <vfprintf+0x2b4>
    2074:	7a 2c       	mov	r7, r10
    2076:	2b 2d       	mov	r18, r11
    2078:	03 c0       	rjmp	.+6      	; 0x2080 <vfprintf+0x2b6>
    207a:	7a 2c       	mov	r7, r10
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <vfprintf+0x2b6>
    207e:	75 2c       	mov	r7, r5
    2080:	24 ff       	sbrs	r18, 4
    2082:	0d c0       	rjmp	.+26     	; 0x209e <vfprintf+0x2d4>
    2084:	fe 01       	movw	r30, r28
    2086:	ea 0d       	add	r30, r10
    2088:	f1 1d       	adc	r31, r1
    208a:	80 81       	ld	r24, Z
    208c:	80 33       	cpi	r24, 0x30	; 48
    208e:	11 f4       	brne	.+4      	; 0x2094 <vfprintf+0x2ca>
    2090:	29 7e       	andi	r18, 0xE9	; 233
    2092:	09 c0       	rjmp	.+18     	; 0x20a6 <vfprintf+0x2dc>
    2094:	22 ff       	sbrs	r18, 2
    2096:	06 c0       	rjmp	.+12     	; 0x20a4 <vfprintf+0x2da>
    2098:	73 94       	inc	r7
    209a:	73 94       	inc	r7
    209c:	04 c0       	rjmp	.+8      	; 0x20a6 <vfprintf+0x2dc>
    209e:	82 2f       	mov	r24, r18
    20a0:	86 78       	andi	r24, 0x86	; 134
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <vfprintf+0x2dc>
    20a4:	73 94       	inc	r7
    20a6:	23 fd       	sbrc	r18, 3
    20a8:	13 c0       	rjmp	.+38     	; 0x20d0 <vfprintf+0x306>
    20aa:	20 ff       	sbrs	r18, 0
    20ac:	06 c0       	rjmp	.+12     	; 0x20ba <vfprintf+0x2f0>
    20ae:	5a 2c       	mov	r5, r10
    20b0:	73 14       	cp	r7, r3
    20b2:	18 f4       	brcc	.+6      	; 0x20ba <vfprintf+0x2f0>
    20b4:	53 0c       	add	r5, r3
    20b6:	57 18       	sub	r5, r7
    20b8:	73 2c       	mov	r7, r3
    20ba:	73 14       	cp	r7, r3
    20bc:	68 f4       	brcc	.+26     	; 0x20d8 <vfprintf+0x30e>
    20be:	b7 01       	movw	r22, r14
    20c0:	80 e2       	ldi	r24, 0x20	; 32
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	2c 87       	std	Y+12, r18	; 0x0c
    20c6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    20ca:	73 94       	inc	r7
    20cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ce:	f5 cf       	rjmp	.-22     	; 0x20ba <vfprintf+0x2f0>
    20d0:	73 14       	cp	r7, r3
    20d2:	10 f4       	brcc	.+4      	; 0x20d8 <vfprintf+0x30e>
    20d4:	37 18       	sub	r3, r7
    20d6:	01 c0       	rjmp	.+2      	; 0x20da <vfprintf+0x310>
    20d8:	31 2c       	mov	r3, r1
    20da:	24 ff       	sbrs	r18, 4
    20dc:	12 c0       	rjmp	.+36     	; 0x2102 <vfprintf+0x338>
    20de:	b7 01       	movw	r22, r14
    20e0:	80 e3       	ldi	r24, 0x30	; 48
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	2c 87       	std	Y+12, r18	; 0x0c
    20e6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    20ea:	2c 85       	ldd	r18, Y+12	; 0x0c
    20ec:	22 ff       	sbrs	r18, 2
    20ee:	17 c0       	rjmp	.+46     	; 0x211e <vfprintf+0x354>
    20f0:	21 ff       	sbrs	r18, 1
    20f2:	03 c0       	rjmp	.+6      	; 0x20fa <vfprintf+0x330>
    20f4:	88 e5       	ldi	r24, 0x58	; 88
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <vfprintf+0x334>
    20fa:	88 e7       	ldi	r24, 0x78	; 120
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	b7 01       	movw	r22, r14
    2100:	0c c0       	rjmp	.+24     	; 0x211a <vfprintf+0x350>
    2102:	82 2f       	mov	r24, r18
    2104:	86 78       	andi	r24, 0x86	; 134
    2106:	59 f0       	breq	.+22     	; 0x211e <vfprintf+0x354>
    2108:	21 fd       	sbrc	r18, 1
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <vfprintf+0x346>
    210c:	80 e2       	ldi	r24, 0x20	; 32
    210e:	01 c0       	rjmp	.+2      	; 0x2112 <vfprintf+0x348>
    2110:	8b e2       	ldi	r24, 0x2B	; 43
    2112:	27 fd       	sbrc	r18, 7
    2114:	8d e2       	ldi	r24, 0x2D	; 45
    2116:	b7 01       	movw	r22, r14
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    211e:	a5 14       	cp	r10, r5
    2120:	38 f4       	brcc	.+14     	; 0x2130 <vfprintf+0x366>
    2122:	b7 01       	movw	r22, r14
    2124:	80 e3       	ldi	r24, 0x30	; 48
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    212c:	5a 94       	dec	r5
    212e:	f7 cf       	rjmp	.-18     	; 0x211e <vfprintf+0x354>
    2130:	aa 94       	dec	r10
    2132:	f4 01       	movw	r30, r8
    2134:	ea 0d       	add	r30, r10
    2136:	f1 1d       	adc	r31, r1
    2138:	80 81       	ld	r24, Z
    213a:	b7 01       	movw	r22, r14
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    2142:	a1 10       	cpse	r10, r1
    2144:	f5 cf       	rjmp	.-22     	; 0x2130 <vfprintf+0x366>
    2146:	33 20       	and	r3, r3
    2148:	09 f4       	brne	.+2      	; 0x214c <vfprintf+0x382>
    214a:	51 ce       	rjmp	.-862    	; 0x1dee <vfprintf+0x24>
    214c:	b7 01       	movw	r22, r14
    214e:	80 e2       	ldi	r24, 0x20	; 32
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <fputc>
    2156:	3a 94       	dec	r3
    2158:	f6 cf       	rjmp	.-20     	; 0x2146 <vfprintf+0x37c>
    215a:	f7 01       	movw	r30, r14
    215c:	86 81       	ldd	r24, Z+6	; 0x06
    215e:	97 81       	ldd	r25, Z+7	; 0x07
    2160:	02 c0       	rjmp	.+4      	; 0x2166 <vfprintf+0x39c>
    2162:	8f ef       	ldi	r24, 0xFF	; 255
    2164:	9f ef       	ldi	r25, 0xFF	; 255
    2166:	2c 96       	adiw	r28, 0x0c	; 12
    2168:	e2 e1       	ldi	r30, 0x12	; 18
    216a:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <__epilogue_restores__>

0000216e <calloc>:
    216e:	0f 93       	push	r16
    2170:	1f 93       	push	r17
    2172:	cf 93       	push	r28
    2174:	df 93       	push	r29
    2176:	86 9f       	mul	r24, r22
    2178:	80 01       	movw	r16, r0
    217a:	87 9f       	mul	r24, r23
    217c:	10 0d       	add	r17, r0
    217e:	96 9f       	mul	r25, r22
    2180:	10 0d       	add	r17, r0
    2182:	11 24       	eor	r1, r1
    2184:	c8 01       	movw	r24, r16
    2186:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <malloc>
    218a:	ec 01       	movw	r28, r24
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	29 f0       	breq	.+10     	; 0x219a <calloc+0x2c>
    2190:	a8 01       	movw	r20, r16
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	0e 94 de 10 	call	0x21bc	; 0x21bc <memset>
    219a:	ce 01       	movw	r24, r28
    219c:	df 91       	pop	r29
    219e:	cf 91       	pop	r28
    21a0:	1f 91       	pop	r17
    21a2:	0f 91       	pop	r16
    21a4:	08 95       	ret

000021a6 <strnlen_P>:
    21a6:	fc 01       	movw	r30, r24
    21a8:	05 90       	lpm	r0, Z+
    21aa:	61 50       	subi	r22, 0x01	; 1
    21ac:	70 40       	sbci	r23, 0x00	; 0
    21ae:	01 10       	cpse	r0, r1
    21b0:	d8 f7       	brcc	.-10     	; 0x21a8 <strnlen_P+0x2>
    21b2:	80 95       	com	r24
    21b4:	90 95       	com	r25
    21b6:	8e 0f       	add	r24, r30
    21b8:	9f 1f       	adc	r25, r31
    21ba:	08 95       	ret

000021bc <memset>:
    21bc:	dc 01       	movw	r26, r24
    21be:	01 c0       	rjmp	.+2      	; 0x21c2 <memset+0x6>
    21c0:	6d 93       	st	X+, r22
    21c2:	41 50       	subi	r20, 0x01	; 1
    21c4:	50 40       	sbci	r21, 0x00	; 0
    21c6:	e0 f7       	brcc	.-8      	; 0x21c0 <memset+0x4>
    21c8:	08 95       	ret

000021ca <strnlen>:
    21ca:	fc 01       	movw	r30, r24
    21cc:	61 50       	subi	r22, 0x01	; 1
    21ce:	70 40       	sbci	r23, 0x00	; 0
    21d0:	01 90       	ld	r0, Z+
    21d2:	01 10       	cpse	r0, r1
    21d4:	d8 f7       	brcc	.-10     	; 0x21cc <strnlen+0x2>
    21d6:	80 95       	com	r24
    21d8:	90 95       	com	r25
    21da:	8e 0f       	add	r24, r30
    21dc:	9f 1f       	adc	r25, r31
    21de:	08 95       	ret

000021e0 <fputc>:
    21e0:	0f 93       	push	r16
    21e2:	1f 93       	push	r17
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	18 2f       	mov	r17, r24
    21ea:	09 2f       	mov	r16, r25
    21ec:	eb 01       	movw	r28, r22
    21ee:	8b 81       	ldd	r24, Y+3	; 0x03
    21f0:	81 fd       	sbrc	r24, 1
    21f2:	03 c0       	rjmp	.+6      	; 0x21fa <fputc+0x1a>
    21f4:	8f ef       	ldi	r24, 0xFF	; 255
    21f6:	9f ef       	ldi	r25, 0xFF	; 255
    21f8:	20 c0       	rjmp	.+64     	; 0x223a <fputc+0x5a>
    21fa:	82 ff       	sbrs	r24, 2
    21fc:	10 c0       	rjmp	.+32     	; 0x221e <fputc+0x3e>
    21fe:	4e 81       	ldd	r20, Y+6	; 0x06
    2200:	5f 81       	ldd	r21, Y+7	; 0x07
    2202:	2c 81       	ldd	r18, Y+4	; 0x04
    2204:	3d 81       	ldd	r19, Y+5	; 0x05
    2206:	42 17       	cp	r20, r18
    2208:	53 07       	cpc	r21, r19
    220a:	7c f4       	brge	.+30     	; 0x222a <fputc+0x4a>
    220c:	e8 81       	ld	r30, Y
    220e:	f9 81       	ldd	r31, Y+1	; 0x01
    2210:	9f 01       	movw	r18, r30
    2212:	2f 5f       	subi	r18, 0xFF	; 255
    2214:	3f 4f       	sbci	r19, 0xFF	; 255
    2216:	39 83       	std	Y+1, r19	; 0x01
    2218:	28 83       	st	Y, r18
    221a:	10 83       	st	Z, r17
    221c:	06 c0       	rjmp	.+12     	; 0x222a <fputc+0x4a>
    221e:	e8 85       	ldd	r30, Y+8	; 0x08
    2220:	f9 85       	ldd	r31, Y+9	; 0x09
    2222:	81 2f       	mov	r24, r17
    2224:	09 95       	icall
    2226:	89 2b       	or	r24, r25
    2228:	29 f7       	brne	.-54     	; 0x21f4 <fputc+0x14>
    222a:	2e 81       	ldd	r18, Y+6	; 0x06
    222c:	3f 81       	ldd	r19, Y+7	; 0x07
    222e:	2f 5f       	subi	r18, 0xFF	; 255
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	3f 83       	std	Y+7, r19	; 0x07
    2234:	2e 83       	std	Y+6, r18	; 0x06
    2236:	81 2f       	mov	r24, r17
    2238:	90 2f       	mov	r25, r16
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	08 95       	ret

00002244 <__ultoa_invert>:
    2244:	fa 01       	movw	r30, r20
    2246:	aa 27       	eor	r26, r26
    2248:	28 30       	cpi	r18, 0x08	; 8
    224a:	51 f1       	breq	.+84     	; 0x22a0 <__ultoa_invert+0x5c>
    224c:	20 31       	cpi	r18, 0x10	; 16
    224e:	81 f1       	breq	.+96     	; 0x22b0 <__ultoa_invert+0x6c>
    2250:	e8 94       	clt
    2252:	6f 93       	push	r22
    2254:	6e 7f       	andi	r22, 0xFE	; 254
    2256:	6e 5f       	subi	r22, 0xFE	; 254
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	8f 4f       	sbci	r24, 0xFF	; 255
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	af 4f       	sbci	r26, 0xFF	; 255
    2260:	b1 e0       	ldi	r27, 0x01	; 1
    2262:	3e d0       	rcall	.+124    	; 0x22e0 <__ultoa_invert+0x9c>
    2264:	b4 e0       	ldi	r27, 0x04	; 4
    2266:	3c d0       	rcall	.+120    	; 0x22e0 <__ultoa_invert+0x9c>
    2268:	67 0f       	add	r22, r23
    226a:	78 1f       	adc	r23, r24
    226c:	89 1f       	adc	r24, r25
    226e:	9a 1f       	adc	r25, r26
    2270:	a1 1d       	adc	r26, r1
    2272:	68 0f       	add	r22, r24
    2274:	79 1f       	adc	r23, r25
    2276:	8a 1f       	adc	r24, r26
    2278:	91 1d       	adc	r25, r1
    227a:	a1 1d       	adc	r26, r1
    227c:	6a 0f       	add	r22, r26
    227e:	71 1d       	adc	r23, r1
    2280:	81 1d       	adc	r24, r1
    2282:	91 1d       	adc	r25, r1
    2284:	a1 1d       	adc	r26, r1
    2286:	20 d0       	rcall	.+64     	; 0x22c8 <__ultoa_invert+0x84>
    2288:	09 f4       	brne	.+2      	; 0x228c <__ultoa_invert+0x48>
    228a:	68 94       	set
    228c:	3f 91       	pop	r19
    228e:	2a e0       	ldi	r18, 0x0A	; 10
    2290:	26 9f       	mul	r18, r22
    2292:	11 24       	eor	r1, r1
    2294:	30 19       	sub	r19, r0
    2296:	30 5d       	subi	r19, 0xD0	; 208
    2298:	31 93       	st	Z+, r19
    229a:	de f6       	brtc	.-74     	; 0x2252 <__ultoa_invert+0xe>
    229c:	cf 01       	movw	r24, r30
    229e:	08 95       	ret
    22a0:	46 2f       	mov	r20, r22
    22a2:	47 70       	andi	r20, 0x07	; 7
    22a4:	40 5d       	subi	r20, 0xD0	; 208
    22a6:	41 93       	st	Z+, r20
    22a8:	b3 e0       	ldi	r27, 0x03	; 3
    22aa:	0f d0       	rcall	.+30     	; 0x22ca <__ultoa_invert+0x86>
    22ac:	c9 f7       	brne	.-14     	; 0x22a0 <__ultoa_invert+0x5c>
    22ae:	f6 cf       	rjmp	.-20     	; 0x229c <__ultoa_invert+0x58>
    22b0:	46 2f       	mov	r20, r22
    22b2:	4f 70       	andi	r20, 0x0F	; 15
    22b4:	40 5d       	subi	r20, 0xD0	; 208
    22b6:	4a 33       	cpi	r20, 0x3A	; 58
    22b8:	18 f0       	brcs	.+6      	; 0x22c0 <__ultoa_invert+0x7c>
    22ba:	49 5d       	subi	r20, 0xD9	; 217
    22bc:	31 fd       	sbrc	r19, 1
    22be:	40 52       	subi	r20, 0x20	; 32
    22c0:	41 93       	st	Z+, r20
    22c2:	02 d0       	rcall	.+4      	; 0x22c8 <__ultoa_invert+0x84>
    22c4:	a9 f7       	brne	.-22     	; 0x22b0 <__ultoa_invert+0x6c>
    22c6:	ea cf       	rjmp	.-44     	; 0x229c <__ultoa_invert+0x58>
    22c8:	b4 e0       	ldi	r27, 0x04	; 4
    22ca:	a6 95       	lsr	r26
    22cc:	97 95       	ror	r25
    22ce:	87 95       	ror	r24
    22d0:	77 95       	ror	r23
    22d2:	67 95       	ror	r22
    22d4:	ba 95       	dec	r27
    22d6:	c9 f7       	brne	.-14     	; 0x22ca <__ultoa_invert+0x86>
    22d8:	00 97       	sbiw	r24, 0x00	; 0
    22da:	61 05       	cpc	r22, r1
    22dc:	71 05       	cpc	r23, r1
    22de:	08 95       	ret
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	0a 2e       	mov	r0, r26
    22e6:	06 94       	lsr	r0
    22e8:	57 95       	ror	r21
    22ea:	47 95       	ror	r20
    22ec:	37 95       	ror	r19
    22ee:	27 95       	ror	r18
    22f0:	ba 95       	dec	r27
    22f2:	c9 f7       	brne	.-14     	; 0x22e6 <__ultoa_invert+0xa2>
    22f4:	62 0f       	add	r22, r18
    22f6:	73 1f       	adc	r23, r19
    22f8:	84 1f       	adc	r24, r20
    22fa:	95 1f       	adc	r25, r21
    22fc:	a0 1d       	adc	r26, r0
    22fe:	08 95       	ret

00002300 <__prologue_saves__>:
    2300:	2f 92       	push	r2
    2302:	3f 92       	push	r3
    2304:	4f 92       	push	r4
    2306:	5f 92       	push	r5
    2308:	6f 92       	push	r6
    230a:	7f 92       	push	r7
    230c:	8f 92       	push	r8
    230e:	9f 92       	push	r9
    2310:	af 92       	push	r10
    2312:	bf 92       	push	r11
    2314:	cf 92       	push	r12
    2316:	df 92       	push	r13
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	ca 1b       	sub	r28, r26
    232a:	db 0b       	sbc	r29, r27
    232c:	0f b6       	in	r0, 0x3f	; 63
    232e:	f8 94       	cli
    2330:	de bf       	out	0x3e, r29	; 62
    2332:	0f be       	out	0x3f, r0	; 63
    2334:	cd bf       	out	0x3d, r28	; 61
    2336:	09 94       	ijmp

00002338 <__epilogue_restores__>:
    2338:	2a 88       	ldd	r2, Y+18	; 0x12
    233a:	39 88       	ldd	r3, Y+17	; 0x11
    233c:	48 88       	ldd	r4, Y+16	; 0x10
    233e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2340:	6e 84       	ldd	r6, Y+14	; 0x0e
    2342:	7d 84       	ldd	r7, Y+13	; 0x0d
    2344:	8c 84       	ldd	r8, Y+12	; 0x0c
    2346:	9b 84       	ldd	r9, Y+11	; 0x0b
    2348:	aa 84       	ldd	r10, Y+10	; 0x0a
    234a:	b9 84       	ldd	r11, Y+9	; 0x09
    234c:	c8 84       	ldd	r12, Y+8	; 0x08
    234e:	df 80       	ldd	r13, Y+7	; 0x07
    2350:	ee 80       	ldd	r14, Y+6	; 0x06
    2352:	fd 80       	ldd	r15, Y+5	; 0x05
    2354:	0c 81       	ldd	r16, Y+4	; 0x04
    2356:	1b 81       	ldd	r17, Y+3	; 0x03
    2358:	aa 81       	ldd	r26, Y+2	; 0x02
    235a:	b9 81       	ldd	r27, Y+1	; 0x01
    235c:	ce 0f       	add	r28, r30
    235e:	d1 1d       	adc	r29, r1
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	ed 01       	movw	r28, r26
    236c:	08 95       	ret

0000236e <_exit>:
    236e:	f8 94       	cli

00002370 <__stop_program>:
    2370:	ff cf       	rjmp	.-2      	; 0x2370 <__stop_program>
