
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a4  00800100  00001b96  00001c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008001a4  008001a4  00001cce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001cce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000280  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000025b7  00000000  00000000  00001faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e9a  00000000  00000000  00004561  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000106c  00000000  00000000  000053fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000690  00000000  00000000  00006468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000799  00000000  00000000  00006af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012f6  00000000  00000000  00007291  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00008587  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <main+0xd8>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e9       	ldi	r30, 0x96	; 150
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3a       	cpi	r26, 0xA4	; 164
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	21 e0       	ldi	r18, 0x01	; 1
     38c:	a4 ea       	ldi	r26, 0xA4	; 164
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 3a       	cpi	r26, 0xAE	; 174
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 35 05 	call	0xa6a	; 0xa6a <main>
     39e:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <can_init>:

#include <stdlib.h>
#include <avr/io.h>

void can_init(void){
	mcp_init();
     3a6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <mcp_init>
	mcp_bitModify(MCP_RXB0CTRL, MCP_RXBCTRL_MASK, 0xff);
     3aa:	4f ef       	ldi	r20, 0xFF	; 255
     3ac:	60 e6       	ldi	r22, 0x60	; 96
     3ae:	80 e6       	ldi	r24, 0x60	; 96
     3b0:	0e 94 46 03 	call	0x68c	; 0x68c <mcp_bitModify>
	mcp_bitModify(MCP_RXB1CTRL, MCP_RXBCTRL_MASK, 0xff);	
     3b4:	4f ef       	ldi	r20, 0xFF	; 255
     3b6:	60 e6       	ldi	r22, 0x60	; 96
     3b8:	80 e7       	ldi	r24, 0x70	; 112
     3ba:	0e 94 46 03 	call	0x68c	; 0x68c <mcp_bitModify>
	
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	60 ee       	ldi	r22, 0xE0	; 224
     3c2:	8f e0       	ldi	r24, 0x0F	; 15
     3c4:	0c 94 46 03 	jmp	0x68c	; 0x68c <mcp_bitModify>

000003c8 <can_write>:
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
	return msg;
}

//tx_buffer is the address of the control register
void can_write(can_message *msg, uint8_t tx_buffer){
     3c8:	ef 92       	push	r14
     3ca:	ff 92       	push	r15
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
     3d6:	f6 2e       	mov	r15, r22
	while(mcp_read(tx_buffer) & (1 << MCP_TEXREQ));	//wait for previous message to send
     3d8:	8f 2d       	mov	r24, r15
     3da:	0e 94 18 03 	call	0x630	; 0x630 <mcp_read>
     3de:	83 fd       	sbrc	r24, 3
     3e0:	fb cf       	rjmp	.-10     	; 0x3d8 <can_write+0x10>
	
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
     3e2:	68 81       	ld	r22, Y
     3e4:	79 81       	ldd	r23, Y+1	; 0x01
     3e6:	83 e0       	ldi	r24, 0x03	; 3
     3e8:	76 95       	lsr	r23
     3ea:	67 95       	ror	r22
     3ec:	8a 95       	dec	r24
     3ee:	e1 f7       	brne	.-8      	; 0x3e8 <can_write+0x20>
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	8f 0d       	add	r24, r15
     3f4:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
     3f8:	68 81       	ld	r22, Y
     3fa:	62 95       	swap	r22
     3fc:	66 0f       	add	r22, r22
     3fe:	60 7e       	andi	r22, 0xE0	; 224
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	8f 0d       	add	r24, r15
     404:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write>
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
     408:	6a 81       	ldd	r22, Y+2	; 0x02
     40a:	6f 70       	andi	r22, 0x0F	; 15
     40c:	85 e0       	ldi	r24, 0x05	; 5
     40e:	8f 0d       	add	r24, r15
     410:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write>
	
	for(int i = 0; i < msg->length; i++){
     414:	00 e0       	ldi	r16, 0x00	; 0
     416:	10 e0       	ldi	r17, 0x00	; 0
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     418:	96 e0       	ldi	r25, 0x06	; 6
     41a:	e9 2e       	mov	r14, r25
     41c:	ef 0c       	add	r14, r15
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     41e:	2a 81       	ldd	r18, Y+2	; 0x02
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	02 17       	cp	r16, r18
     424:	13 07       	cpc	r17, r19
     426:	5c f4       	brge	.+22     	; 0x43e <can_write+0x76>
     428:	fe 01       	movw	r30, r28
     42a:	e0 0f       	add	r30, r16
     42c:	f1 1f       	adc	r31, r17
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
     42e:	63 81       	ldd	r22, Z+3	; 0x03
     430:	8e 2d       	mov	r24, r14
     432:	80 0f       	add	r24, r16
     434:	0e 94 27 03 	call	0x64e	; 0x64e <mcp_write>
	mcp_write(tx_buffer + MCP_TXSIDH_OFFSET, (msg->id >> 3) & MCP_SIDH_MASK); //enter higher id
	mcp_write(tx_buffer + MCP_TXSIDL_OFFSET, (msg->id << 5) & MCP_SIDL_MASK); //enter lower id
	
	mcp_write(tx_buffer + MCP_TXBDLC_OFFSET, msg->length & MCP_BDLC_MASK); //enter length of message
	
	for(int i = 0; i < msg->length; i++){
     438:	0f 5f       	subi	r16, 0xFF	; 255
     43a:	1f 4f       	sbci	r17, 0xFF	; 255
     43c:	f0 cf       	rjmp	.-32     	; 0x41e <can_write+0x56>
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     43e:	8f 2d       	mov	r24, r15
     440:	82 95       	swap	r24
     442:	8f 70       	andi	r24, 0x0F	; 15
     444:	82 58       	subi	r24, 0x82	; 130
	
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	ff 90       	pop	r15
     450:	ef 90       	pop	r14
	
	for(int i = 0; i < msg->length; i++){
		mcp_write(tx_buffer + MCP_TXB_OFFSET + i, msg->data[i]);
	}
	
	mcp_requestToSend(0x80 + (tx_buffer >> 4) - 0x02); //Convert TXBnCTRL address to RTS-code
     452:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <mcp_requestToSend>

00000456 <can_pollInterrupt>:
	
}

uint8_t can_pollInterrupt(void){
	if(PIND | (1 << PB3)){ //Check for interrupts
     456:	80 b3       	in	r24, 0x10	; 16
		uint8_t interrupt_register = mcp_read(MCP_CANINTF);
     458:	8c e2       	ldi	r24, 0x2C	; 44
     45a:	0e 94 18 03 	call	0x630	; 0x630 <mcp_read>
     45e:	98 2f       	mov	r25, r24
		//Finds the register that sent an interrupt signal
		if(interrupt_register & MCP_RX0IF){
     460:	80 ff       	sbrs	r24, 0
     462:	07 c0       	rjmp	.+14     	; 0x472 <can_pollInterrupt+0x1c>
			mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0xFF);
     464:	4f ef       	ldi	r20, 0xFF	; 255
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	8c e2       	ldi	r24, 0x2C	; 44
     46a:	0e 94 46 03 	call	0x68c	; 0x68c <mcp_bitModify>
			return MCP_RXB0CTRL;
     46e:	80 e6       	ldi	r24, 0x60	; 96
     470:	08 95       	ret
		}
		
		else if(interrupt_register & MCP_RX1IF){
     472:	82 70       	andi	r24, 0x02	; 2
     474:	91 ff       	sbrs	r25, 1
     476:	06 c0       	rjmp	.+12     	; 0x484 <can_pollInterrupt+0x2e>
			mcp_bitModify(MCP_CANINTF, MCP_RX1IF, 0xFF);
     478:	4f ef       	ldi	r20, 0xFF	; 255
     47a:	62 e0       	ldi	r22, 0x02	; 2
     47c:	8c e2       	ldi	r24, 0x2C	; 44
     47e:	0e 94 46 03 	call	0x68c	; 0x68c <mcp_bitModify>
			return MCP_RXB1CTRL;
     482:	80 e7       	ldi	r24, 0x70	; 112
		}	
	}
	
	return 0x00;
	
}
     484:	08 95       	ret

00000486 <can_read>:
	mcp_bitModify(MCP_CANCTRL, MCP_CANCTRL_MASK, MCP_NORMAL_MODE);
	
	
}

can_message can_read(void){
     486:	6f 92       	push	r6
     488:	7f 92       	push	r7
     48a:	8f 92       	push	r8
     48c:	9f 92       	push	r9
     48e:	af 92       	push	r10
     490:	bf 92       	push	r11
     492:	cf 92       	push	r12
     494:	df 92       	push	r13
     496:	ef 92       	push	r14
     498:	ff 92       	push	r15
     49a:	0f 93       	push	r16
     49c:	1f 93       	push	r17
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	2b 97       	sbiw	r28, 0x0b	; 11
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	6c 01       	movw	r12, r24
	can_message msg;
	uint8_t bufferSelect = can_pollInterrupt();
     4b4:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     4b8:	78 2e       	mov	r7, r24
	/*
	if(!bufferSelect){
		printf("No interrupt detected!");
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	87 0d       	add	r24, r7
     4be:	0e 94 18 03 	call	0x630	; 0x630 <mcp_read>
     4c2:	e8 2e       	mov	r14, r24
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	87 0d       	add	r24, r7
     4c8:	0e 94 18 03 	call	0x630	; 0x630 <mcp_read>
     4cc:	82 95       	swap	r24
     4ce:	86 95       	lsr	r24
     4d0:	87 70       	andi	r24, 0x07	; 7
     4d2:	98 e0       	ldi	r25, 0x08	; 8
     4d4:	e9 9e       	mul	r14, r25
     4d6:	70 01       	movw	r14, r0
     4d8:	11 24       	eor	r1, r1
     4da:	e8 2a       	or	r14, r24
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	87 0d       	add	r24, r7
     4e0:	0e 94 18 03 	call	0x630	; 0x630 <mcp_read>
     4e4:	8f 70       	andi	r24, 0x0F	; 15
     4e6:	68 2e       	mov	r6, r24
     4e8:	5e 01       	movw	r10, r28
     4ea:	e4 e0       	ldi	r30, 0x04	; 4
     4ec:	ae 0e       	add	r10, r30
     4ee:	b1 1c       	adc	r11, r1
	
	for(int i = 0; i < msg.length; i++){
     4f0:	00 e0       	ldi	r16, 0x00	; 0
     4f2:	10 e0       	ldi	r17, 0x00	; 0
     4f4:	88 2e       	mov	r8, r24
     4f6:	91 2c       	mov	r9, r1
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     4f8:	f6 e0       	ldi	r31, 0x06	; 6
     4fa:	7f 0e       	add	r7, r31
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     4fc:	08 15       	cp	r16, r8
     4fe:	19 05       	cpc	r17, r9
     500:	54 f4       	brge	.+20     	; 0x516 <__stack+0x17>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
     502:	87 2d       	mov	r24, r7
     504:	80 0f       	add	r24, r16
     506:	0e 94 18 03 	call	0x630	; 0x630 <mcp_read>
     50a:	f5 01       	movw	r30, r10
     50c:	81 93       	st	Z+, r24
     50e:	5f 01       	movw	r10, r30
	}
	*/
	msg.id = (mcp_read(bufferSelect + MCP_RXSIDH_OFFSET) << 3) | (mcp_read(bufferSelect + MCP_RXSIDL_OFFSET) >> 5);
	msg.length = mcp_read(bufferSelect + MCP_RXBDLC_OFFSET) & MCP_RXBDLC_MASK;
	
	for(int i = 0; i < msg.length; i++){
     510:	0f 5f       	subi	r16, 0xFF	; 255
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	f3 cf       	rjmp	.-26     	; 0x4fc <can_read+0x76>
		msg.data[i] = mcp_read(bufferSelect + MCP_RXB_OFFSET + i);
	}
	
	mcp_bitModify(MCP_CANINTF, MCP_RX0IF, 0);
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	61 e0       	ldi	r22, 0x01	; 1
     51a:	8c e2       	ldi	r24, 0x2C	; 44
     51c:	0e 94 46 03 	call	0x68c	; 0x68c <mcp_bitModify>
	return msg;
     520:	fa 82       	std	Y+2, r15	; 0x02
     522:	e9 82       	std	Y+1, r14	; 0x01
     524:	6b 82       	std	Y+3, r6	; 0x03
     526:	8b e0       	ldi	r24, 0x0B	; 11
     528:	fe 01       	movw	r30, r28
     52a:	31 96       	adiw	r30, 0x01	; 1
     52c:	d6 01       	movw	r26, r12
     52e:	01 90       	ld	r0, Z+
     530:	0d 92       	st	X+, r0
     532:	8a 95       	dec	r24
     534:	e1 f7       	brne	.-8      	; 0x52e <__stack+0x2f>
}
     536:	c6 01       	movw	r24, r12
     538:	2b 96       	adiw	r28, 0x0b	; 11
     53a:	0f b6       	in	r0, 0x3f	; 63
     53c:	f8 94       	cli
     53e:	de bf       	out	0x3e, r29	; 62
     540:	0f be       	out	0x3f, r0	; 63
     542:	cd bf       	out	0x3d, r28	; 61
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	0f 91       	pop	r16
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	9f 90       	pop	r9
     55a:	8f 90       	pop	r8
     55c:	7f 90       	pop	r7
     55e:	6f 90       	pop	r6
     560:	08 95       	ret

00000562 <new_can_message>:
		printf("%c", msg.data[i]);
	}
	printf("\n");
}

can_message new_can_message(uint16_t id, uint8_t length, uint8_t* data){
     562:	ef 92       	push	r14
     564:	ff 92       	push	r15
     566:	0f 93       	push	r16
     568:	1f 93       	push	r17
     56a:	cf 93       	push	r28
     56c:	df 93       	push	r29
     56e:	cd b7       	in	r28, 0x3d	; 61
     570:	de b7       	in	r29, 0x3e	; 62
     572:	2b 97       	sbiw	r28, 0x0b	; 11
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	de 01       	movw	r26, r28
     580:	14 96       	adiw	r26, 0x04	; 4
	can_message m;
	m.id = id;
	m.length = length;
	for(int i = 0; i < length; i++){
     582:	f9 01       	movw	r30, r18
     584:	04 2f       	mov	r16, r20
     586:	10 e0       	ldi	r17, 0x00	; 0
     588:	7f 01       	movw	r14, r30
     58a:	e2 1a       	sub	r14, r18
     58c:	f3 0a       	sbc	r15, r19
     58e:	e0 16       	cp	r14, r16
     590:	f1 06       	cpc	r15, r17
     592:	1c f4       	brge	.+6      	; 0x59a <new_can_message+0x38>
		m.data[i] = data[i];	
     594:	51 91       	ld	r21, Z+
     596:	5d 93       	st	X+, r21
     598:	f7 cf       	rjmp	.-18     	; 0x588 <new_can_message+0x26>
	}
	
	
	return m;
     59a:	7a 83       	std	Y+2, r23	; 0x02
     59c:	69 83       	std	Y+1, r22	; 0x01
     59e:	4b 83       	std	Y+3, r20	; 0x03
     5a0:	2b e0       	ldi	r18, 0x0B	; 11
     5a2:	fe 01       	movw	r30, r28
     5a4:	31 96       	adiw	r30, 0x01	; 1
     5a6:	dc 01       	movw	r26, r24
     5a8:	01 90       	ld	r0, Z+
     5aa:	0d 92       	st	X+, r0
     5ac:	2a 95       	dec	r18
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <new_can_message+0x46>
}
     5b0:	2b 96       	adiw	r28, 0x0b	; 11
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	f8 94       	cli
     5b6:	de bf       	out	0x3e, r29	; 62
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	cd bf       	out	0x3d, r28	; 61
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	1f 91       	pop	r17
     5c2:	0f 91       	pop	r16
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	08 95       	ret

000005ca <can_send_joystick_message>:

void can_send_joystick_message(Joystick joy_position){
     5ca:	cf 93       	push	r28
     5cc:	df 93       	push	r29
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	67 97       	sbiw	r28, 0x17	; 23
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	f8 94       	cli
     5d8:	de bf       	out	0x3e, r29	; 62
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	cd bf       	out	0x3d, r28	; 61
     5de:	28 8b       	std	Y+16, r18	; 0x10
     5e0:	39 8b       	std	Y+17, r19	; 0x11
     5e2:	4a 8b       	std	Y+18, r20	; 0x12
     5e4:	5b 8b       	std	Y+19, r21	; 0x13
     5e6:	6c 8b       	std	Y+20, r22	; 0x14
     5e8:	7d 8b       	std	Y+21, r23	; 0x15
     5ea:	8e 8b       	std	Y+22, r24	; 0x16
     5ec:	9f 8b       	std	Y+23, r25	; 0x17
	uint8_t joy_data[4] = {joy_position.x, joy_position.y, joy_position.offset_y, joy_position.offset_y};
     5ee:	88 89       	ldd	r24, Y+16	; 0x10
     5f0:	99 89       	ldd	r25, Y+17	; 0x11
     5f2:	8c 87       	std	Y+12, r24	; 0x0c
     5f4:	8a 89       	ldd	r24, Y+18	; 0x12
     5f6:	9b 89       	ldd	r25, Y+19	; 0x13
     5f8:	8d 87       	std	Y+13, r24	; 0x0d
     5fa:	8e 89       	ldd	r24, Y+22	; 0x16
     5fc:	8e 87       	std	Y+14, r24	; 0x0e
     5fe:	8f 87       	std	Y+15, r24	; 0x0f
	can_message msg = new_can_message(MCP_JOYSTICK_MESSAGE, 4, joy_data);
     600:	9e 01       	movw	r18, r28
     602:	24 5f       	subi	r18, 0xF4	; 244
     604:	3f 4f       	sbci	r19, 0xFF	; 255
     606:	44 e0       	ldi	r20, 0x04	; 4
     608:	65 e5       	ldi	r22, 0x55	; 85
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	ce 01       	movw	r24, r28
     60e:	01 96       	adiw	r24, 0x01	; 1
     610:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
	can_write(&msg, MCP_TXB0CTRL);
     614:	60 e3       	ldi	r22, 0x30	; 48
     616:	ce 01       	movw	r24, r28
     618:	01 96       	adiw	r24, 0x01	; 1
     61a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
}
     61e:	67 96       	adiw	r28, 0x17	; 23
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	f8 94       	cli
     624:	de bf       	out	0x3e, r29	; 62
     626:	0f be       	out	0x3f, r0	; 63
     628:	cd bf       	out	0x3d, r28	; 61
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <mcp_read>:
#include "mcp.h"
#include "mcp_defines.h"
#include "../../spi/spi.h"
#include <avr/io.h>

char mcp_read(uint8_t address){
     630:	cf 93       	push	r28
     632:	c8 2f       	mov	r28, r24
	PORTB &= ~(1 << MCP_CS);
     634:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(MCP_READ);
     636:	83 e0       	ldi	r24, 0x03	; 3
     638:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	SPI_transmit(address);
     63c:	8c 2f       	mov	r24, r28
     63e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	
	char data = SPI_transmit(0x00);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	PORTB |= (1 << MCP_CS);
     648:	c4 9a       	sbi	0x18, 4	; 24
	
	return data;
}
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <mcp_write>:
void mcp_write(uint8_t address, char data){
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	1f 92       	push	r1
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     65c:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_WRITE);
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	69 83       	std	Y+1, r22	; 0x01
     662:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	SPI_transmit(address);
     666:	81 2f       	mov	r24, r17
     668:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	SPI_transmit(data);
     66c:	69 81       	ldd	r22, Y+1	; 0x01
     66e:	86 2f       	mov	r24, r22
     670:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     674:	c4 9a       	sbi	0x18, 4	; 24
}	
     676:	0f 90       	pop	r0
     678:	df 91       	pop	r29
     67a:	cf 91       	pop	r28
     67c:	1f 91       	pop	r17
     67e:	08 95       	ret

00000680 <mcp_reset>:
void mcp_reset(){
	PORTB &= ~(1 << MCP_CS);
     680:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_RESET);
     682:	80 ec       	ldi	r24, 0xC0	; 192
     684:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     688:	c4 9a       	sbi	0x18, 4	; 24
     68a:	08 95       	ret

0000068c <mcp_bitModify>:
}	
void mcp_bitModify(uint8_t address, uint8_t mask, char data){
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	00 d0       	rcall	.+0      	; 0x694 <mcp_bitModify+0x8>
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	18 2f       	mov	r17, r24
	PORTB &= ~(1 << MCP_CS);
     69a:	c4 98       	cbi	0x18, 4	; 24
	
	SPI_transmit(MCP_BIT_MODIFY);
     69c:	85 e0       	ldi	r24, 0x05	; 5
     69e:	4a 83       	std	Y+2, r20	; 0x02
     6a0:	69 83       	std	Y+1, r22	; 0x01
     6a2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	SPI_transmit(address);
     6a6:	81 2f       	mov	r24, r17
     6a8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	SPI_transmit(mask);
     6ac:	69 81       	ldd	r22, Y+1	; 0x01
     6ae:	86 2f       	mov	r24, r22
     6b0:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	SPI_transmit(data);
     6b4:	4a 81       	ldd	r20, Y+2	; 0x02
     6b6:	84 2f       	mov	r24, r20
     6b8:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     6bc:	c4 9a       	sbi	0x18, 4	; 24
}
     6be:	0f 90       	pop	r0
     6c0:	0f 90       	pop	r0
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	1f 91       	pop	r17
     6c8:	08 95       	ret

000006ca <mcp_requestToSend>:
void mcp_requestToSend(uint8_t buffer){
	PORTB &= ~(1 << MCP_CS);
     6ca:	c4 98       	cbi	0x18, 4	; 24
	SPI_transmit(buffer);
     6cc:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_transmit>
	
	PORTB |= (1<< MCP_CS);
     6d0:	c4 9a       	sbi	0x18, 4	; 24
     6d2:	08 95       	ret

000006d4 <mcp_init>:
	
	return status;
}

void mcp_init(void){
	SPI_masterInit();
     6d4:	0e 94 6e 03 	call	0x6dc	; 0x6dc <SPI_masterInit>
	mcp_reset();
     6d8:	0c 94 40 03 	jmp	0x680	; 0x680 <mcp_reset>

000006dc <SPI_masterInit>:
#include <stdio.h>
#include <stdlib.h>

void SPI_masterInit(void){
	/* Set MOSI and SCK output, all others input */
	DDRB = (1 << PB5)|(1 << PB7)|(1 << PB4); //4 = SS, 5 = MOSI, 7 = SCK
     6dc:	80 eb       	ldi	r24, 0xB0	; 176
     6de:	87 bb       	out	0x17, r24	; 23
	DDRB &= ~(1 << PB6); //DDRB6
     6e0:	be 98       	cbi	0x17, 6	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     6e2:	81 e5       	ldi	r24, 0x51	; 81
     6e4:	8d b9       	out	0x0d, r24	; 13
     6e6:	08 95       	ret

000006e8 <SPI_transmit>:
}
uint8_t SPI_transmit(char cData){
	/* Start transmission */
	SPDR = cData;
     6e8:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     6ea:	77 9b       	sbis	0x0e, 7	; 14
     6ec:	fe cf       	rjmp	.-4      	; 0x6ea <SPI_transmit+0x2>
	return SPDR;
     6ee:	8f b1       	in	r24, 0x0f	; 15
     6f0:	08 95       	ret

000006f2 <USART_Init>:
	_delay_ms(100);
}
void USART_Init(unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
     6f2:	90 bd       	out	0x20, r25	; 32
	UBRR0L = (unsigned char)ubrr;
     6f4:	89 b9       	out	0x09, r24	; 9
	
	//Enable receiver and transmitter
	UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
     6f6:	8a b1       	in	r24, 0x0a	; 10
     6f8:	88 61       	ori	r24, 0x18	; 24
     6fa:	8a b9       	out	0x0a, r24	; 10
	
	//Set frame format: 8data, 1stop bit
	UCSR0C |= (1<<URSEL0)|(3<<UCSZ00);
     6fc:	80 b5       	in	r24, 0x20	; 32
     6fe:	86 68       	ori	r24, 0x86	; 134
     700:	80 bd       	out	0x20, r24	; 32
     702:	08 95       	ret

00000704 <USART_Transmit>:
}
void USART_Transmit(unsigned char data){
	/*Wait for empty transmit buffer*/
	while( !(UCSR0A & (1<<UDRE0)) );
     704:	5d 9b       	sbis	0x0b, 5	; 11
     706:	fe cf       	rjmp	.-4      	; 0x704 <USART_Transmit>
	
	/*Put data into buffer, sends the data*/
	UDR0 = data;
     708:	8c b9       	out	0x0c, r24	; 12
     70a:	08 95       	ret

0000070c <USART_Receive>:
}
unsigned char USART_Receive(void){
	/*Wait for data to be received*/
	while( !(UCSR0A & (1<<RXC0)) );
     70c:	5f 9b       	sbis	0x0b, 7	; 11
     70e:	fe cf       	rjmp	.-4      	; 0x70c <USART_Receive>
	
	
	/*Get and return received data from buffer*/
	return UDR0;
     710:	8c b1       	in	r24, 0x0c	; 12
     712:	08 95       	ret

00000714 <SRAM_init>:
		}
	}
	printf("SRAM test completed with \n%4d errors in write phase and \n% 4d errors in retrieval phase \n\n", write_errors, retrieval_errors);
}
void SRAM_init(void){
	MCUCR |= (1 << SRE);
     714:	85 b7       	in	r24, 0x35	; 53
     716:	80 68       	ori	r24, 0x80	; 128
     718:	85 bf       	out	0x35, r24	; 53
     71a:	08 95       	ret

0000071c <JOY_read_x>:
		return NEUTRAL;
	}		
}

uint8_t JOY_read_x(void){
	*adc_data = 0x04;
     71c:	84 e0       	ldi	r24, 0x04	; 4
     71e:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     722:	82 e6       	ldi	r24, 0x62	; 98
     724:	8a 95       	dec	r24
     726:	f1 f7       	brne	.-4      	; 0x724 <JOY_read_x+0x8>
     728:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     72a:	80 91 00 14 	lds	r24, 0x1400
}
     72e:	08 95       	ret

00000730 <JOY_read_y>:
uint8_t JOY_read_y(void){
	*adc_data = 0x05;
     730:	85 e0       	ldi	r24, 0x05	; 5
     732:	80 93 00 14 	sts	0x1400, r24
     736:	82 e6       	ldi	r24, 0x62	; 98
     738:	8a 95       	dec	r24
     73a:	f1 f7       	brne	.-4      	; 0x738 <JOY_read_y+0x8>
     73c:	00 00       	nop
	_delay_us(60);
	return (*adc_data);
     73e:	80 91 00 14 	lds	r24, 0x1400
}
     742:	08 95       	ret

00000744 <JOY_toPercent>:
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
	DDRD &= ~(1 << DDD2);
	PORTD |= (1 << PD2);
}
void JOY_toPercent(Joystick* joy){
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
	joy->x = (int8_t)((100.0*(JOY_read_x() - joy->offset_x))/((float)255-joy->offset_x));
     756:	0e 94 8e 03 	call	0x71c	; 0x71c <JOY_read_x>
     75a:	0c 81       	ldd	r16, Y+4	; 0x04
     75c:	1d 81       	ldd	r17, Y+5	; 0x05
     75e:	68 2f       	mov	r22, r24
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	60 1b       	sub	r22, r16
     764:	71 0b       	sbc	r23, r17
     766:	88 27       	eor	r24, r24
     768:	77 fd       	sbrc	r23, 7
     76a:	80 95       	com	r24
     76c:	98 2f       	mov	r25, r24
     76e:	0e 94 55 08 	call	0x10aa	; 0x10aa <__floatsisf>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	48 ec       	ldi	r20, 0xC8	; 200
     778:	52 e4       	ldi	r21, 0x42	; 66
     77a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__mulsf3>
     77e:	6b 01       	movw	r12, r22
     780:	7c 01       	movw	r14, r24
     782:	b8 01       	movw	r22, r16
     784:	88 27       	eor	r24, r24
     786:	77 fd       	sbrc	r23, 7
     788:	80 95       	com	r24
     78a:	98 2f       	mov	r25, r24
     78c:	0e 94 55 08 	call	0x10aa	; 0x10aa <__floatsisf>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	60 e0       	ldi	r22, 0x00	; 0
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	8f e7       	ldi	r24, 0x7F	; 127
     79a:	93 e4       	ldi	r25, 0x43	; 67
     79c:	0e 94 55 07 	call	0xeaa	; 0xeaa <__subsf3>
     7a0:	9b 01       	movw	r18, r22
     7a2:	ac 01       	movw	r20, r24
     7a4:	c7 01       	movw	r24, r14
     7a6:	b6 01       	movw	r22, r12
     7a8:	0e 94 ba 07 	call	0xf74	; 0xf74 <__divsf3>
     7ac:	0e 94 22 08 	call	0x1044	; 0x1044 <__fixsfsi>
     7b0:	77 27       	eor	r23, r23
     7b2:	67 fd       	sbrc	r22, 7
     7b4:	70 95       	com	r23
     7b6:	79 83       	std	Y+1, r23	; 0x01
     7b8:	68 83       	st	Y, r22
	joy->y = (int8_t)((100.0*(JOY_read_y() - joy->offset_y))/((float)255-joy->offset_y));
     7ba:	0e 94 98 03 	call	0x730	; 0x730 <JOY_read_y>
     7be:	0e 81       	ldd	r16, Y+6	; 0x06
     7c0:	1f 81       	ldd	r17, Y+7	; 0x07
     7c2:	68 2f       	mov	r22, r24
     7c4:	70 e0       	ldi	r23, 0x00	; 0
     7c6:	60 1b       	sub	r22, r16
     7c8:	71 0b       	sbc	r23, r17
     7ca:	88 27       	eor	r24, r24
     7cc:	77 fd       	sbrc	r23, 7
     7ce:	80 95       	com	r24
     7d0:	98 2f       	mov	r25, r24
     7d2:	0e 94 55 08 	call	0x10aa	; 0x10aa <__floatsisf>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	48 ec       	ldi	r20, 0xC8	; 200
     7dc:	52 e4       	ldi	r21, 0x42	; 66
     7de:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__mulsf3>
     7e2:	6b 01       	movw	r12, r22
     7e4:	7c 01       	movw	r14, r24
     7e6:	b8 01       	movw	r22, r16
     7e8:	88 27       	eor	r24, r24
     7ea:	77 fd       	sbrc	r23, 7
     7ec:	80 95       	com	r24
     7ee:	98 2f       	mov	r25, r24
     7f0:	0e 94 55 08 	call	0x10aa	; 0x10aa <__floatsisf>
     7f4:	9b 01       	movw	r18, r22
     7f6:	ac 01       	movw	r20, r24
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	8f e7       	ldi	r24, 0x7F	; 127
     7fe:	93 e4       	ldi	r25, 0x43	; 67
     800:	0e 94 55 07 	call	0xeaa	; 0xeaa <__subsf3>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	c7 01       	movw	r24, r14
     80a:	b6 01       	movw	r22, r12
     80c:	0e 94 ba 07 	call	0xf74	; 0xf74 <__divsf3>
     810:	0e 94 22 08 	call	0x1044	; 0x1044 <__fixsfsi>
     814:	77 27       	eor	r23, r23
     816:	67 fd       	sbrc	r22, 7
     818:	70 95       	com	r23
     81a:	7b 83       	std	Y+3, r23	; 0x03
     81c:	6a 83       	std	Y+2, r22	; 0x02
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	08 95       	ret

00000830 <JOY_get_direction>:
	j.offset_x = offset_x;
	j.offset_y = offset_y;
	
	return j;
}
direction JOY_get_direction(Joystick joy){
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	28 97       	sbiw	r28, 0x08	; 8
     83a:	0f b6       	in	r0, 0x3f	; 63
     83c:	f8 94       	cli
     83e:	de bf       	out	0x3e, r29	; 62
     840:	0f be       	out	0x3f, r0	; 63
     842:	cd bf       	out	0x3d, r28	; 61
     844:	29 83       	std	Y+1, r18	; 0x01
     846:	3a 83       	std	Y+2, r19	; 0x02
     848:	4b 83       	std	Y+3, r20	; 0x03
     84a:	5c 83       	std	Y+4, r21	; 0x04
     84c:	6d 83       	std	Y+5, r22	; 0x05
     84e:	7e 83       	std	Y+6, r23	; 0x06
     850:	8f 83       	std	Y+7, r24	; 0x07
     852:	98 87       	std	Y+8, r25	; 0x08
	JOY_toPercent(&joy);
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	0e 94 a2 03 	call	0x744	; 0x744 <JOY_toPercent>
	if(joy.x >= 90){
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	8a 35       	cpi	r24, 0x5A	; 90
     862:	91 05       	cpc	r25, r1
     864:	8c f4       	brge	.+34     	; 0x888 <JOY_get_direction+0x58>
		return RIGHT;
	}else if(joy.x <= -90){
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	9a 81       	ldd	r25, Y+2	; 0x02
     86a:	87 3a       	cpi	r24, 0xA7	; 167
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	74 f0       	brlt	.+28     	; 0x88c <JOY_get_direction+0x5c>
		return LEFT;
	}else if(joy.y >= 90){
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	9c 81       	ldd	r25, Y+4	; 0x04
     874:	8a 35       	cpi	r24, 0x5A	; 90
     876:	91 05       	cpc	r25, r1
     878:	5c f4       	brge	.+22     	; 0x890 <JOY_get_direction+0x60>
		return UP;
	}else if(joy.y <= -90){
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	9c 81       	ldd	r25, Y+4	; 0x04
     87e:	87 3a       	cpi	r24, 0xA7	; 167
     880:	9f 4f       	sbci	r25, 0xFF	; 255
     882:	44 f4       	brge	.+16     	; 0x894 <JOY_get_direction+0x64>
		return DOWN;
     884:	82 e0       	ldi	r24, 0x02	; 2
     886:	07 c0       	rjmp	.+14     	; 0x896 <JOY_get_direction+0x66>
	return j;
}
direction JOY_get_direction(Joystick joy){
	JOY_toPercent(&joy);
	if(joy.x >= 90){
		return RIGHT;
     888:	84 e0       	ldi	r24, 0x04	; 4
     88a:	05 c0       	rjmp	.+10     	; 0x896 <JOY_get_direction+0x66>
	}else if(joy.x <= -90){
		return LEFT;
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	03 c0       	rjmp	.+6      	; 0x896 <JOY_get_direction+0x66>
	}else if(joy.y >= 90){
		return UP;
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	01 c0       	rjmp	.+2      	; 0x896 <JOY_get_direction+0x66>
	}else if(joy.y <= -90){
		return DOWN;
	}else{
		return NEUTRAL;
     894:	80 e0       	ldi	r24, 0x00	; 0
	}		
}
     896:	28 96       	adiw	r28, 0x08	; 8
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	de bf       	out	0x3e, r29	; 62
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	cd bf       	out	0x3d, r28	; 61
     8a2:	df 91       	pop	r29
     8a4:	cf 91       	pop	r28
     8a6:	08 95       	ret

000008a8 <JOY_calibrate>:
}
void JOY_toPercent(Joystick* joy){
	joy->x = (int8_t)((100.0*(JOY_read_x() - joy->offset_x))/((float)255-joy->offset_x));
	joy->y = (int8_t)((100.0*(JOY_read_y() - joy->offset_y))/((float)255-joy->offset_y));
}
void JOY_calibrate(Joystick* joy){
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ec 01       	movw	r28, r24
	joy->offset_x = JOY_read_x();
     8ae:	0e 94 8e 03 	call	0x71c	; 0x71c <JOY_read_x>
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	3d 83       	std	Y+5, r19	; 0x05
     8b8:	2c 83       	std	Y+4, r18	; 0x04
	printf("X zero: %d\n", joy->offset_x);
     8ba:	1f 92       	push	r1
     8bc:	8f 93       	push	r24
     8be:	86 e0       	ldi	r24, 0x06	; 6
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	9f 93       	push	r25
     8c4:	8f 93       	push	r24
     8c6:	0e 94 b6 0a 	call	0x156c	; 0x156c <printf>
	joy->offset_y = JOY_read_y();
     8ca:	0e 94 98 03 	call	0x730	; 0x730 <JOY_read_y>
     8ce:	28 2f       	mov	r18, r24
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	3f 83       	std	Y+7, r19	; 0x07
     8d4:	2e 83       	std	Y+6, r18	; 0x06
	printf("Y zero: %d\n", joy->offset_y);
     8d6:	1f 92       	push	r1
     8d8:	8f 93       	push	r24
     8da:	82 e1       	ldi	r24, 0x12	; 18
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	0e 94 b6 0a 	call	0x156c	; 0x156c <printf>
     8e6:	8d b7       	in	r24, 0x3d	; 61
     8e8:	9e b7       	in	r25, 0x3e	; 62
     8ea:	08 96       	adiw	r24, 0x08	; 8
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	9e bf       	out	0x3e, r25	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	8d bf       	out	0x3d, r24	; 61
}
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	08 95       	ret

000008fc <JOY_init>:
void JOY_init(Joystick* joy){
	//MCUCR |=
	//GICR |= (1 << INT0);		<-- Interrupts
	//sei();
	
	JOY_calibrate(joy);
     8fc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <JOY_calibrate>
	DDRB &= ~((1 << DDB0) | (1 << DDB1) | (1 << DDB2));
     900:	87 b3       	in	r24, 0x17	; 23
     902:	88 7f       	andi	r24, 0xF8	; 248
     904:	87 bb       	out	0x17, r24	; 23
	PORTB |= (1 << DDB0) | (1 << DDB1) | (1 << DDB2);
     906:	88 b3       	in	r24, 0x18	; 24
     908:	87 60       	ori	r24, 0x07	; 7
     90a:	88 bb       	out	0x18, r24	; 24
	DDRD &= ~(1 << DDD2);
     90c:	8a 98       	cbi	0x11, 2	; 17
	PORTD |= (1 << PD2);
     90e:	92 9a       	sbi	0x12, 2	; 18
     910:	08 95       	ret

00000912 <JOY_read_joystick>:
	joy->offset_x = JOY_read_x();
	printf("X zero: %d\n", joy->offset_x);
	joy->offset_y = JOY_read_y();
	printf("Y zero: %d\n", joy->offset_y);
}
void JOY_read_joystick(Joystick* joy){
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	ec 01       	movw	r28, r24
	joy->x = JOY_read_x();
     918:	0e 94 8e 03 	call	0x71c	; 0x71c <JOY_read_x>
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	99 83       	std	Y+1, r25	; 0x01
     920:	88 83       	st	Y, r24
	joy->y = JOY_read_y();
     922:	0e 94 98 03 	call	0x730	; 0x730 <JOY_read_y>
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	9b 83       	std	Y+3, r25	; 0x03
     92a:	8a 83       	std	Y+2, r24	; 0x02

}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <JOY_read_left_slider>:
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
}
uint8_t JOY_read_left_slider(void){
	volatile char *ext_joy = (char *) adc_data;	//MUX Address
	ext_joy[0] = 0x07;							//Enable CH4
     932:	87 e0       	ldi	r24, 0x07	; 7
     934:	80 93 00 14 	sts	0x1400, r24
     938:	81 e4       	ldi	r24, 0x41	; 65
     93a:	8a 95       	dec	r24
     93c:	f1 f7       	brne	.-4      	; 0x93a <JOY_read_left_slider+0x8>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <JOY_read_left_slider+0xe>
	_delay_us(40);
	return (uint8_t)(ext_joy[0]);
     940:	80 91 00 14 	lds	r24, 0x1400
}
     944:	08 95       	ret

00000946 <JOY_read_right_button>:
int JOY_read_left_button(void){
	return (PINB & (1 << PINB1)) >> PINB1;
}
int JOY_read_right_button(void){
	return (PINB & (1 << PINB0)) >> PINB0;
     946:	86 b3       	in	r24, 0x16	; 22
}
     948:	81 70       	andi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	08 95       	ret

0000094e <oled_control_assign>:
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     94e:	80 93 00 10 	sts	0x1000, r24
     952:	08 95       	ret

00000954 <oled_write_selector>:
}
void oled_write_selector(){
     954:	ee e1       	ldi	r30, 0x1E	; 30
     956:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = selector[col];
     958:	81 91       	ld	r24, Z+
     95a:	80 93 00 12 	sts	0x1200, r24
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
}
void oled_write_selector(){
	for(uint8_t col = 0; col < font_width; col++){
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	e6 32       	cpi	r30, 0x26	; 38
     962:	f8 07       	cpc	r31, r24
     964:	c9 f7       	brne	.-14     	; 0x958 <oled_write_selector+0x4>
		*oled_data = selector[col];
		
	}
}
     966:	08 95       	ret

00000968 <oled_write>:
void oled_write(uint8_t character){	
     968:	28 e0       	ldi	r18, 0x08	; 8
     96a:	82 9f       	mul	r24, r18
     96c:	c0 01       	movw	r24, r0
     96e:	11 24       	eor	r1, r1
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	80 59       	subi	r24, 0x90	; 144
     976:	90 40       	sbci	r25, 0x00	; 0
     978:	fc 01       	movw	r30, r24
     97a:	e2 0f       	add	r30, r18
     97c:	f3 1f       	adc	r31, r19
	for(uint8_t col = 0; col < font_width; col++){
		*oled_data = pgm_read_byte(&font[character-' '][col]);
     97e:	e4 91       	lpm	r30, Z
     980:	e0 93 00 12 	sts	0x1200, r30
     984:	2f 5f       	subi	r18, 0xFF	; 255
     986:	3f 4f       	sbci	r19, 0xFF	; 255
		*oled_data = selector[col];
		
	}
}
void oled_write(uint8_t character){	
	for(uint8_t col = 0; col < font_width; col++){
     988:	28 30       	cpi	r18, 0x08	; 8
     98a:	31 05       	cpc	r19, r1
     98c:	a9 f7       	brne	.-22     	; 0x978 <oled_write+0x10>
		*oled_data = pgm_read_byte(&font[character-' '][col]);
		
	}
}
     98e:	08 95       	ret

00000990 <oled_set_start_col>:
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     990:	e0 e0       	ldi	r30, 0x00	; 0
     992:	f0 e1       	ldi	r31, 0x10	; 16
     994:	91 e2       	ldi	r25, 0x21	; 33
     996:	90 83       	st	Z, r25
     998:	80 83       	st	Z, r24
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	80 83       	st	Z, r24
     99e:	08 95       	ret

000009a0 <oled_write_string>:
	oled_control_assign(0x21);
	oled_control_assign(start_col);
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
	oled_control_assign(0xb0 + line_nbr);
     9a4:	60 55       	subi	r22, 0x50	; 80
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     9a6:	60 93 00 10 	sts	0x1000, r22
     9aa:	ec 01       	movw	r28, r24
	oled_control_assign(0xFF);
}

void oled_write_string(char* str, int line_nbr){
	oled_control_assign(0xb0 + line_nbr);
	for(int i = 0; str[i] != '\0'; i++){
     9ac:	89 91       	ld	r24, Y+
     9ae:	88 23       	and	r24, r24
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <oled_write_string+0x18>
		oled_write(str[i]);
     9b2:	0e 94 b4 04 	call	0x968	; 0x968 <oled_write>
     9b6:	fa cf       	rjmp	.-12     	; 0x9ac <oled_write_string+0xc>
	}
}
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <oled_clear_screen>:
void oled_clear_screen(){
     9be:	20 eb       	ldi	r18, 0xB0	; 176
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     9c0:	20 93 00 10 	sts	0x1000, r18
     9c4:	80 e8       	ldi	r24, 0x80	; 128
     9c6:	90 e0       	ldi	r25, 0x00	; 0
}
void oled_clear_screen(){
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
     9c8:	10 92 00 12 	sts	0x1200, r1
     9cc:	01 97       	sbiw	r24, 0x01	; 1
	}
}
void oled_clear_screen(){
	for(int page = 0; page < 8; page++){
		oled_control_assign(0xB0 + page);
		for(int i = 0; i < 128; ++i){
     9ce:	00 97       	sbiw	r24, 0x00	; 0
     9d0:	d9 f7       	brne	.-10     	; 0x9c8 <oled_clear_screen+0xa>
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
	for(int i = 0; str[i] != '\0'; i++){
		oled_write(str[i]);
	}
}
void oled_clear_screen(){
	for(int page = 0; page < 8; page++){
     9d4:	28 3b       	cpi	r18, 0xB8	; 184
     9d6:	a1 f7       	brne	.-24     	; 0x9c0 <oled_clear_screen+0x2>
		for(int i = 0; i < 128; ++i){
			*oled_data = 0x00;
		}
		
	}
}
     9d8:	08 95       	ret

000009da <oled_init>:
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     9da:	e0 e0       	ldi	r30, 0x00	; 0
     9dc:	f0 e1       	ldi	r31, 0x10	; 16
     9de:	8e ea       	ldi	r24, 0xAE	; 174
     9e0:	80 83       	st	Z, r24
     9e2:	81 ea       	ldi	r24, 0xA1	; 161
     9e4:	80 83       	st	Z, r24
     9e6:	8a ed       	ldi	r24, 0xDA	; 218
     9e8:	80 83       	st	Z, r24
     9ea:	82 e1       	ldi	r24, 0x12	; 18
     9ec:	80 83       	st	Z, r24
     9ee:	88 ec       	ldi	r24, 0xC8	; 200
     9f0:	80 83       	st	Z, r24
     9f2:	88 ea       	ldi	r24, 0xA8	; 168
     9f4:	80 83       	st	Z, r24
     9f6:	8f e3       	ldi	r24, 0x3F	; 63
     9f8:	80 83       	st	Z, r24
     9fa:	85 ed       	ldi	r24, 0xD5	; 213
     9fc:	80 83       	st	Z, r24
     9fe:	80 e8       	ldi	r24, 0x80	; 128
     a00:	80 83       	st	Z, r24
     a02:	81 e8       	ldi	r24, 0x81	; 129
     a04:	80 83       	st	Z, r24
     a06:	80 e5       	ldi	r24, 0x50	; 80
     a08:	80 83       	st	Z, r24
     a0a:	89 ed       	ldi	r24, 0xD9	; 217
     a0c:	80 83       	st	Z, r24
     a0e:	81 e2       	ldi	r24, 0x21	; 33
     a10:	80 83       	st	Z, r24
     a12:	80 e2       	ldi	r24, 0x20	; 32
     a14:	80 83       	st	Z, r24
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	80 83       	st	Z, r24
     a1a:	8b ed       	ldi	r24, 0xDB	; 219
     a1c:	80 83       	st	Z, r24
     a1e:	80 e3       	ldi	r24, 0x30	; 48
     a20:	80 83       	st	Z, r24
     a22:	8d ea       	ldi	r24, 0xAD	; 173
     a24:	80 83       	st	Z, r24
     a26:	10 82       	st	Z, r1
     a28:	84 ea       	ldi	r24, 0xA4	; 164
     a2a:	80 83       	st	Z, r24
     a2c:	86 ea       	ldi	r24, 0xA6	; 166
     a2e:	80 83       	st	Z, r24
     a30:	8f ea       	ldi	r24, 0xAF	; 175
     a32:	80 83       	st	Z, r24
	oled_control_assign(0xad);    //master configuration
	oled_control_assign(0x00);
	oled_control_assign(0xa4);    //out follows RAM content
	oled_control_assign(0xa6);    //set normal display
	oled_control_assign(0xaf);    // display on
	oled_clear_screen();
     a34:	0c 94 df 04 	jmp	0x9be	; 0x9be <oled_clear_screen>

00000a38 <oled_initiate_party_mode>:
}
void oled_control_assign(uint8_t verdi){
	*oled_control = verdi;
     a38:	86 ea       	ldi	r24, 0xA6	; 166
     a3a:	80 93 00 10 	sts	0x1000, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3e:	2f ef       	ldi	r18, 0xFF	; 255
     a40:	8f e7       	ldi	r24, 0x7F	; 127
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	21 50       	subi	r18, 0x01	; 1
     a46:	80 40       	sbci	r24, 0x00	; 0
     a48:	90 40       	sbci	r25, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <oled_initiate_party_mode+0xc>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <oled_initiate_party_mode+0x16>
     a4e:	00 c0       	rjmp	.+0      	; 0xa50 <oled_initiate_party_mode+0x18>
     a50:	87 ea       	ldi	r24, 0xA7	; 167
     a52:	80 93 00 10 	sts	0x1000, r24
     a56:	2f ef       	ldi	r18, 0xFF	; 255
     a58:	8f e7       	ldi	r24, 0x7F	; 127
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	80 40       	sbci	r24, 0x00	; 0
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <oled_initiate_party_mode+0x24>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <oled_initiate_party_mode+0x2e>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <oled_initiate_party_mode+0x30>
     a68:	08 95       	ret

00000a6a <main>:
#include "Drivers/Communication/can/mcp/mcp.h"
#include "Drivers/Communication/can/mcp/mcp_defines.h"
#include "Interface/interface.h"

int main(void)
{
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	a3 97       	sbiw	r28, 0x23	; 35
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	de bf       	out	0x3e, r29	; 62
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	cd bf       	out	0x3d, r28	; 61
	Joystick joy_position;
	volatile int select_pos = 1;
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	9f 8b       	std	Y+23, r25	; 0x17
     a84:	8e 8b       	std	Y+22, r24	; 0x16
	Menu *current_menu;
	
	USART_Init(MYUBRR);
     a86:	8f e1       	ldi	r24, 0x1F	; 31
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <USART_Init>
	fdevopen((int (*)(char,  struct __file *))USART_Transmit, (int (*)(struct __file *))USART_Receive);
     a8e:	66 e8       	ldi	r22, 0x86	; 134
     a90:	73 e0       	ldi	r23, 0x03	; 3
     a92:	82 e8       	ldi	r24, 0x82	; 130
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <fdevopen>
	printf("UART setup done\n");
     a9a:	86 e2       	ldi	r24, 0x26	; 38
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <puts>
	SRAM_init();
     aa2:	0e 94 8a 03 	call	0x714	; 0x714 <SRAM_init>
	printf("SRAM setup done\n");
     aa6:	86 e3       	ldi	r24, 0x36	; 54
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 ca 0a 	call	0x1594	; 0x1594 <puts>
	JOY_init(&joy_position);
     aae:	ce 01       	movw	r24, r28
     ab0:	0c 96       	adiw	r24, 0x0c	; 12
     ab2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <JOY_init>
	printf("JOY setup done\n");
     ab6:	86 e4       	ldi	r24, 0x46	; 70
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 ca 0a 	call	0x1594	; 0x1594 <puts>
	oled_init();
     abe:	0e 94 ed 04 	call	0x9da	; 0x9da <oled_init>
	can_init();
     ac2:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <can_init>
	printf("Initialization done\n");
     ac6:	85 e5       	ldi	r24, 0x55	; 85
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 ca 0a 	call	0x1594	; 0x1594 <puts>
	current_menu = interface_init();
     ace:	0e 94 63 06 	call	0xcc6	; 0xcc6 <interface_init>
     ad2:	9d 8b       	std	Y+21, r25	; 0x15
     ad4:	8c 8b       	std	Y+20, r24	; 0x14
			JOY_read_joystick(&joy_position);
			can_send_joystick_message(joy_position);
			interface_select(joy_position, &select_pos, &current_menu);
			
			if(can_pollInterrupt()){
				msg = can_read();
     ad6:	8b e0       	ldi	r24, 0x0B	; 11
     ad8:	d8 2e       	mov	r13, r24
	uint8_t ir_value = 0;
	can_message msg;
	
    while(1)
        {	
			JOY_read_joystick(&joy_position);
     ada:	ce 01       	movw	r24, r28
     adc:	0c 96       	adiw	r24, 0x0c	; 12
     ade:	0e 94 89 04 	call	0x912	; 0x912 <JOY_read_joystick>
			can_send_joystick_message(joy_position);
     ae2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ae4:	3d 85       	ldd	r19, Y+13	; 0x0d
     ae6:	4e 85       	ldd	r20, Y+14	; 0x0e
     ae8:	5f 85       	ldd	r21, Y+15	; 0x0f
     aea:	68 89       	ldd	r22, Y+16	; 0x10
     aec:	79 89       	ldd	r23, Y+17	; 0x11
     aee:	8a 89       	ldd	r24, Y+18	; 0x12
     af0:	9b 89       	ldd	r25, Y+19	; 0x13
     af2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <can_send_joystick_message>
			interface_select(joy_position, &select_pos, &current_menu);
     af6:	ce 01       	movw	r24, r28
     af8:	44 96       	adiw	r24, 0x14	; 20
     afa:	7c 01       	movw	r14, r24
     afc:	8e 01       	movw	r16, r28
     afe:	0a 5e       	subi	r16, 0xEA	; 234
     b00:	1f 4f       	sbci	r17, 0xFF	; 255
     b02:	2c 85       	ldd	r18, Y+12	; 0x0c
     b04:	3d 85       	ldd	r19, Y+13	; 0x0d
     b06:	4e 85       	ldd	r20, Y+14	; 0x0e
     b08:	5f 85       	ldd	r21, Y+15	; 0x0f
     b0a:	68 89       	ldd	r22, Y+16	; 0x10
     b0c:	79 89       	ldd	r23, Y+17	; 0x11
     b0e:	8a 89       	ldd	r24, Y+18	; 0x12
     b10:	9b 89       	ldd	r25, Y+19	; 0x13
     b12:	0e 94 ae 06 	call	0xd5c	; 0xd5c <interface_select>
			
			if(can_pollInterrupt()){
     b16:	0e 94 2b 02 	call	0x456	; 0x456 <can_pollInterrupt>
     b1a:	88 23       	and	r24, r24
     b1c:	69 f0       	breq	.+26     	; 0xb38 <main+0xce>
				msg = can_read();
     b1e:	ce 01       	movw	r24, r28
     b20:	49 96       	adiw	r24, 0x19	; 25
     b22:	0e 94 43 02 	call	0x486	; 0x486 <can_read>
     b26:	fe 01       	movw	r30, r28
     b28:	79 96       	adiw	r30, 0x19	; 25
     b2a:	de 01       	movw	r26, r28
     b2c:	11 96       	adiw	r26, 0x01	; 1
     b2e:	8d 2d       	mov	r24, r13
     b30:	01 90       	ld	r0, Z+
     b32:	0d 92       	st	X+, r0
     b34:	8a 95       	dec	r24
     b36:	e1 f7       	brne	.-8      	; 0xb30 <main+0xc6>
			
			if(msg.id == MCP_IR_MESSAGE){
				ir_value = msg.data[0];
			}
			
			uint8_t msg_data = JOY_read_left_slider();
     b38:	0e 94 99 04 	call	0x932	; 0x932 <JOY_read_left_slider>
     b3c:	88 8f       	std	Y+24, r24	; 0x18
			msg = new_can_message(MCP_SLIDER_MESSAGE, 1, &msg_data);
     b3e:	9e 01       	movw	r18, r28
     b40:	28 5e       	subi	r18, 0xE8	; 232
     b42:	3f 4f       	sbci	r19, 0xFF	; 255
     b44:	41 e0       	ldi	r20, 0x01	; 1
     b46:	68 e8       	ldi	r22, 0x88	; 136
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	ce 01       	movw	r24, r28
     b4c:	49 96       	adiw	r24, 0x19	; 25
     b4e:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
     b52:	fe 01       	movw	r30, r28
     b54:	79 96       	adiw	r30, 0x19	; 25
     b56:	de 01       	movw	r26, r28
     b58:	11 96       	adiw	r26, 0x01	; 1
     b5a:	8d 2d       	mov	r24, r13
     b5c:	01 90       	ld	r0, Z+
     b5e:	0d 92       	st	X+, r0
     b60:	8a 95       	dec	r24
     b62:	e1 f7       	brne	.-8      	; 0xb5c <main+0xf2>
			can_write(&msg, MCP_TXB0CTRL);
     b64:	60 e3       	ldi	r22, 0x30	; 48
     b66:	ce 01       	movw	r24, r28
     b68:	01 96       	adiw	r24, 0x01	; 1
     b6a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
			
			msg_data = JOY_read_right_button();
     b6e:	0e 94 a3 04 	call	0x946	; 0x946 <JOY_read_right_button>
     b72:	88 8f       	std	Y+24, r24	; 0x18
			msg = new_can_message(MCP_SOLENOID_MESSAGE, 1, &msg_data);
     b74:	9e 01       	movw	r18, r28
     b76:	28 5e       	subi	r18, 0xE8	; 232
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	67 e7       	ldi	r22, 0x77	; 119
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	ce 01       	movw	r24, r28
     b82:	49 96       	adiw	r24, 0x19	; 25
     b84:	0e 94 b1 02 	call	0x562	; 0x562 <new_can_message>
     b88:	fe 01       	movw	r30, r28
     b8a:	79 96       	adiw	r30, 0x19	; 25
     b8c:	de 01       	movw	r26, r28
     b8e:	11 96       	adiw	r26, 0x01	; 1
     b90:	8d 2d       	mov	r24, r13
     b92:	01 90       	ld	r0, Z+
     b94:	0d 92       	st	X+, r0
     b96:	8a 95       	dec	r24
     b98:	e1 f7       	brne	.-8      	; 0xb92 <main+0x128>
			can_write(&msg, MCP_TXB0CTRL);
     b9a:	60 e3       	ldi	r22, 0x30	; 48
     b9c:	ce 01       	movw	r24, r28
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <can_write>
			
		}
     ba4:	9a cf       	rjmp	.-204    	; 0xada <main+0x70>

00000ba6 <new_Menu>:
	
	
	interface_print(mainMenu);
	return mainMenu;
}
Menu* new_Menu(char* title, void(*action)(void), uint8_t num_submenus){
     ba6:	cf 92       	push	r12
     ba8:	df 92       	push	r13
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	1f 92       	push	r1
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	8c 01       	movw	r16, r24
     bbe:	7b 01       	movw	r14, r22
	Menu* m = malloc(sizeof(Menu));
     bc0:	89 e0       	ldi	r24, 0x09	; 9
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	49 83       	std	Y+1, r20	; 0x01
     bc6:	0e 94 44 09 	call	0x1288	; 0x1288 <malloc>
     bca:	6c 01       	movw	r12, r24
	
	m->title = title;
     bcc:	fc 01       	movw	r30, r24
     bce:	16 83       	std	Z+6, r17	; 0x06
     bd0:	05 83       	std	Z+5, r16	; 0x05
	m->num_submenus = num_submenus;
     bd2:	49 81       	ldd	r20, Y+1	; 0x01
     bd4:	40 83       	st	Z, r20
	m->action = action;
     bd6:	f0 86       	std	Z+8, r15	; 0x08
     bd8:	e7 82       	std	Z+7, r14	; 0x07
	m->submenus = malloc(sizeof(Menu)*num_submenus);
     bda:	f9 e0       	ldi	r31, 0x09	; 9
     bdc:	4f 9f       	mul	r20, r31
     bde:	c0 01       	movw	r24, r0
     be0:	11 24       	eor	r1, r1
     be2:	0e 94 44 09 	call	0x1288	; 0x1288 <malloc>
     be6:	f6 01       	movw	r30, r12
     be8:	92 83       	std	Z+2, r25	; 0x02
     bea:	81 83       	std	Z+1, r24	; 0x01
	return m;
}
     bec:	c6 01       	movw	r24, r12
     bee:	0f 90       	pop	r0
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	df 90       	pop	r13
     bfe:	cf 90       	pop	r12
     c00:	08 95       	ret

00000c02 <draw_selector>:
	}
	
	draw_selector(1);
	
}
void draw_selector(int select_pos){
     c02:	cf 93       	push	r28
     c04:	c8 2f       	mov	r28, r24
	oled_set_start_col(0);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 c8 04 	call	0x990	; 0x990 <oled_set_start_col>
	oled_write(' ');
     c0e:	80 e2       	ldi	r24, 0x20	; 32
     c10:	0e 94 b4 04 	call	0x968	; 0x968 <oled_write>
	
	oled_set_start_col(0);
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	0e 94 c8 04 	call	0x990	; 0x990 <oled_set_start_col>
	oled_control_assign(0xb0 + select_pos);
     c1c:	80 eb       	ldi	r24, 0xB0	; 176
     c1e:	8c 0f       	add	r24, r28
     c20:	0e 94 a7 04 	call	0x94e	; 0x94e <oled_control_assign>
	oled_write_selector();
     c24:	0e 94 aa 04 	call	0x954	; 0x954 <oled_write_selector>
	
	oled_set_start_col(8);
     c28:	88 e0       	ldi	r24, 0x08	; 8
     c2a:	90 e0       	ldi	r25, 0x00	; 0
}
     c2c:	cf 91       	pop	r28
	
	oled_set_start_col(0);
	oled_control_assign(0xb0 + select_pos);
	oled_write_selector();
	
	oled_set_start_col(8);
     c2e:	0c 94 c8 04 	jmp	0x990	; 0x990 <oled_set_start_col>

00000c32 <interface_print>:
	m->num_submenus = num_submenus;
	m->action = action;
	m->submenus = malloc(sizeof(Menu)*num_submenus);
	return m;
}
void interface_print(Menu *menu){
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	ec 01       	movw	r28, r24
	oled_clear_screen();
     c40:	0e 94 df 04 	call	0x9be	; 0x9be <oled_clear_screen>
	oled_set_start_col(0);
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 c8 04 	call	0x990	; 0x990 <oled_set_start_col>
	printf("Title: %s\n", menu->title);
     c4c:	8e 81       	ldd	r24, Y+6	; 0x06
     c4e:	8f 93       	push	r24
     c50:	8d 81       	ldd	r24, Y+5	; 0x05
     c52:	8f 93       	push	r24
     c54:	89 e6       	ldi	r24, 0x69	; 105
     c56:	91 e0       	ldi	r25, 0x01	; 1
     c58:	9f 93       	push	r25
     c5a:	8f 93       	push	r24
     c5c:	0e 94 b6 0a 	call	0x156c	; 0x156c <printf>
	oled_write_string(menu->title, 0);
     c60:	60 e0       	ldi	r22, 0x00	; 0
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	9e 81       	ldd	r25, Y+6	; 0x06
     c68:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <oled_write_string>
	
	for(int i = 0; i < menu->num_submenus; i++){
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	0f 90       	pop	r0
     c74:	e1 2c       	mov	r14, r1
     c76:	f1 2c       	mov	r15, r1
     c78:	00 e0       	ldi	r16, 0x00	; 0
     c7a:	10 e0       	ldi	r17, 0x00	; 0
     c7c:	88 81       	ld	r24, Y
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	08 17       	cp	r16, r24
     c82:	19 07       	cpc	r17, r25
     c84:	b4 f4       	brge	.+44     	; 0xcb2 <interface_print+0x80>
		oled_set_start_col(10);
     c86:	8a e0       	ldi	r24, 0x0A	; 10
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 c8 04 	call	0x990	; 0x990 <oled_set_start_col>
		oled_write_string(menu->submenus[i]->title, i + 1);
     c8e:	0f 5f       	subi	r16, 0xFF	; 255
     c90:	1f 4f       	sbci	r17, 0xFF	; 255
     c92:	e9 81       	ldd	r30, Y+1	; 0x01
     c94:	fa 81       	ldd	r31, Y+2	; 0x02
     c96:	ee 0d       	add	r30, r14
     c98:	ff 1d       	adc	r31, r15
     c9a:	01 90       	ld	r0, Z+
     c9c:	f0 81       	ld	r31, Z
     c9e:	e0 2d       	mov	r30, r0
     ca0:	b8 01       	movw	r22, r16
     ca2:	85 81       	ldd	r24, Z+5	; 0x05
     ca4:	96 81       	ldd	r25, Z+6	; 0x06
     ca6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <oled_write_string>
     caa:	82 e0       	ldi	r24, 0x02	; 2
     cac:	e8 0e       	add	r14, r24
     cae:	f1 1c       	adc	r15, r1
     cb0:	e5 cf       	rjmp	.-54     	; 0xc7c <interface_print+0x4a>
	}
	
	draw_selector(1);
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
	
}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
	for(int i = 0; i < menu->num_submenus; i++){
		oled_set_start_col(10);
		oled_write_string(menu->submenus[i]->title, i + 1);
	}
	
	draw_selector(1);
     cc2:	0c 94 01 06 	jmp	0xc02	; 0xc02 <draw_selector>

00000cc6 <interface_init>:
#include <stdint.h>
#include <avr/io.h>
#include <stdio.h>
#include <stdlib.h>

Menu* interface_init(){
     cc6:	ef 92       	push	r14
     cc8:	ff 92       	push	r15
     cca:	0f 93       	push	r16
     ccc:	1f 93       	push	r17
     cce:	cf 93       	push	r28
     cd0:	df 93       	push	r29
	Menu *mainMenu = new_Menu("Main menu", NULL, 2);
     cd2:	42 e0       	ldi	r20, 0x02	; 2
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	84 e7       	ldi	r24, 0x74	; 116
     cda:	91 e0       	ldi	r25, 0x01	; 1
     cdc:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_Menu>
     ce0:	ec 01       	movw	r28, r24
	Menu *menu1 = new_Menu("Screen options", NULL, 1);
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	60 e0       	ldi	r22, 0x00	; 0
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	8e e7       	ldi	r24, 0x7E	; 126
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_Menu>
     cf0:	8c 01       	movw	r16, r24
	Menu *menu2 = new_Menu("High scores", NULL, 1);
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	8d e8       	ldi	r24, 0x8D	; 141
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_Menu>
     d00:	7c 01       	movw	r14, r24
	Menu *menu11 = new_Menu("Party mode", oled_initiate_party_mode, 0);
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	6c e1       	ldi	r22, 0x1C	; 28
     d06:	75 e0       	ldi	r23, 0x05	; 5
     d08:	89 e9       	ldi	r24, 0x99	; 153
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 d3 05 	call	0xba6	; 0xba6 <new_Menu>
	mainMenu->submenus[0] = menu1, mainMenu->submenus[1] = menu2;
     d10:	e9 81       	ldd	r30, Y+1	; 0x01
     d12:	fa 81       	ldd	r31, Y+2	; 0x02
     d14:	11 83       	std	Z+1, r17	; 0x01
     d16:	00 83       	st	Z, r16
     d18:	e9 81       	ldd	r30, Y+1	; 0x01
     d1a:	fa 81       	ldd	r31, Y+2	; 0x02
     d1c:	f3 82       	std	Z+3, r15	; 0x03
     d1e:	e2 82       	std	Z+2, r14	; 0x02
	menu1->submenus[0] = menu11, menu1->prev = mainMenu;
     d20:	d8 01       	movw	r26, r16
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	ed 91       	ld	r30, X+
     d26:	fc 91       	ld	r31, X
     d28:	12 97       	sbiw	r26, 0x02	; 2
     d2a:	91 83       	std	Z+1, r25	; 0x01
     d2c:	80 83       	st	Z, r24
     d2e:	14 96       	adiw	r26, 0x04	; 4
     d30:	dc 93       	st	X, r29
     d32:	ce 93       	st	-X, r28
     d34:	13 97       	sbiw	r26, 0x03	; 3
	menu2->prev = mainMenu;
     d36:	f7 01       	movw	r30, r14
     d38:	d4 83       	std	Z+4, r29	; 0x04
     d3a:	c3 83       	std	Z+3, r28	; 0x03
	menu11->submenus = NULL;
     d3c:	dc 01       	movw	r26, r24
     d3e:	12 96       	adiw	r26, 0x02	; 2
     d40:	1c 92       	st	X, r1
     d42:	1e 92       	st	-X, r1
     d44:	11 97       	sbiw	r26, 0x01	; 1
	
	
	interface_print(mainMenu);
     d46:	ce 01       	movw	r24, r28
     d48:	0e 94 19 06 	call	0xc32	; 0xc32 <interface_print>
	return mainMenu;
}
     d4c:	ce 01       	movw	r24, r28
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	08 95       	ret

00000d5c <interface_select>:
	oled_control_assign(0xb0 + select_pos);
	oled_write_selector();
	
	oled_set_start_col(8);
}
void interface_select(Joystick joy, int *select_pos, Menu *(*current_menu)){
     d5c:	df 92       	push	r13
     d5e:	ef 92       	push	r14
     d60:	ff 92       	push	r15
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	28 97       	sbiw	r28, 0x08	; 8
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	29 83       	std	Y+1, r18	; 0x01
     d7c:	3a 83       	std	Y+2, r19	; 0x02
     d7e:	4b 83       	std	Y+3, r20	; 0x03
     d80:	5c 83       	std	Y+4, r21	; 0x04
     d82:	6d 83       	std	Y+5, r22	; 0x05
     d84:	7e 83       	std	Y+6, r23	; 0x06
     d86:	8f 83       	std	Y+7, r24	; 0x07
     d88:	98 87       	std	Y+8, r25	; 0x08
	direction previous_direction = NEUTRAL;
     d8a:	d1 2c       	mov	r13, r1

	while(JOY_get_direction(joy) != NEUTRAL){
     d8c:	29 81       	ldd	r18, Y+1	; 0x01
     d8e:	3a 81       	ldd	r19, Y+2	; 0x02
     d90:	4b 81       	ldd	r20, Y+3	; 0x03
     d92:	5c 81       	ldd	r21, Y+4	; 0x04
     d94:	6d 81       	ldd	r22, Y+5	; 0x05
     d96:	7e 81       	ldd	r23, Y+6	; 0x06
     d98:	8f 81       	ldd	r24, Y+7	; 0x07
     d9a:	98 85       	ldd	r25, Y+8	; 0x08
     d9c:	0e 94 18 04 	call	0x830	; 0x830 <JOY_get_direction>
     da0:	88 23       	and	r24, r24
     da2:	81 f0       	breq	.+32     	; 0xdc4 <interface_select+0x68>
		previous_direction = JOY_get_direction(joy);
     da4:	29 81       	ldd	r18, Y+1	; 0x01
     da6:	3a 81       	ldd	r19, Y+2	; 0x02
     da8:	4b 81       	ldd	r20, Y+3	; 0x03
     daa:	5c 81       	ldd	r21, Y+4	; 0x04
     dac:	6d 81       	ldd	r22, Y+5	; 0x05
     dae:	7e 81       	ldd	r23, Y+6	; 0x06
     db0:	8f 81       	ldd	r24, Y+7	; 0x07
     db2:	98 85       	ldd	r25, Y+8	; 0x08
     db4:	0e 94 18 04 	call	0x830	; 0x830 <JOY_get_direction>
     db8:	d8 2e       	mov	r13, r24
		JOY_read_joystick(&joy);
     dba:	ce 01       	movw	r24, r28
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	0e 94 89 04 	call	0x912	; 0x912 <JOY_read_joystick>
     dc2:	e4 cf       	rjmp	.-56     	; 0xd8c <interface_select+0x30>
	} //Wait for joy to reach neutral position.
	
	switch(previous_direction){
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	d8 16       	cp	r13, r24
     dc8:	d1 f0       	breq	.+52     	; 0xdfe <interface_select+0xa2>
     dca:	8d 15       	cp	r24, r13
     dcc:	20 f0       	brcs	.+8      	; 0xdd6 <interface_select+0x7a>
     dce:	a1 e0       	ldi	r26, 0x01	; 1
     dd0:	da 16       	cp	r13, r26
     dd2:	49 f0       	breq	.+18     	; 0xde6 <interface_select+0x8a>
     dd4:	5c c0       	rjmp	.+184    	; 0xe8e <interface_select+0x132>
     dd6:	b3 e0       	ldi	r27, 0x03	; 3
     dd8:	db 16       	cp	r13, r27
     dda:	09 f4       	brne	.+2      	; 0xdde <interface_select+0x82>
     ddc:	47 c0       	rjmp	.+142    	; 0xe6c <interface_select+0x110>
     dde:	e4 e0       	ldi	r30, 0x04	; 4
     de0:	de 16       	cp	r13, r30
     de2:	f9 f0       	breq	.+62     	; 0xe22 <interface_select+0xc6>
     de4:	54 c0       	rjmp	.+168    	; 0xe8e <interface_select+0x132>
		case UP:
			if(*select_pos != 1){
     de6:	d8 01       	movw	r26, r16
     de8:	8d 91       	ld	r24, X+
     dea:	9c 91       	ld	r25, X
     dec:	11 97       	sbiw	r26, 0x01	; 1
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	91 05       	cpc	r25, r1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <interface_select+0x9a>
     df4:	4c c0       	rjmp	.+152    	; 0xe8e <interface_select+0x132>
				(*select_pos)--;
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	8d 93       	st	X+, r24
     dfa:	9c 93       	st	X, r25
     dfc:	0f c0       	rjmp	.+30     	; 0xe1c <interface_select+0xc0>
				draw_selector(*select_pos);
			}
			break;
			
		case DOWN:
			if((*current_menu)->num_submenus != *select_pos){
     dfe:	f8 01       	movw	r30, r16
     e00:	80 81       	ld	r24, Z
     e02:	91 81       	ldd	r25, Z+1	; 0x01
     e04:	d7 01       	movw	r26, r14
     e06:	ed 91       	ld	r30, X+
     e08:	fc 91       	ld	r31, X
     e0a:	20 81       	ld	r18, Z
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	28 17       	cp	r18, r24
     e10:	39 07       	cpc	r19, r25
     e12:	e9 f1       	breq	.+122    	; 0xe8e <interface_select+0x132>
				(*select_pos)++;
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	f8 01       	movw	r30, r16
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	80 83       	st	Z, r24
				draw_selector(*select_pos);
     e1c:	0e 94 01 06 	call	0xc02	; 0xc02 <draw_selector>
     e20:	36 c0       	rjmp	.+108    	; 0xe8e <interface_select+0x132>
			}
			break;
			
		case RIGHT:
			if((*current_menu)->submenus[*select_pos-1]->num_submenus){
     e22:	d7 01       	movw	r26, r14
     e24:	ed 91       	ld	r30, X+
     e26:	fc 91       	ld	r31, X
     e28:	d8 01       	movw	r26, r16
     e2a:	8d 91       	ld	r24, X+
     e2c:	9c 91       	ld	r25, X
     e2e:	81 50       	subi	r24, 0x01	; 1
     e30:	90 48       	sbci	r25, 0x80	; 128
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	01 80       	ldd	r0, Z+1	; 0x01
     e38:	f2 81       	ldd	r31, Z+2	; 0x02
     e3a:	e0 2d       	mov	r30, r0
     e3c:	e8 0f       	add	r30, r24
     e3e:	f9 1f       	adc	r31, r25
     e40:	80 81       	ld	r24, Z
     e42:	91 81       	ldd	r25, Z+1	; 0x01
     e44:	fc 01       	movw	r30, r24
     e46:	20 81       	ld	r18, Z
     e48:	22 23       	and	r18, r18
     e4a:	59 f0       	breq	.+22     	; 0xe62 <interface_select+0x106>
				(*current_menu) = (*current_menu)->submenus[*select_pos-1];
     e4c:	d7 01       	movw	r26, r14
     e4e:	8d 93       	st	X+, r24
     e50:	9c 93       	st	X, r25
				interface_print((*current_menu));
     e52:	0e 94 19 06 	call	0xc32	; 0xc32 <interface_print>
				*select_pos = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	f8 01       	movw	r30, r16
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	16 c0       	rjmp	.+44     	; 0xe8e <interface_select+0x132>
				
			}
			else{
				(*current_menu)->submenus[*select_pos-1]->action();
     e62:	07 80       	ldd	r0, Z+7	; 0x07
     e64:	f0 85       	ldd	r31, Z+8	; 0x08
     e66:	e0 2d       	mov	r30, r0
     e68:	09 95       	icall
     e6a:	11 c0       	rjmp	.+34     	; 0xe8e <interface_select+0x132>
			}
			
			break;
			
		case LEFT:
			if((*current_menu)->prev){
     e6c:	d7 01       	movw	r26, r14
     e6e:	ed 91       	ld	r30, X+
     e70:	fc 91       	ld	r31, X
     e72:	11 97       	sbiw	r26, 0x01	; 1
     e74:	83 81       	ldd	r24, Z+3	; 0x03
     e76:	94 81       	ldd	r25, Z+4	; 0x04
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	49 f0       	breq	.+18     	; 0xe8e <interface_select+0x132>
				*select_pos = 1;
     e7c:	21 e0       	ldi	r18, 0x01	; 1
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	f8 01       	movw	r30, r16
     e82:	31 83       	std	Z+1, r19	; 0x01
     e84:	20 83       	st	Z, r18
				(*current_menu) = (*current_menu)->prev;
     e86:	8d 93       	st	X+, r24
     e88:	9c 93       	st	X, r25
				interface_print((*current_menu));
     e8a:	0e 94 19 06 	call	0xc32	; 0xc32 <interface_print>
			break;
		case NEUTRAL:
			break;
		
	}
     e8e:	28 96       	adiw	r28, 0x08	; 8
     e90:	0f b6       	in	r0, 0x3f	; 63
     e92:	f8 94       	cli
     e94:	de bf       	out	0x3e, r29	; 62
     e96:	0f be       	out	0x3f, r0	; 63
     e98:	cd bf       	out	0x3d, r28	; 61
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	ef 90       	pop	r14
     ea6:	df 90       	pop	r13
     ea8:	08 95       	ret

00000eaa <__subsf3>:
     eaa:	50 58       	subi	r21, 0x80	; 128

00000eac <__addsf3>:
     eac:	bb 27       	eor	r27, r27
     eae:	aa 27       	eor	r26, r26
     eb0:	0e d0       	rcall	.+28     	; 0xece <__addsf3x>
     eb2:	4d c1       	rjmp	.+666    	; 0x114e <__fp_round>
     eb4:	3e d1       	rcall	.+636    	; 0x1132 <__fp_pscA>
     eb6:	30 f0       	brcs	.+12     	; 0xec4 <__addsf3+0x18>
     eb8:	43 d1       	rcall	.+646    	; 0x1140 <__fp_pscB>
     eba:	20 f0       	brcs	.+8      	; 0xec4 <__addsf3+0x18>
     ebc:	31 f4       	brne	.+12     	; 0xeca <__addsf3+0x1e>
     ebe:	9f 3f       	cpi	r25, 0xFF	; 255
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__addsf3+0x1a>
     ec2:	1e f4       	brtc	.+6      	; 0xeca <__addsf3+0x1e>
     ec4:	33 c1       	rjmp	.+614    	; 0x112c <__fp_nan>
     ec6:	0e f4       	brtc	.+2      	; 0xeca <__addsf3+0x1e>
     ec8:	e0 95       	com	r30
     eca:	e7 fb       	bst	r30, 7
     ecc:	29 c1       	rjmp	.+594    	; 0x1120 <__fp_inf>

00000ece <__addsf3x>:
     ece:	e9 2f       	mov	r30, r25
     ed0:	4f d1       	rcall	.+670    	; 0x1170 <__fp_split3>
     ed2:	80 f3       	brcs	.-32     	; 0xeb4 <__addsf3+0x8>
     ed4:	ba 17       	cp	r27, r26
     ed6:	62 07       	cpc	r22, r18
     ed8:	73 07       	cpc	r23, r19
     eda:	84 07       	cpc	r24, r20
     edc:	95 07       	cpc	r25, r21
     ede:	18 f0       	brcs	.+6      	; 0xee6 <__addsf3x+0x18>
     ee0:	71 f4       	brne	.+28     	; 0xefe <__addsf3x+0x30>
     ee2:	9e f5       	brtc	.+102    	; 0xf4a <__addsf3x+0x7c>
     ee4:	67 c1       	rjmp	.+718    	; 0x11b4 <__fp_zero>
     ee6:	0e f4       	brtc	.+2      	; 0xeea <__addsf3x+0x1c>
     ee8:	e0 95       	com	r30
     eea:	0b 2e       	mov	r0, r27
     eec:	ba 2f       	mov	r27, r26
     eee:	a0 2d       	mov	r26, r0
     ef0:	0b 01       	movw	r0, r22
     ef2:	b9 01       	movw	r22, r18
     ef4:	90 01       	movw	r18, r0
     ef6:	0c 01       	movw	r0, r24
     ef8:	ca 01       	movw	r24, r20
     efa:	a0 01       	movw	r20, r0
     efc:	11 24       	eor	r1, r1
     efe:	ff 27       	eor	r31, r31
     f00:	59 1b       	sub	r21, r25
     f02:	99 f0       	breq	.+38     	; 0xf2a <__addsf3x+0x5c>
     f04:	59 3f       	cpi	r21, 0xF9	; 249
     f06:	50 f4       	brcc	.+20     	; 0xf1c <__addsf3x+0x4e>
     f08:	50 3e       	cpi	r21, 0xE0	; 224
     f0a:	68 f1       	brcs	.+90     	; 0xf66 <__addsf3x+0x98>
     f0c:	1a 16       	cp	r1, r26
     f0e:	f0 40       	sbci	r31, 0x00	; 0
     f10:	a2 2f       	mov	r26, r18
     f12:	23 2f       	mov	r18, r19
     f14:	34 2f       	mov	r19, r20
     f16:	44 27       	eor	r20, r20
     f18:	58 5f       	subi	r21, 0xF8	; 248
     f1a:	f3 cf       	rjmp	.-26     	; 0xf02 <__addsf3x+0x34>
     f1c:	46 95       	lsr	r20
     f1e:	37 95       	ror	r19
     f20:	27 95       	ror	r18
     f22:	a7 95       	ror	r26
     f24:	f0 40       	sbci	r31, 0x00	; 0
     f26:	53 95       	inc	r21
     f28:	c9 f7       	brne	.-14     	; 0xf1c <__addsf3x+0x4e>
     f2a:	7e f4       	brtc	.+30     	; 0xf4a <__addsf3x+0x7c>
     f2c:	1f 16       	cp	r1, r31
     f2e:	ba 0b       	sbc	r27, r26
     f30:	62 0b       	sbc	r22, r18
     f32:	73 0b       	sbc	r23, r19
     f34:	84 0b       	sbc	r24, r20
     f36:	ba f0       	brmi	.+46     	; 0xf66 <__addsf3x+0x98>
     f38:	91 50       	subi	r25, 0x01	; 1
     f3a:	a1 f0       	breq	.+40     	; 0xf64 <__addsf3x+0x96>
     f3c:	ff 0f       	add	r31, r31
     f3e:	bb 1f       	adc	r27, r27
     f40:	66 1f       	adc	r22, r22
     f42:	77 1f       	adc	r23, r23
     f44:	88 1f       	adc	r24, r24
     f46:	c2 f7       	brpl	.-16     	; 0xf38 <__addsf3x+0x6a>
     f48:	0e c0       	rjmp	.+28     	; 0xf66 <__addsf3x+0x98>
     f4a:	ba 0f       	add	r27, r26
     f4c:	62 1f       	adc	r22, r18
     f4e:	73 1f       	adc	r23, r19
     f50:	84 1f       	adc	r24, r20
     f52:	48 f4       	brcc	.+18     	; 0xf66 <__addsf3x+0x98>
     f54:	87 95       	ror	r24
     f56:	77 95       	ror	r23
     f58:	67 95       	ror	r22
     f5a:	b7 95       	ror	r27
     f5c:	f7 95       	ror	r31
     f5e:	9e 3f       	cpi	r25, 0xFE	; 254
     f60:	08 f0       	brcs	.+2      	; 0xf64 <__addsf3x+0x96>
     f62:	b3 cf       	rjmp	.-154    	; 0xeca <__addsf3+0x1e>
     f64:	93 95       	inc	r25
     f66:	88 0f       	add	r24, r24
     f68:	08 f0       	brcs	.+2      	; 0xf6c <__addsf3x+0x9e>
     f6a:	99 27       	eor	r25, r25
     f6c:	ee 0f       	add	r30, r30
     f6e:	97 95       	ror	r25
     f70:	87 95       	ror	r24
     f72:	08 95       	ret

00000f74 <__divsf3>:
     f74:	0c d0       	rcall	.+24     	; 0xf8e <__divsf3x>
     f76:	eb c0       	rjmp	.+470    	; 0x114e <__fp_round>
     f78:	e3 d0       	rcall	.+454    	; 0x1140 <__fp_pscB>
     f7a:	40 f0       	brcs	.+16     	; 0xf8c <__divsf3+0x18>
     f7c:	da d0       	rcall	.+436    	; 0x1132 <__fp_pscA>
     f7e:	30 f0       	brcs	.+12     	; 0xf8c <__divsf3+0x18>
     f80:	21 f4       	brne	.+8      	; 0xf8a <__divsf3+0x16>
     f82:	5f 3f       	cpi	r21, 0xFF	; 255
     f84:	19 f0       	breq	.+6      	; 0xf8c <__divsf3+0x18>
     f86:	cc c0       	rjmp	.+408    	; 0x1120 <__fp_inf>
     f88:	51 11       	cpse	r21, r1
     f8a:	15 c1       	rjmp	.+554    	; 0x11b6 <__fp_szero>
     f8c:	cf c0       	rjmp	.+414    	; 0x112c <__fp_nan>

00000f8e <__divsf3x>:
     f8e:	f0 d0       	rcall	.+480    	; 0x1170 <__fp_split3>
     f90:	98 f3       	brcs	.-26     	; 0xf78 <__divsf3+0x4>

00000f92 <__divsf3_pse>:
     f92:	99 23       	and	r25, r25
     f94:	c9 f3       	breq	.-14     	; 0xf88 <__divsf3+0x14>
     f96:	55 23       	and	r21, r21
     f98:	b1 f3       	breq	.-20     	; 0xf86 <__divsf3+0x12>
     f9a:	95 1b       	sub	r25, r21
     f9c:	55 0b       	sbc	r21, r21
     f9e:	bb 27       	eor	r27, r27
     fa0:	aa 27       	eor	r26, r26
     fa2:	62 17       	cp	r22, r18
     fa4:	73 07       	cpc	r23, r19
     fa6:	84 07       	cpc	r24, r20
     fa8:	38 f0       	brcs	.+14     	; 0xfb8 <__divsf3_pse+0x26>
     faa:	9f 5f       	subi	r25, 0xFF	; 255
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	44 1f       	adc	r20, r20
     fb4:	aa 1f       	adc	r26, r26
     fb6:	a9 f3       	breq	.-22     	; 0xfa2 <__divsf3_pse+0x10>
     fb8:	33 d0       	rcall	.+102    	; 0x1020 <__divsf3_pse+0x8e>
     fba:	0e 2e       	mov	r0, r30
     fbc:	3a f0       	brmi	.+14     	; 0xfcc <__divsf3_pse+0x3a>
     fbe:	e0 e8       	ldi	r30, 0x80	; 128
     fc0:	30 d0       	rcall	.+96     	; 0x1022 <__divsf3_pse+0x90>
     fc2:	91 50       	subi	r25, 0x01	; 1
     fc4:	50 40       	sbci	r21, 0x00	; 0
     fc6:	e6 95       	lsr	r30
     fc8:	00 1c       	adc	r0, r0
     fca:	ca f7       	brpl	.-14     	; 0xfbe <__divsf3_pse+0x2c>
     fcc:	29 d0       	rcall	.+82     	; 0x1020 <__divsf3_pse+0x8e>
     fce:	fe 2f       	mov	r31, r30
     fd0:	27 d0       	rcall	.+78     	; 0x1020 <__divsf3_pse+0x8e>
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	bb 1f       	adc	r27, r27
     fda:	26 17       	cp	r18, r22
     fdc:	37 07       	cpc	r19, r23
     fde:	48 07       	cpc	r20, r24
     fe0:	ab 07       	cpc	r26, r27
     fe2:	b0 e8       	ldi	r27, 0x80	; 128
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <__divsf3_pse+0x56>
     fe6:	bb 0b       	sbc	r27, r27
     fe8:	80 2d       	mov	r24, r0
     fea:	bf 01       	movw	r22, r30
     fec:	ff 27       	eor	r31, r31
     fee:	93 58       	subi	r25, 0x83	; 131
     ff0:	5f 4f       	sbci	r21, 0xFF	; 255
     ff2:	2a f0       	brmi	.+10     	; 0xffe <__divsf3_pse+0x6c>
     ff4:	9e 3f       	cpi	r25, 0xFE	; 254
     ff6:	51 05       	cpc	r21, r1
     ff8:	68 f0       	brcs	.+26     	; 0x1014 <__divsf3_pse+0x82>
     ffa:	92 c0       	rjmp	.+292    	; 0x1120 <__fp_inf>
     ffc:	dc c0       	rjmp	.+440    	; 0x11b6 <__fp_szero>
     ffe:	5f 3f       	cpi	r21, 0xFF	; 255
    1000:	ec f3       	brlt	.-6      	; 0xffc <__divsf3_pse+0x6a>
    1002:	98 3e       	cpi	r25, 0xE8	; 232
    1004:	dc f3       	brlt	.-10     	; 0xffc <__divsf3_pse+0x6a>
    1006:	86 95       	lsr	r24
    1008:	77 95       	ror	r23
    100a:	67 95       	ror	r22
    100c:	b7 95       	ror	r27
    100e:	f7 95       	ror	r31
    1010:	9f 5f       	subi	r25, 0xFF	; 255
    1012:	c9 f7       	brne	.-14     	; 0x1006 <__divsf3_pse+0x74>
    1014:	88 0f       	add	r24, r24
    1016:	91 1d       	adc	r25, r1
    1018:	96 95       	lsr	r25
    101a:	87 95       	ror	r24
    101c:	97 f9       	bld	r25, 7
    101e:	08 95       	ret
    1020:	e1 e0       	ldi	r30, 0x01	; 1
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	bb 1f       	adc	r27, r27
    102a:	62 17       	cp	r22, r18
    102c:	73 07       	cpc	r23, r19
    102e:	84 07       	cpc	r24, r20
    1030:	ba 07       	cpc	r27, r26
    1032:	20 f0       	brcs	.+8      	; 0x103c <__divsf3_pse+0xaa>
    1034:	62 1b       	sub	r22, r18
    1036:	73 0b       	sbc	r23, r19
    1038:	84 0b       	sbc	r24, r20
    103a:	ba 0b       	sbc	r27, r26
    103c:	ee 1f       	adc	r30, r30
    103e:	88 f7       	brcc	.-30     	; 0x1022 <__divsf3_pse+0x90>
    1040:	e0 95       	com	r30
    1042:	08 95       	ret

00001044 <__fixsfsi>:
    1044:	04 d0       	rcall	.+8      	; 0x104e <__fixunssfsi>
    1046:	68 94       	set
    1048:	b1 11       	cpse	r27, r1
    104a:	b5 c0       	rjmp	.+362    	; 0x11b6 <__fp_szero>
    104c:	08 95       	ret

0000104e <__fixunssfsi>:
    104e:	98 d0       	rcall	.+304    	; 0x1180 <__fp_splitA>
    1050:	88 f0       	brcs	.+34     	; 0x1074 <__fixunssfsi+0x26>
    1052:	9f 57       	subi	r25, 0x7F	; 127
    1054:	90 f0       	brcs	.+36     	; 0x107a <__fixunssfsi+0x2c>
    1056:	b9 2f       	mov	r27, r25
    1058:	99 27       	eor	r25, r25
    105a:	b7 51       	subi	r27, 0x17	; 23
    105c:	a0 f0       	brcs	.+40     	; 0x1086 <__fixunssfsi+0x38>
    105e:	d1 f0       	breq	.+52     	; 0x1094 <__fixunssfsi+0x46>
    1060:	66 0f       	add	r22, r22
    1062:	77 1f       	adc	r23, r23
    1064:	88 1f       	adc	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	1a f0       	brmi	.+6      	; 0x1070 <__fixunssfsi+0x22>
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__fixunssfsi+0x12>
    106e:	12 c0       	rjmp	.+36     	; 0x1094 <__fixunssfsi+0x46>
    1070:	b1 30       	cpi	r27, 0x01	; 1
    1072:	81 f0       	breq	.+32     	; 0x1094 <__fixunssfsi+0x46>
    1074:	9f d0       	rcall	.+318    	; 0x11b4 <__fp_zero>
    1076:	b1 e0       	ldi	r27, 0x01	; 1
    1078:	08 95       	ret
    107a:	9c c0       	rjmp	.+312    	; 0x11b4 <__fp_zero>
    107c:	67 2f       	mov	r22, r23
    107e:	78 2f       	mov	r23, r24
    1080:	88 27       	eor	r24, r24
    1082:	b8 5f       	subi	r27, 0xF8	; 248
    1084:	39 f0       	breq	.+14     	; 0x1094 <__fixunssfsi+0x46>
    1086:	b9 3f       	cpi	r27, 0xF9	; 249
    1088:	cc f3       	brlt	.-14     	; 0x107c <__fixunssfsi+0x2e>
    108a:	86 95       	lsr	r24
    108c:	77 95       	ror	r23
    108e:	67 95       	ror	r22
    1090:	b3 95       	inc	r27
    1092:	d9 f7       	brne	.-10     	; 0x108a <__fixunssfsi+0x3c>
    1094:	3e f4       	brtc	.+14     	; 0x10a4 <__fixunssfsi+0x56>
    1096:	90 95       	com	r25
    1098:	80 95       	com	r24
    109a:	70 95       	com	r23
    109c:	61 95       	neg	r22
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	8f 4f       	sbci	r24, 0xFF	; 255
    10a2:	9f 4f       	sbci	r25, 0xFF	; 255
    10a4:	08 95       	ret

000010a6 <__floatunsisf>:
    10a6:	e8 94       	clt
    10a8:	09 c0       	rjmp	.+18     	; 0x10bc <__floatsisf+0x12>

000010aa <__floatsisf>:
    10aa:	97 fb       	bst	r25, 7
    10ac:	3e f4       	brtc	.+14     	; 0x10bc <__floatsisf+0x12>
    10ae:	90 95       	com	r25
    10b0:	80 95       	com	r24
    10b2:	70 95       	com	r23
    10b4:	61 95       	neg	r22
    10b6:	7f 4f       	sbci	r23, 0xFF	; 255
    10b8:	8f 4f       	sbci	r24, 0xFF	; 255
    10ba:	9f 4f       	sbci	r25, 0xFF	; 255
    10bc:	99 23       	and	r25, r25
    10be:	a9 f0       	breq	.+42     	; 0x10ea <__floatsisf+0x40>
    10c0:	f9 2f       	mov	r31, r25
    10c2:	96 e9       	ldi	r25, 0x96	; 150
    10c4:	bb 27       	eor	r27, r27
    10c6:	93 95       	inc	r25
    10c8:	f6 95       	lsr	r31
    10ca:	87 95       	ror	r24
    10cc:	77 95       	ror	r23
    10ce:	67 95       	ror	r22
    10d0:	b7 95       	ror	r27
    10d2:	f1 11       	cpse	r31, r1
    10d4:	f8 cf       	rjmp	.-16     	; 0x10c6 <__floatsisf+0x1c>
    10d6:	fa f4       	brpl	.+62     	; 0x1116 <__floatsisf+0x6c>
    10d8:	bb 0f       	add	r27, r27
    10da:	11 f4       	brne	.+4      	; 0x10e0 <__floatsisf+0x36>
    10dc:	60 ff       	sbrs	r22, 0
    10de:	1b c0       	rjmp	.+54     	; 0x1116 <__floatsisf+0x6c>
    10e0:	6f 5f       	subi	r22, 0xFF	; 255
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	8f 4f       	sbci	r24, 0xFF	; 255
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	16 c0       	rjmp	.+44     	; 0x1116 <__floatsisf+0x6c>
    10ea:	88 23       	and	r24, r24
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <__floatsisf+0x48>
    10ee:	96 e9       	ldi	r25, 0x96	; 150
    10f0:	11 c0       	rjmp	.+34     	; 0x1114 <__floatsisf+0x6a>
    10f2:	77 23       	and	r23, r23
    10f4:	21 f0       	breq	.+8      	; 0x10fe <__floatsisf+0x54>
    10f6:	9e e8       	ldi	r25, 0x8E	; 142
    10f8:	87 2f       	mov	r24, r23
    10fa:	76 2f       	mov	r23, r22
    10fc:	05 c0       	rjmp	.+10     	; 0x1108 <__floatsisf+0x5e>
    10fe:	66 23       	and	r22, r22
    1100:	71 f0       	breq	.+28     	; 0x111e <__floatsisf+0x74>
    1102:	96 e8       	ldi	r25, 0x86	; 134
    1104:	86 2f       	mov	r24, r22
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	2a f0       	brmi	.+10     	; 0x1116 <__floatsisf+0x6c>
    110c:	9a 95       	dec	r25
    110e:	66 0f       	add	r22, r22
    1110:	77 1f       	adc	r23, r23
    1112:	88 1f       	adc	r24, r24
    1114:	da f7       	brpl	.-10     	; 0x110c <__floatsisf+0x62>
    1116:	88 0f       	add	r24, r24
    1118:	96 95       	lsr	r25
    111a:	87 95       	ror	r24
    111c:	97 f9       	bld	r25, 7
    111e:	08 95       	ret

00001120 <__fp_inf>:
    1120:	97 f9       	bld	r25, 7
    1122:	9f 67       	ori	r25, 0x7F	; 127
    1124:	80 e8       	ldi	r24, 0x80	; 128
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	08 95       	ret

0000112c <__fp_nan>:
    112c:	9f ef       	ldi	r25, 0xFF	; 255
    112e:	80 ec       	ldi	r24, 0xC0	; 192
    1130:	08 95       	ret

00001132 <__fp_pscA>:
    1132:	00 24       	eor	r0, r0
    1134:	0a 94       	dec	r0
    1136:	16 16       	cp	r1, r22
    1138:	17 06       	cpc	r1, r23
    113a:	18 06       	cpc	r1, r24
    113c:	09 06       	cpc	r0, r25
    113e:	08 95       	ret

00001140 <__fp_pscB>:
    1140:	00 24       	eor	r0, r0
    1142:	0a 94       	dec	r0
    1144:	12 16       	cp	r1, r18
    1146:	13 06       	cpc	r1, r19
    1148:	14 06       	cpc	r1, r20
    114a:	05 06       	cpc	r0, r21
    114c:	08 95       	ret

0000114e <__fp_round>:
    114e:	09 2e       	mov	r0, r25
    1150:	03 94       	inc	r0
    1152:	00 0c       	add	r0, r0
    1154:	11 f4       	brne	.+4      	; 0x115a <__fp_round+0xc>
    1156:	88 23       	and	r24, r24
    1158:	52 f0       	brmi	.+20     	; 0x116e <__fp_round+0x20>
    115a:	bb 0f       	add	r27, r27
    115c:	40 f4       	brcc	.+16     	; 0x116e <__fp_round+0x20>
    115e:	bf 2b       	or	r27, r31
    1160:	11 f4       	brne	.+4      	; 0x1166 <__fp_round+0x18>
    1162:	60 ff       	sbrs	r22, 0
    1164:	04 c0       	rjmp	.+8      	; 0x116e <__fp_round+0x20>
    1166:	6f 5f       	subi	r22, 0xFF	; 255
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	8f 4f       	sbci	r24, 0xFF	; 255
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	08 95       	ret

00001170 <__fp_split3>:
    1170:	57 fd       	sbrc	r21, 7
    1172:	90 58       	subi	r25, 0x80	; 128
    1174:	44 0f       	add	r20, r20
    1176:	55 1f       	adc	r21, r21
    1178:	59 f0       	breq	.+22     	; 0x1190 <__fp_splitA+0x10>
    117a:	5f 3f       	cpi	r21, 0xFF	; 255
    117c:	71 f0       	breq	.+28     	; 0x119a <__fp_splitA+0x1a>
    117e:	47 95       	ror	r20

00001180 <__fp_splitA>:
    1180:	88 0f       	add	r24, r24
    1182:	97 fb       	bst	r25, 7
    1184:	99 1f       	adc	r25, r25
    1186:	61 f0       	breq	.+24     	; 0x11a0 <__fp_splitA+0x20>
    1188:	9f 3f       	cpi	r25, 0xFF	; 255
    118a:	79 f0       	breq	.+30     	; 0x11aa <__fp_splitA+0x2a>
    118c:	87 95       	ror	r24
    118e:	08 95       	ret
    1190:	12 16       	cp	r1, r18
    1192:	13 06       	cpc	r1, r19
    1194:	14 06       	cpc	r1, r20
    1196:	55 1f       	adc	r21, r21
    1198:	f2 cf       	rjmp	.-28     	; 0x117e <__fp_split3+0xe>
    119a:	46 95       	lsr	r20
    119c:	f1 df       	rcall	.-30     	; 0x1180 <__fp_splitA>
    119e:	08 c0       	rjmp	.+16     	; 0x11b0 <__fp_splitA+0x30>
    11a0:	16 16       	cp	r1, r22
    11a2:	17 06       	cpc	r1, r23
    11a4:	18 06       	cpc	r1, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	f1 cf       	rjmp	.-30     	; 0x118c <__fp_splitA+0xc>
    11aa:	86 95       	lsr	r24
    11ac:	71 05       	cpc	r23, r1
    11ae:	61 05       	cpc	r22, r1
    11b0:	08 94       	sec
    11b2:	08 95       	ret

000011b4 <__fp_zero>:
    11b4:	e8 94       	clt

000011b6 <__fp_szero>:
    11b6:	bb 27       	eor	r27, r27
    11b8:	66 27       	eor	r22, r22
    11ba:	77 27       	eor	r23, r23
    11bc:	cb 01       	movw	r24, r22
    11be:	97 f9       	bld	r25, 7
    11c0:	08 95       	ret

000011c2 <__mulsf3>:
    11c2:	0b d0       	rcall	.+22     	; 0x11da <__mulsf3x>
    11c4:	c4 cf       	rjmp	.-120    	; 0x114e <__fp_round>
    11c6:	b5 df       	rcall	.-150    	; 0x1132 <__fp_pscA>
    11c8:	28 f0       	brcs	.+10     	; 0x11d4 <__mulsf3+0x12>
    11ca:	ba df       	rcall	.-140    	; 0x1140 <__fp_pscB>
    11cc:	18 f0       	brcs	.+6      	; 0x11d4 <__mulsf3+0x12>
    11ce:	95 23       	and	r25, r21
    11d0:	09 f0       	breq	.+2      	; 0x11d4 <__mulsf3+0x12>
    11d2:	a6 cf       	rjmp	.-180    	; 0x1120 <__fp_inf>
    11d4:	ab cf       	rjmp	.-170    	; 0x112c <__fp_nan>
    11d6:	11 24       	eor	r1, r1
    11d8:	ee cf       	rjmp	.-36     	; 0x11b6 <__fp_szero>

000011da <__mulsf3x>:
    11da:	ca df       	rcall	.-108    	; 0x1170 <__fp_split3>
    11dc:	a0 f3       	brcs	.-24     	; 0x11c6 <__mulsf3+0x4>

000011de <__mulsf3_pse>:
    11de:	95 9f       	mul	r25, r21
    11e0:	d1 f3       	breq	.-12     	; 0x11d6 <__mulsf3+0x14>
    11e2:	95 0f       	add	r25, r21
    11e4:	50 e0       	ldi	r21, 0x00	; 0
    11e6:	55 1f       	adc	r21, r21
    11e8:	62 9f       	mul	r22, r18
    11ea:	f0 01       	movw	r30, r0
    11ec:	72 9f       	mul	r23, r18
    11ee:	bb 27       	eor	r27, r27
    11f0:	f0 0d       	add	r31, r0
    11f2:	b1 1d       	adc	r27, r1
    11f4:	63 9f       	mul	r22, r19
    11f6:	aa 27       	eor	r26, r26
    11f8:	f0 0d       	add	r31, r0
    11fa:	b1 1d       	adc	r27, r1
    11fc:	aa 1f       	adc	r26, r26
    11fe:	64 9f       	mul	r22, r20
    1200:	66 27       	eor	r22, r22
    1202:	b0 0d       	add	r27, r0
    1204:	a1 1d       	adc	r26, r1
    1206:	66 1f       	adc	r22, r22
    1208:	82 9f       	mul	r24, r18
    120a:	22 27       	eor	r18, r18
    120c:	b0 0d       	add	r27, r0
    120e:	a1 1d       	adc	r26, r1
    1210:	62 1f       	adc	r22, r18
    1212:	73 9f       	mul	r23, r19
    1214:	b0 0d       	add	r27, r0
    1216:	a1 1d       	adc	r26, r1
    1218:	62 1f       	adc	r22, r18
    121a:	83 9f       	mul	r24, r19
    121c:	a0 0d       	add	r26, r0
    121e:	61 1d       	adc	r22, r1
    1220:	22 1f       	adc	r18, r18
    1222:	74 9f       	mul	r23, r20
    1224:	33 27       	eor	r19, r19
    1226:	a0 0d       	add	r26, r0
    1228:	61 1d       	adc	r22, r1
    122a:	23 1f       	adc	r18, r19
    122c:	84 9f       	mul	r24, r20
    122e:	60 0d       	add	r22, r0
    1230:	21 1d       	adc	r18, r1
    1232:	82 2f       	mov	r24, r18
    1234:	76 2f       	mov	r23, r22
    1236:	6a 2f       	mov	r22, r26
    1238:	11 24       	eor	r1, r1
    123a:	9f 57       	subi	r25, 0x7F	; 127
    123c:	50 40       	sbci	r21, 0x00	; 0
    123e:	8a f0       	brmi	.+34     	; 0x1262 <__mulsf3_pse+0x84>
    1240:	e1 f0       	breq	.+56     	; 0x127a <__mulsf3_pse+0x9c>
    1242:	88 23       	and	r24, r24
    1244:	4a f0       	brmi	.+18     	; 0x1258 <__mulsf3_pse+0x7a>
    1246:	ee 0f       	add	r30, r30
    1248:	ff 1f       	adc	r31, r31
    124a:	bb 1f       	adc	r27, r27
    124c:	66 1f       	adc	r22, r22
    124e:	77 1f       	adc	r23, r23
    1250:	88 1f       	adc	r24, r24
    1252:	91 50       	subi	r25, 0x01	; 1
    1254:	50 40       	sbci	r21, 0x00	; 0
    1256:	a9 f7       	brne	.-22     	; 0x1242 <__mulsf3_pse+0x64>
    1258:	9e 3f       	cpi	r25, 0xFE	; 254
    125a:	51 05       	cpc	r21, r1
    125c:	70 f0       	brcs	.+28     	; 0x127a <__mulsf3_pse+0x9c>
    125e:	60 cf       	rjmp	.-320    	; 0x1120 <__fp_inf>
    1260:	aa cf       	rjmp	.-172    	; 0x11b6 <__fp_szero>
    1262:	5f 3f       	cpi	r21, 0xFF	; 255
    1264:	ec f3       	brlt	.-6      	; 0x1260 <__mulsf3_pse+0x82>
    1266:	98 3e       	cpi	r25, 0xE8	; 232
    1268:	dc f3       	brlt	.-10     	; 0x1260 <__mulsf3_pse+0x82>
    126a:	86 95       	lsr	r24
    126c:	77 95       	ror	r23
    126e:	67 95       	ror	r22
    1270:	b7 95       	ror	r27
    1272:	f7 95       	ror	r31
    1274:	e7 95       	ror	r30
    1276:	9f 5f       	subi	r25, 0xFF	; 255
    1278:	c1 f7       	brne	.-16     	; 0x126a <__mulsf3_pse+0x8c>
    127a:	fe 2b       	or	r31, r30
    127c:	88 0f       	add	r24, r24
    127e:	91 1d       	adc	r25, r1
    1280:	96 95       	lsr	r25
    1282:	87 95       	ror	r24
    1284:	97 f9       	bld	r25, 7
    1286:	08 95       	ret

00001288 <malloc>:
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	82 30       	cpi	r24, 0x02	; 2
    128e:	91 05       	cpc	r25, r1
    1290:	10 f4       	brcc	.+4      	; 0x1296 <malloc+0xe>
    1292:	82 e0       	ldi	r24, 0x02	; 2
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	e0 91 a6 01 	lds	r30, 0x01A6
    129a:	f0 91 a7 01 	lds	r31, 0x01A7
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	a0 e0       	ldi	r26, 0x00	; 0
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	30 97       	sbiw	r30, 0x00	; 0
    12a8:	39 f1       	breq	.+78     	; 0x12f8 <malloc+0x70>
    12aa:	40 81       	ld	r20, Z
    12ac:	51 81       	ldd	r21, Z+1	; 0x01
    12ae:	48 17       	cp	r20, r24
    12b0:	59 07       	cpc	r21, r25
    12b2:	b8 f0       	brcs	.+46     	; 0x12e2 <malloc+0x5a>
    12b4:	48 17       	cp	r20, r24
    12b6:	59 07       	cpc	r21, r25
    12b8:	71 f4       	brne	.+28     	; 0x12d6 <malloc+0x4e>
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	10 97       	sbiw	r26, 0x00	; 0
    12c0:	29 f0       	breq	.+10     	; 0x12cc <malloc+0x44>
    12c2:	13 96       	adiw	r26, 0x03	; 3
    12c4:	9c 93       	st	X, r25
    12c6:	8e 93       	st	-X, r24
    12c8:	12 97       	sbiw	r26, 0x02	; 2
    12ca:	2c c0       	rjmp	.+88     	; 0x1324 <malloc+0x9c>
    12cc:	90 93 a7 01 	sts	0x01A7, r25
    12d0:	80 93 a6 01 	sts	0x01A6, r24
    12d4:	27 c0       	rjmp	.+78     	; 0x1324 <malloc+0x9c>
    12d6:	21 15       	cp	r18, r1
    12d8:	31 05       	cpc	r19, r1
    12da:	31 f0       	breq	.+12     	; 0x12e8 <malloc+0x60>
    12dc:	42 17       	cp	r20, r18
    12de:	53 07       	cpc	r21, r19
    12e0:	18 f0       	brcs	.+6      	; 0x12e8 <malloc+0x60>
    12e2:	a9 01       	movw	r20, r18
    12e4:	db 01       	movw	r26, r22
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <malloc+0x62>
    12e8:	ef 01       	movw	r28, r30
    12ea:	9a 01       	movw	r18, r20
    12ec:	bd 01       	movw	r22, r26
    12ee:	df 01       	movw	r26, r30
    12f0:	02 80       	ldd	r0, Z+2	; 0x02
    12f2:	f3 81       	ldd	r31, Z+3	; 0x03
    12f4:	e0 2d       	mov	r30, r0
    12f6:	d7 cf       	rjmp	.-82     	; 0x12a6 <malloc+0x1e>
    12f8:	21 15       	cp	r18, r1
    12fa:	31 05       	cpc	r19, r1
    12fc:	f9 f0       	breq	.+62     	; 0x133c <malloc+0xb4>
    12fe:	28 1b       	sub	r18, r24
    1300:	39 0b       	sbc	r19, r25
    1302:	24 30       	cpi	r18, 0x04	; 4
    1304:	31 05       	cpc	r19, r1
    1306:	80 f4       	brcc	.+32     	; 0x1328 <malloc+0xa0>
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	9b 81       	ldd	r25, Y+3	; 0x03
    130c:	61 15       	cp	r22, r1
    130e:	71 05       	cpc	r23, r1
    1310:	21 f0       	breq	.+8      	; 0x131a <malloc+0x92>
    1312:	fb 01       	movw	r30, r22
    1314:	93 83       	std	Z+3, r25	; 0x03
    1316:	82 83       	std	Z+2, r24	; 0x02
    1318:	04 c0       	rjmp	.+8      	; 0x1322 <malloc+0x9a>
    131a:	90 93 a7 01 	sts	0x01A7, r25
    131e:	80 93 a6 01 	sts	0x01A6, r24
    1322:	fe 01       	movw	r30, r28
    1324:	32 96       	adiw	r30, 0x02	; 2
    1326:	44 c0       	rjmp	.+136    	; 0x13b0 <malloc+0x128>
    1328:	fe 01       	movw	r30, r28
    132a:	e2 0f       	add	r30, r18
    132c:	f3 1f       	adc	r31, r19
    132e:	81 93       	st	Z+, r24
    1330:	91 93       	st	Z+, r25
    1332:	22 50       	subi	r18, 0x02	; 2
    1334:	31 09       	sbc	r19, r1
    1336:	39 83       	std	Y+1, r19	; 0x01
    1338:	28 83       	st	Y, r18
    133a:	3a c0       	rjmp	.+116    	; 0x13b0 <malloc+0x128>
    133c:	20 91 a4 01 	lds	r18, 0x01A4
    1340:	30 91 a5 01 	lds	r19, 0x01A5
    1344:	23 2b       	or	r18, r19
    1346:	41 f4       	brne	.+16     	; 0x1358 <malloc+0xd0>
    1348:	20 91 02 01 	lds	r18, 0x0102
    134c:	30 91 03 01 	lds	r19, 0x0103
    1350:	30 93 a5 01 	sts	0x01A5, r19
    1354:	20 93 a4 01 	sts	0x01A4, r18
    1358:	20 91 00 01 	lds	r18, 0x0100
    135c:	30 91 01 01 	lds	r19, 0x0101
    1360:	21 15       	cp	r18, r1
    1362:	31 05       	cpc	r19, r1
    1364:	41 f4       	brne	.+16     	; 0x1376 <malloc+0xee>
    1366:	2d b7       	in	r18, 0x3d	; 61
    1368:	3e b7       	in	r19, 0x3e	; 62
    136a:	40 91 04 01 	lds	r20, 0x0104
    136e:	50 91 05 01 	lds	r21, 0x0105
    1372:	24 1b       	sub	r18, r20
    1374:	35 0b       	sbc	r19, r21
    1376:	e0 91 a4 01 	lds	r30, 0x01A4
    137a:	f0 91 a5 01 	lds	r31, 0x01A5
    137e:	e2 17       	cp	r30, r18
    1380:	f3 07       	cpc	r31, r19
    1382:	a0 f4       	brcc	.+40     	; 0x13ac <malloc+0x124>
    1384:	2e 1b       	sub	r18, r30
    1386:	3f 0b       	sbc	r19, r31
    1388:	28 17       	cp	r18, r24
    138a:	39 07       	cpc	r19, r25
    138c:	78 f0       	brcs	.+30     	; 0x13ac <malloc+0x124>
    138e:	ac 01       	movw	r20, r24
    1390:	4e 5f       	subi	r20, 0xFE	; 254
    1392:	5f 4f       	sbci	r21, 0xFF	; 255
    1394:	24 17       	cp	r18, r20
    1396:	35 07       	cpc	r19, r21
    1398:	48 f0       	brcs	.+18     	; 0x13ac <malloc+0x124>
    139a:	4e 0f       	add	r20, r30
    139c:	5f 1f       	adc	r21, r31
    139e:	50 93 a5 01 	sts	0x01A5, r21
    13a2:	40 93 a4 01 	sts	0x01A4, r20
    13a6:	81 93       	st	Z+, r24
    13a8:	91 93       	st	Z+, r25
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <malloc+0x128>
    13ac:	e0 e0       	ldi	r30, 0x00	; 0
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	cf 01       	movw	r24, r30
    13b2:	df 91       	pop	r29
    13b4:	cf 91       	pop	r28
    13b6:	08 95       	ret

000013b8 <free>:
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	00 97       	sbiw	r24, 0x00	; 0
    13be:	09 f4       	brne	.+2      	; 0x13c2 <free+0xa>
    13c0:	87 c0       	rjmp	.+270    	; 0x14d0 <free+0x118>
    13c2:	fc 01       	movw	r30, r24
    13c4:	32 97       	sbiw	r30, 0x02	; 2
    13c6:	13 82       	std	Z+3, r1	; 0x03
    13c8:	12 82       	std	Z+2, r1	; 0x02
    13ca:	c0 91 a6 01 	lds	r28, 0x01A6
    13ce:	d0 91 a7 01 	lds	r29, 0x01A7
    13d2:	20 97       	sbiw	r28, 0x00	; 0
    13d4:	81 f4       	brne	.+32     	; 0x13f6 <free+0x3e>
    13d6:	20 81       	ld	r18, Z
    13d8:	31 81       	ldd	r19, Z+1	; 0x01
    13da:	28 0f       	add	r18, r24
    13dc:	39 1f       	adc	r19, r25
    13de:	80 91 a4 01 	lds	r24, 0x01A4
    13e2:	90 91 a5 01 	lds	r25, 0x01A5
    13e6:	82 17       	cp	r24, r18
    13e8:	93 07       	cpc	r25, r19
    13ea:	79 f5       	brne	.+94     	; 0x144a <free+0x92>
    13ec:	f0 93 a5 01 	sts	0x01A5, r31
    13f0:	e0 93 a4 01 	sts	0x01A4, r30
    13f4:	6d c0       	rjmp	.+218    	; 0x14d0 <free+0x118>
    13f6:	de 01       	movw	r26, r28
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	ae 17       	cp	r26, r30
    13fe:	bf 07       	cpc	r27, r31
    1400:	50 f4       	brcc	.+20     	; 0x1416 <free+0x5e>
    1402:	12 96       	adiw	r26, 0x02	; 2
    1404:	4d 91       	ld	r20, X+
    1406:	5c 91       	ld	r21, X
    1408:	13 97       	sbiw	r26, 0x03	; 3
    140a:	9d 01       	movw	r18, r26
    140c:	41 15       	cp	r20, r1
    140e:	51 05       	cpc	r21, r1
    1410:	09 f1       	breq	.+66     	; 0x1454 <free+0x9c>
    1412:	da 01       	movw	r26, r20
    1414:	f3 cf       	rjmp	.-26     	; 0x13fc <free+0x44>
    1416:	b3 83       	std	Z+3, r27	; 0x03
    1418:	a2 83       	std	Z+2, r26	; 0x02
    141a:	40 81       	ld	r20, Z
    141c:	51 81       	ldd	r21, Z+1	; 0x01
    141e:	84 0f       	add	r24, r20
    1420:	95 1f       	adc	r25, r21
    1422:	8a 17       	cp	r24, r26
    1424:	9b 07       	cpc	r25, r27
    1426:	71 f4       	brne	.+28     	; 0x1444 <free+0x8c>
    1428:	8d 91       	ld	r24, X+
    142a:	9c 91       	ld	r25, X
    142c:	11 97       	sbiw	r26, 0x01	; 1
    142e:	84 0f       	add	r24, r20
    1430:	95 1f       	adc	r25, r21
    1432:	02 96       	adiw	r24, 0x02	; 2
    1434:	91 83       	std	Z+1, r25	; 0x01
    1436:	80 83       	st	Z, r24
    1438:	12 96       	adiw	r26, 0x02	; 2
    143a:	8d 91       	ld	r24, X+
    143c:	9c 91       	ld	r25, X
    143e:	13 97       	sbiw	r26, 0x03	; 3
    1440:	93 83       	std	Z+3, r25	; 0x03
    1442:	82 83       	std	Z+2, r24	; 0x02
    1444:	21 15       	cp	r18, r1
    1446:	31 05       	cpc	r19, r1
    1448:	29 f4       	brne	.+10     	; 0x1454 <free+0x9c>
    144a:	f0 93 a7 01 	sts	0x01A7, r31
    144e:	e0 93 a6 01 	sts	0x01A6, r30
    1452:	3e c0       	rjmp	.+124    	; 0x14d0 <free+0x118>
    1454:	d9 01       	movw	r26, r18
    1456:	13 96       	adiw	r26, 0x03	; 3
    1458:	fc 93       	st	X, r31
    145a:	ee 93       	st	-X, r30
    145c:	12 97       	sbiw	r26, 0x02	; 2
    145e:	4d 91       	ld	r20, X+
    1460:	5d 91       	ld	r21, X+
    1462:	a4 0f       	add	r26, r20
    1464:	b5 1f       	adc	r27, r21
    1466:	ea 17       	cp	r30, r26
    1468:	fb 07       	cpc	r31, r27
    146a:	79 f4       	brne	.+30     	; 0x148a <free+0xd2>
    146c:	80 81       	ld	r24, Z
    146e:	91 81       	ldd	r25, Z+1	; 0x01
    1470:	84 0f       	add	r24, r20
    1472:	95 1f       	adc	r25, r21
    1474:	02 96       	adiw	r24, 0x02	; 2
    1476:	d9 01       	movw	r26, r18
    1478:	11 96       	adiw	r26, 0x01	; 1
    147a:	9c 93       	st	X, r25
    147c:	8e 93       	st	-X, r24
    147e:	82 81       	ldd	r24, Z+2	; 0x02
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	13 96       	adiw	r26, 0x03	; 3
    1484:	9c 93       	st	X, r25
    1486:	8e 93       	st	-X, r24
    1488:	12 97       	sbiw	r26, 0x02	; 2
    148a:	e0 e0       	ldi	r30, 0x00	; 0
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	9b 81       	ldd	r25, Y+3	; 0x03
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	19 f0       	breq	.+6      	; 0x149c <free+0xe4>
    1496:	fe 01       	movw	r30, r28
    1498:	ec 01       	movw	r28, r24
    149a:	f9 cf       	rjmp	.-14     	; 0x148e <free+0xd6>
    149c:	ce 01       	movw	r24, r28
    149e:	02 96       	adiw	r24, 0x02	; 2
    14a0:	28 81       	ld	r18, Y
    14a2:	39 81       	ldd	r19, Y+1	; 0x01
    14a4:	82 0f       	add	r24, r18
    14a6:	93 1f       	adc	r25, r19
    14a8:	20 91 a4 01 	lds	r18, 0x01A4
    14ac:	30 91 a5 01 	lds	r19, 0x01A5
    14b0:	28 17       	cp	r18, r24
    14b2:	39 07       	cpc	r19, r25
    14b4:	69 f4       	brne	.+26     	; 0x14d0 <free+0x118>
    14b6:	30 97       	sbiw	r30, 0x00	; 0
    14b8:	29 f4       	brne	.+10     	; 0x14c4 <free+0x10c>
    14ba:	10 92 a7 01 	sts	0x01A7, r1
    14be:	10 92 a6 01 	sts	0x01A6, r1
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <free+0x110>
    14c4:	13 82       	std	Z+3, r1	; 0x03
    14c6:	12 82       	std	Z+2, r1	; 0x02
    14c8:	d0 93 a5 01 	sts	0x01A5, r29
    14cc:	c0 93 a4 01 	sts	0x01A4, r28
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <fdevopen>:
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	ec 01       	movw	r28, r24
    14e0:	8b 01       	movw	r16, r22
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	31 f4       	brne	.+12     	; 0x14f2 <fdevopen+0x1c>
    14e6:	61 15       	cp	r22, r1
    14e8:	71 05       	cpc	r23, r1
    14ea:	19 f4       	brne	.+6      	; 0x14f2 <fdevopen+0x1c>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	38 c0       	rjmp	.+112    	; 0x1562 <fdevopen+0x8c>
    14f2:	6e e0       	ldi	r22, 0x0E	; 14
    14f4:	70 e0       	ldi	r23, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	0e 94 c9 0c 	call	0x1992	; 0x1992 <calloc>
    14fe:	fc 01       	movw	r30, r24
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	a1 f3       	breq	.-24     	; 0x14ec <fdevopen+0x16>
    1504:	80 e8       	ldi	r24, 0x80	; 128
    1506:	83 83       	std	Z+3, r24	; 0x03
    1508:	01 15       	cp	r16, r1
    150a:	11 05       	cpc	r17, r1
    150c:	71 f0       	breq	.+28     	; 0x152a <fdevopen+0x54>
    150e:	13 87       	std	Z+11, r17	; 0x0b
    1510:	02 87       	std	Z+10, r16	; 0x0a
    1512:	81 e8       	ldi	r24, 0x81	; 129
    1514:	83 83       	std	Z+3, r24	; 0x03
    1516:	80 91 a8 01 	lds	r24, 0x01A8
    151a:	90 91 a9 01 	lds	r25, 0x01A9
    151e:	89 2b       	or	r24, r25
    1520:	21 f4       	brne	.+8      	; 0x152a <fdevopen+0x54>
    1522:	f0 93 a9 01 	sts	0x01A9, r31
    1526:	e0 93 a8 01 	sts	0x01A8, r30
    152a:	20 97       	sbiw	r28, 0x00	; 0
    152c:	c9 f0       	breq	.+50     	; 0x1560 <fdevopen+0x8a>
    152e:	d1 87       	std	Z+9, r29	; 0x09
    1530:	c0 87       	std	Z+8, r28	; 0x08
    1532:	83 81       	ldd	r24, Z+3	; 0x03
    1534:	82 60       	ori	r24, 0x02	; 2
    1536:	83 83       	std	Z+3, r24	; 0x03
    1538:	80 91 aa 01 	lds	r24, 0x01AA
    153c:	90 91 ab 01 	lds	r25, 0x01AB
    1540:	89 2b       	or	r24, r25
    1542:	71 f4       	brne	.+28     	; 0x1560 <fdevopen+0x8a>
    1544:	f0 93 ab 01 	sts	0x01AB, r31
    1548:	e0 93 aa 01 	sts	0x01AA, r30
    154c:	80 91 ac 01 	lds	r24, 0x01AC
    1550:	90 91 ad 01 	lds	r25, 0x01AD
    1554:	89 2b       	or	r24, r25
    1556:	21 f4       	brne	.+8      	; 0x1560 <fdevopen+0x8a>
    1558:	f0 93 ad 01 	sts	0x01AD, r31
    155c:	e0 93 ac 01 	sts	0x01AC, r30
    1560:	cf 01       	movw	r24, r30
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <printf>:
    156c:	a0 e0       	ldi	r26, 0x00	; 0
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	ec eb       	ldi	r30, 0xBC	; 188
    1572:	fa e0       	ldi	r31, 0x0A	; 10
    1574:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <__prologue_saves__+0x20>
    1578:	fe 01       	movw	r30, r28
    157a:	35 96       	adiw	r30, 0x05	; 5
    157c:	61 91       	ld	r22, Z+
    157e:	71 91       	ld	r23, Z+
    1580:	af 01       	movw	r20, r30
    1582:	80 91 aa 01 	lds	r24, 0x01AA
    1586:	90 91 ab 01 	lds	r25, 0x01AB
    158a:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <vfprintf>
    158e:	e2 e0       	ldi	r30, 0x02	; 2
    1590:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__epilogue_restores__+0x20>

00001594 <puts>:
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	e0 91 aa 01 	lds	r30, 0x01AA
    15a0:	f0 91 ab 01 	lds	r31, 0x01AB
    15a4:	23 81       	ldd	r18, Z+3	; 0x03
    15a6:	21 ff       	sbrs	r18, 1
    15a8:	1b c0       	rjmp	.+54     	; 0x15e0 <puts+0x4c>
    15aa:	ec 01       	movw	r28, r24
    15ac:	00 e0       	ldi	r16, 0x00	; 0
    15ae:	10 e0       	ldi	r17, 0x00	; 0
    15b0:	89 91       	ld	r24, Y+
    15b2:	60 91 aa 01 	lds	r22, 0x01AA
    15b6:	70 91 ab 01 	lds	r23, 0x01AB
    15ba:	db 01       	movw	r26, r22
    15bc:	18 96       	adiw	r26, 0x08	; 8
    15be:	ed 91       	ld	r30, X+
    15c0:	fc 91       	ld	r31, X
    15c2:	19 97       	sbiw	r26, 0x09	; 9
    15c4:	88 23       	and	r24, r24
    15c6:	31 f0       	breq	.+12     	; 0x15d4 <puts+0x40>
    15c8:	09 95       	icall
    15ca:	89 2b       	or	r24, r25
    15cc:	89 f3       	breq	.-30     	; 0x15b0 <puts+0x1c>
    15ce:	0f ef       	ldi	r16, 0xFF	; 255
    15d0:	1f ef       	ldi	r17, 0xFF	; 255
    15d2:	ee cf       	rjmp	.-36     	; 0x15b0 <puts+0x1c>
    15d4:	8a e0       	ldi	r24, 0x0A	; 10
    15d6:	09 95       	icall
    15d8:	89 2b       	or	r24, r25
    15da:	11 f4       	brne	.+4      	; 0x15e0 <puts+0x4c>
    15dc:	c8 01       	movw	r24, r16
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <puts+0x50>
    15e0:	8f ef       	ldi	r24, 0xFF	; 255
    15e2:	9f ef       	ldi	r25, 0xFF	; 255
    15e4:	df 91       	pop	r29
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	08 95       	ret

000015ee <vfprintf>:
    15ee:	ac e0       	ldi	r26, 0x0C	; 12
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	ed ef       	ldi	r30, 0xFD	; 253
    15f4:	fa e0       	ldi	r31, 0x0A	; 10
    15f6:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__prologue_saves__>
    15fa:	7c 01       	movw	r14, r24
    15fc:	6b 01       	movw	r12, r22
    15fe:	8a 01       	movw	r16, r20
    1600:	fc 01       	movw	r30, r24
    1602:	17 82       	std	Z+7, r1	; 0x07
    1604:	16 82       	std	Z+6, r1	; 0x06
    1606:	83 81       	ldd	r24, Z+3	; 0x03
    1608:	81 ff       	sbrs	r24, 1
    160a:	bd c1       	rjmp	.+890    	; 0x1986 <vfprintf+0x398>
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	4c 01       	movw	r8, r24
    1612:	f7 01       	movw	r30, r14
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	f6 01       	movw	r30, r12
    1618:	93 fd       	sbrc	r25, 3
    161a:	85 91       	lpm	r24, Z+
    161c:	93 ff       	sbrs	r25, 3
    161e:	81 91       	ld	r24, Z+
    1620:	6f 01       	movw	r12, r30
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <vfprintf+0x3a>
    1626:	ab c1       	rjmp	.+854    	; 0x197e <vfprintf+0x390>
    1628:	85 32       	cpi	r24, 0x25	; 37
    162a:	39 f4       	brne	.+14     	; 0x163a <vfprintf+0x4c>
    162c:	93 fd       	sbrc	r25, 3
    162e:	85 91       	lpm	r24, Z+
    1630:	93 ff       	sbrs	r25, 3
    1632:	81 91       	ld	r24, Z+
    1634:	6f 01       	movw	r12, r30
    1636:	85 32       	cpi	r24, 0x25	; 37
    1638:	29 f4       	brne	.+10     	; 0x1644 <vfprintf+0x56>
    163a:	b7 01       	movw	r22, r14
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1642:	e7 cf       	rjmp	.-50     	; 0x1612 <vfprintf+0x24>
    1644:	51 2c       	mov	r5, r1
    1646:	31 2c       	mov	r3, r1
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	20 32       	cpi	r18, 0x20	; 32
    164c:	a0 f4       	brcc	.+40     	; 0x1676 <vfprintf+0x88>
    164e:	8b 32       	cpi	r24, 0x2B	; 43
    1650:	69 f0       	breq	.+26     	; 0x166c <vfprintf+0x7e>
    1652:	30 f4       	brcc	.+12     	; 0x1660 <vfprintf+0x72>
    1654:	80 32       	cpi	r24, 0x20	; 32
    1656:	59 f0       	breq	.+22     	; 0x166e <vfprintf+0x80>
    1658:	83 32       	cpi	r24, 0x23	; 35
    165a:	69 f4       	brne	.+26     	; 0x1676 <vfprintf+0x88>
    165c:	20 61       	ori	r18, 0x10	; 16
    165e:	2c c0       	rjmp	.+88     	; 0x16b8 <vfprintf+0xca>
    1660:	8d 32       	cpi	r24, 0x2D	; 45
    1662:	39 f0       	breq	.+14     	; 0x1672 <vfprintf+0x84>
    1664:	80 33       	cpi	r24, 0x30	; 48
    1666:	39 f4       	brne	.+14     	; 0x1676 <vfprintf+0x88>
    1668:	21 60       	ori	r18, 0x01	; 1
    166a:	26 c0       	rjmp	.+76     	; 0x16b8 <vfprintf+0xca>
    166c:	22 60       	ori	r18, 0x02	; 2
    166e:	24 60       	ori	r18, 0x04	; 4
    1670:	23 c0       	rjmp	.+70     	; 0x16b8 <vfprintf+0xca>
    1672:	28 60       	ori	r18, 0x08	; 8
    1674:	21 c0       	rjmp	.+66     	; 0x16b8 <vfprintf+0xca>
    1676:	27 fd       	sbrc	r18, 7
    1678:	27 c0       	rjmp	.+78     	; 0x16c8 <vfprintf+0xda>
    167a:	30 ed       	ldi	r19, 0xD0	; 208
    167c:	38 0f       	add	r19, r24
    167e:	3a 30       	cpi	r19, 0x0A	; 10
    1680:	78 f4       	brcc	.+30     	; 0x16a0 <vfprintf+0xb2>
    1682:	26 ff       	sbrs	r18, 6
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0xa4>
    1686:	fa e0       	ldi	r31, 0x0A	; 10
    1688:	5f 9e       	mul	r5, r31
    168a:	30 0d       	add	r19, r0
    168c:	11 24       	eor	r1, r1
    168e:	53 2e       	mov	r5, r19
    1690:	13 c0       	rjmp	.+38     	; 0x16b8 <vfprintf+0xca>
    1692:	8a e0       	ldi	r24, 0x0A	; 10
    1694:	38 9e       	mul	r3, r24
    1696:	30 0d       	add	r19, r0
    1698:	11 24       	eor	r1, r1
    169a:	33 2e       	mov	r3, r19
    169c:	20 62       	ori	r18, 0x20	; 32
    169e:	0c c0       	rjmp	.+24     	; 0x16b8 <vfprintf+0xca>
    16a0:	8e 32       	cpi	r24, 0x2E	; 46
    16a2:	21 f4       	brne	.+8      	; 0x16ac <vfprintf+0xbe>
    16a4:	26 fd       	sbrc	r18, 6
    16a6:	6b c1       	rjmp	.+726    	; 0x197e <vfprintf+0x390>
    16a8:	20 64       	ori	r18, 0x40	; 64
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <vfprintf+0xca>
    16ac:	8c 36       	cpi	r24, 0x6C	; 108
    16ae:	11 f4       	brne	.+4      	; 0x16b4 <vfprintf+0xc6>
    16b0:	20 68       	ori	r18, 0x80	; 128
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <vfprintf+0xca>
    16b4:	88 36       	cpi	r24, 0x68	; 104
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <vfprintf+0xda>
    16b8:	f6 01       	movw	r30, r12
    16ba:	93 fd       	sbrc	r25, 3
    16bc:	85 91       	lpm	r24, Z+
    16be:	93 ff       	sbrs	r25, 3
    16c0:	81 91       	ld	r24, Z+
    16c2:	6f 01       	movw	r12, r30
    16c4:	81 11       	cpse	r24, r1
    16c6:	c1 cf       	rjmp	.-126    	; 0x164a <vfprintf+0x5c>
    16c8:	98 2f       	mov	r25, r24
    16ca:	9f 7d       	andi	r25, 0xDF	; 223
    16cc:	95 54       	subi	r25, 0x45	; 69
    16ce:	93 30       	cpi	r25, 0x03	; 3
    16d0:	28 f4       	brcc	.+10     	; 0x16dc <vfprintf+0xee>
    16d2:	0c 5f       	subi	r16, 0xFC	; 252
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	ff e3       	ldi	r31, 0x3F	; 63
    16d8:	f9 83       	std	Y+1, r31	; 0x01
    16da:	0d c0       	rjmp	.+26     	; 0x16f6 <vfprintf+0x108>
    16dc:	83 36       	cpi	r24, 0x63	; 99
    16de:	31 f0       	breq	.+12     	; 0x16ec <vfprintf+0xfe>
    16e0:	83 37       	cpi	r24, 0x73	; 115
    16e2:	71 f0       	breq	.+28     	; 0x1700 <vfprintf+0x112>
    16e4:	83 35       	cpi	r24, 0x53	; 83
    16e6:	09 f0       	breq	.+2      	; 0x16ea <vfprintf+0xfc>
    16e8:	5b c0       	rjmp	.+182    	; 0x17a0 <vfprintf+0x1b2>
    16ea:	22 c0       	rjmp	.+68     	; 0x1730 <vfprintf+0x142>
    16ec:	f8 01       	movw	r30, r16
    16ee:	80 81       	ld	r24, Z
    16f0:	89 83       	std	Y+1, r24	; 0x01
    16f2:	0e 5f       	subi	r16, 0xFE	; 254
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	44 24       	eor	r4, r4
    16f8:	43 94       	inc	r4
    16fa:	51 2c       	mov	r5, r1
    16fc:	54 01       	movw	r10, r8
    16fe:	15 c0       	rjmp	.+42     	; 0x172a <vfprintf+0x13c>
    1700:	38 01       	movw	r6, r16
    1702:	f2 e0       	ldi	r31, 0x02	; 2
    1704:	6f 0e       	add	r6, r31
    1706:	71 1c       	adc	r7, r1
    1708:	f8 01       	movw	r30, r16
    170a:	a0 80       	ld	r10, Z
    170c:	b1 80       	ldd	r11, Z+1	; 0x01
    170e:	26 ff       	sbrs	r18, 6
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <vfprintf+0x12a>
    1712:	65 2d       	mov	r22, r5
    1714:	70 e0       	ldi	r23, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <vfprintf+0x12e>
    1718:	6f ef       	ldi	r22, 0xFF	; 255
    171a:	7f ef       	ldi	r23, 0xFF	; 255
    171c:	c5 01       	movw	r24, r10
    171e:	2c 87       	std	Y+12, r18	; 0x0c
    1720:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <strnlen>
    1724:	2c 01       	movw	r4, r24
    1726:	83 01       	movw	r16, r6
    1728:	2c 85       	ldd	r18, Y+12	; 0x0c
    172a:	2f 77       	andi	r18, 0x7F	; 127
    172c:	22 2e       	mov	r2, r18
    172e:	17 c0       	rjmp	.+46     	; 0x175e <vfprintf+0x170>
    1730:	38 01       	movw	r6, r16
    1732:	f2 e0       	ldi	r31, 0x02	; 2
    1734:	6f 0e       	add	r6, r31
    1736:	71 1c       	adc	r7, r1
    1738:	f8 01       	movw	r30, r16
    173a:	a0 80       	ld	r10, Z
    173c:	b1 80       	ldd	r11, Z+1	; 0x01
    173e:	26 ff       	sbrs	r18, 6
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <vfprintf+0x15a>
    1742:	65 2d       	mov	r22, r5
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <vfprintf+0x15e>
    1748:	6f ef       	ldi	r22, 0xFF	; 255
    174a:	7f ef       	ldi	r23, 0xFF	; 255
    174c:	c5 01       	movw	r24, r10
    174e:	2c 87       	std	Y+12, r18	; 0x0c
    1750:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <strnlen_P>
    1754:	2c 01       	movw	r4, r24
    1756:	2c 85       	ldd	r18, Y+12	; 0x0c
    1758:	20 68       	ori	r18, 0x80	; 128
    175a:	22 2e       	mov	r2, r18
    175c:	83 01       	movw	r16, r6
    175e:	23 fc       	sbrc	r2, 3
    1760:	1b c0       	rjmp	.+54     	; 0x1798 <vfprintf+0x1aa>
    1762:	83 2d       	mov	r24, r3
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	48 16       	cp	r4, r24
    1768:	59 06       	cpc	r5, r25
    176a:	b0 f4       	brcc	.+44     	; 0x1798 <vfprintf+0x1aa>
    176c:	b7 01       	movw	r22, r14
    176e:	80 e2       	ldi	r24, 0x20	; 32
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1776:	3a 94       	dec	r3
    1778:	f4 cf       	rjmp	.-24     	; 0x1762 <vfprintf+0x174>
    177a:	f5 01       	movw	r30, r10
    177c:	27 fc       	sbrc	r2, 7
    177e:	85 91       	lpm	r24, Z+
    1780:	27 fe       	sbrs	r2, 7
    1782:	81 91       	ld	r24, Z+
    1784:	5f 01       	movw	r10, r30
    1786:	b7 01       	movw	r22, r14
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    178e:	31 10       	cpse	r3, r1
    1790:	3a 94       	dec	r3
    1792:	f1 e0       	ldi	r31, 0x01	; 1
    1794:	4f 1a       	sub	r4, r31
    1796:	51 08       	sbc	r5, r1
    1798:	41 14       	cp	r4, r1
    179a:	51 04       	cpc	r5, r1
    179c:	71 f7       	brne	.-36     	; 0x177a <vfprintf+0x18c>
    179e:	e5 c0       	rjmp	.+458    	; 0x196a <vfprintf+0x37c>
    17a0:	84 36       	cpi	r24, 0x64	; 100
    17a2:	11 f0       	breq	.+4      	; 0x17a8 <vfprintf+0x1ba>
    17a4:	89 36       	cpi	r24, 0x69	; 105
    17a6:	39 f5       	brne	.+78     	; 0x17f6 <vfprintf+0x208>
    17a8:	f8 01       	movw	r30, r16
    17aa:	27 ff       	sbrs	r18, 7
    17ac:	07 c0       	rjmp	.+14     	; 0x17bc <vfprintf+0x1ce>
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0c 5f       	subi	r16, 0xFC	; 252
    17b8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <vfprintf+0x1de>
    17bc:	60 81       	ld	r22, Z
    17be:	71 81       	ldd	r23, Z+1	; 0x01
    17c0:	88 27       	eor	r24, r24
    17c2:	77 fd       	sbrc	r23, 7
    17c4:	80 95       	com	r24
    17c6:	98 2f       	mov	r25, r24
    17c8:	0e 5f       	subi	r16, 0xFE	; 254
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	2f 76       	andi	r18, 0x6F	; 111
    17ce:	b2 2e       	mov	r11, r18
    17d0:	97 ff       	sbrs	r25, 7
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <vfprintf+0x1f8>
    17d4:	90 95       	com	r25
    17d6:	80 95       	com	r24
    17d8:	70 95       	com	r23
    17da:	61 95       	neg	r22
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	20 68       	ori	r18, 0x80	; 128
    17e4:	b2 2e       	mov	r11, r18
    17e6:	2a e0       	ldi	r18, 0x0A	; 10
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	a4 01       	movw	r20, r8
    17ec:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__ultoa_invert>
    17f0:	a8 2e       	mov	r10, r24
    17f2:	a8 18       	sub	r10, r8
    17f4:	44 c0       	rjmp	.+136    	; 0x187e <vfprintf+0x290>
    17f6:	85 37       	cpi	r24, 0x75	; 117
    17f8:	29 f4       	brne	.+10     	; 0x1804 <vfprintf+0x216>
    17fa:	2f 7e       	andi	r18, 0xEF	; 239
    17fc:	b2 2e       	mov	r11, r18
    17fe:	2a e0       	ldi	r18, 0x0A	; 10
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	25 c0       	rjmp	.+74     	; 0x184e <vfprintf+0x260>
    1804:	f2 2f       	mov	r31, r18
    1806:	f9 7f       	andi	r31, 0xF9	; 249
    1808:	bf 2e       	mov	r11, r31
    180a:	8f 36       	cpi	r24, 0x6F	; 111
    180c:	c1 f0       	breq	.+48     	; 0x183e <vfprintf+0x250>
    180e:	18 f4       	brcc	.+6      	; 0x1816 <vfprintf+0x228>
    1810:	88 35       	cpi	r24, 0x58	; 88
    1812:	79 f0       	breq	.+30     	; 0x1832 <vfprintf+0x244>
    1814:	b4 c0       	rjmp	.+360    	; 0x197e <vfprintf+0x390>
    1816:	80 37       	cpi	r24, 0x70	; 112
    1818:	19 f0       	breq	.+6      	; 0x1820 <vfprintf+0x232>
    181a:	88 37       	cpi	r24, 0x78	; 120
    181c:	21 f0       	breq	.+8      	; 0x1826 <vfprintf+0x238>
    181e:	af c0       	rjmp	.+350    	; 0x197e <vfprintf+0x390>
    1820:	2f 2f       	mov	r18, r31
    1822:	20 61       	ori	r18, 0x10	; 16
    1824:	b2 2e       	mov	r11, r18
    1826:	b4 fe       	sbrs	r11, 4
    1828:	0d c0       	rjmp	.+26     	; 0x1844 <vfprintf+0x256>
    182a:	8b 2d       	mov	r24, r11
    182c:	84 60       	ori	r24, 0x04	; 4
    182e:	b8 2e       	mov	r11, r24
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <vfprintf+0x256>
    1832:	24 ff       	sbrs	r18, 4
    1834:	0a c0       	rjmp	.+20     	; 0x184a <vfprintf+0x25c>
    1836:	9f 2f       	mov	r25, r31
    1838:	96 60       	ori	r25, 0x06	; 6
    183a:	b9 2e       	mov	r11, r25
    183c:	06 c0       	rjmp	.+12     	; 0x184a <vfprintf+0x25c>
    183e:	28 e0       	ldi	r18, 0x08	; 8
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	05 c0       	rjmp	.+10     	; 0x184e <vfprintf+0x260>
    1844:	20 e1       	ldi	r18, 0x10	; 16
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	02 c0       	rjmp	.+4      	; 0x184e <vfprintf+0x260>
    184a:	20 e1       	ldi	r18, 0x10	; 16
    184c:	32 e0       	ldi	r19, 0x02	; 2
    184e:	f8 01       	movw	r30, r16
    1850:	b7 fe       	sbrs	r11, 7
    1852:	07 c0       	rjmp	.+14     	; 0x1862 <vfprintf+0x274>
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	0c 5f       	subi	r16, 0xFC	; 252
    185e:	1f 4f       	sbci	r17, 0xFF	; 255
    1860:	06 c0       	rjmp	.+12     	; 0x186e <vfprintf+0x280>
    1862:	60 81       	ld	r22, Z
    1864:	71 81       	ldd	r23, Z+1	; 0x01
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	0e 5f       	subi	r16, 0xFE	; 254
    186c:	1f 4f       	sbci	r17, 0xFF	; 255
    186e:	a4 01       	movw	r20, r8
    1870:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <__ultoa_invert>
    1874:	a8 2e       	mov	r10, r24
    1876:	a8 18       	sub	r10, r8
    1878:	fb 2d       	mov	r31, r11
    187a:	ff 77       	andi	r31, 0x7F	; 127
    187c:	bf 2e       	mov	r11, r31
    187e:	b6 fe       	sbrs	r11, 6
    1880:	0b c0       	rjmp	.+22     	; 0x1898 <vfprintf+0x2aa>
    1882:	2b 2d       	mov	r18, r11
    1884:	2e 7f       	andi	r18, 0xFE	; 254
    1886:	a5 14       	cp	r10, r5
    1888:	50 f4       	brcc	.+20     	; 0x189e <vfprintf+0x2b0>
    188a:	b4 fe       	sbrs	r11, 4
    188c:	0a c0       	rjmp	.+20     	; 0x18a2 <vfprintf+0x2b4>
    188e:	b2 fc       	sbrc	r11, 2
    1890:	08 c0       	rjmp	.+16     	; 0x18a2 <vfprintf+0x2b4>
    1892:	2b 2d       	mov	r18, r11
    1894:	2e 7e       	andi	r18, 0xEE	; 238
    1896:	05 c0       	rjmp	.+10     	; 0x18a2 <vfprintf+0x2b4>
    1898:	7a 2c       	mov	r7, r10
    189a:	2b 2d       	mov	r18, r11
    189c:	03 c0       	rjmp	.+6      	; 0x18a4 <vfprintf+0x2b6>
    189e:	7a 2c       	mov	r7, r10
    18a0:	01 c0       	rjmp	.+2      	; 0x18a4 <vfprintf+0x2b6>
    18a2:	75 2c       	mov	r7, r5
    18a4:	24 ff       	sbrs	r18, 4
    18a6:	0d c0       	rjmp	.+26     	; 0x18c2 <vfprintf+0x2d4>
    18a8:	fe 01       	movw	r30, r28
    18aa:	ea 0d       	add	r30, r10
    18ac:	f1 1d       	adc	r31, r1
    18ae:	80 81       	ld	r24, Z
    18b0:	80 33       	cpi	r24, 0x30	; 48
    18b2:	11 f4       	brne	.+4      	; 0x18b8 <vfprintf+0x2ca>
    18b4:	29 7e       	andi	r18, 0xE9	; 233
    18b6:	09 c0       	rjmp	.+18     	; 0x18ca <vfprintf+0x2dc>
    18b8:	22 ff       	sbrs	r18, 2
    18ba:	06 c0       	rjmp	.+12     	; 0x18c8 <vfprintf+0x2da>
    18bc:	73 94       	inc	r7
    18be:	73 94       	inc	r7
    18c0:	04 c0       	rjmp	.+8      	; 0x18ca <vfprintf+0x2dc>
    18c2:	82 2f       	mov	r24, r18
    18c4:	86 78       	andi	r24, 0x86	; 134
    18c6:	09 f0       	breq	.+2      	; 0x18ca <vfprintf+0x2dc>
    18c8:	73 94       	inc	r7
    18ca:	23 fd       	sbrc	r18, 3
    18cc:	13 c0       	rjmp	.+38     	; 0x18f4 <vfprintf+0x306>
    18ce:	20 ff       	sbrs	r18, 0
    18d0:	06 c0       	rjmp	.+12     	; 0x18de <vfprintf+0x2f0>
    18d2:	5a 2c       	mov	r5, r10
    18d4:	73 14       	cp	r7, r3
    18d6:	18 f4       	brcc	.+6      	; 0x18de <vfprintf+0x2f0>
    18d8:	53 0c       	add	r5, r3
    18da:	57 18       	sub	r5, r7
    18dc:	73 2c       	mov	r7, r3
    18de:	73 14       	cp	r7, r3
    18e0:	68 f4       	brcc	.+26     	; 0x18fc <vfprintf+0x30e>
    18e2:	b7 01       	movw	r22, r14
    18e4:	80 e2       	ldi	r24, 0x20	; 32
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	2c 87       	std	Y+12, r18	; 0x0c
    18ea:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    18ee:	73 94       	inc	r7
    18f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18f2:	f5 cf       	rjmp	.-22     	; 0x18de <vfprintf+0x2f0>
    18f4:	73 14       	cp	r7, r3
    18f6:	10 f4       	brcc	.+4      	; 0x18fc <vfprintf+0x30e>
    18f8:	37 18       	sub	r3, r7
    18fa:	01 c0       	rjmp	.+2      	; 0x18fe <vfprintf+0x310>
    18fc:	31 2c       	mov	r3, r1
    18fe:	24 ff       	sbrs	r18, 4
    1900:	12 c0       	rjmp	.+36     	; 0x1926 <vfprintf+0x338>
    1902:	b7 01       	movw	r22, r14
    1904:	80 e3       	ldi	r24, 0x30	; 48
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	2c 87       	std	Y+12, r18	; 0x0c
    190a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    190e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1910:	22 ff       	sbrs	r18, 2
    1912:	17 c0       	rjmp	.+46     	; 0x1942 <vfprintf+0x354>
    1914:	21 ff       	sbrs	r18, 1
    1916:	03 c0       	rjmp	.+6      	; 0x191e <vfprintf+0x330>
    1918:	88 e5       	ldi	r24, 0x58	; 88
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <vfprintf+0x334>
    191e:	88 e7       	ldi	r24, 0x78	; 120
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	b7 01       	movw	r22, r14
    1924:	0c c0       	rjmp	.+24     	; 0x193e <vfprintf+0x350>
    1926:	82 2f       	mov	r24, r18
    1928:	86 78       	andi	r24, 0x86	; 134
    192a:	59 f0       	breq	.+22     	; 0x1942 <vfprintf+0x354>
    192c:	21 fd       	sbrc	r18, 1
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x346>
    1930:	80 e2       	ldi	r24, 0x20	; 32
    1932:	01 c0       	rjmp	.+2      	; 0x1936 <vfprintf+0x348>
    1934:	8b e2       	ldi	r24, 0x2B	; 43
    1936:	27 fd       	sbrc	r18, 7
    1938:	8d e2       	ldi	r24, 0x2D	; 45
    193a:	b7 01       	movw	r22, r14
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1942:	a5 14       	cp	r10, r5
    1944:	38 f4       	brcc	.+14     	; 0x1954 <vfprintf+0x366>
    1946:	b7 01       	movw	r22, r14
    1948:	80 e3       	ldi	r24, 0x30	; 48
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1950:	5a 94       	dec	r5
    1952:	f7 cf       	rjmp	.-18     	; 0x1942 <vfprintf+0x354>
    1954:	aa 94       	dec	r10
    1956:	f4 01       	movw	r30, r8
    1958:	ea 0d       	add	r30, r10
    195a:	f1 1d       	adc	r31, r1
    195c:	80 81       	ld	r24, Z
    195e:	b7 01       	movw	r22, r14
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    1966:	a1 10       	cpse	r10, r1
    1968:	f5 cf       	rjmp	.-22     	; 0x1954 <vfprintf+0x366>
    196a:	33 20       	and	r3, r3
    196c:	09 f4       	brne	.+2      	; 0x1970 <vfprintf+0x382>
    196e:	51 ce       	rjmp	.-862    	; 0x1612 <vfprintf+0x24>
    1970:	b7 01       	movw	r22, r14
    1972:	80 e2       	ldi	r24, 0x20	; 32
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <fputc>
    197a:	3a 94       	dec	r3
    197c:	f6 cf       	rjmp	.-20     	; 0x196a <vfprintf+0x37c>
    197e:	f7 01       	movw	r30, r14
    1980:	86 81       	ldd	r24, Z+6	; 0x06
    1982:	97 81       	ldd	r25, Z+7	; 0x07
    1984:	02 c0       	rjmp	.+4      	; 0x198a <vfprintf+0x39c>
    1986:	8f ef       	ldi	r24, 0xFF	; 255
    1988:	9f ef       	ldi	r25, 0xFF	; 255
    198a:	2c 96       	adiw	r28, 0x0c	; 12
    198c:	e2 e1       	ldi	r30, 0x12	; 18
    198e:	0c 94 ae 0d 	jmp	0x1b5c	; 0x1b5c <__epilogue_restores__>

00001992 <calloc>:
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	86 9f       	mul	r24, r22
    199c:	80 01       	movw	r16, r0
    199e:	87 9f       	mul	r24, r23
    19a0:	10 0d       	add	r17, r0
    19a2:	96 9f       	mul	r25, r22
    19a4:	10 0d       	add	r17, r0
    19a6:	11 24       	eor	r1, r1
    19a8:	c8 01       	movw	r24, r16
    19aa:	0e 94 44 09 	call	0x1288	; 0x1288 <malloc>
    19ae:	ec 01       	movw	r28, r24
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	29 f0       	breq	.+10     	; 0x19be <calloc+0x2c>
    19b4:	a8 01       	movw	r20, r16
    19b6:	60 e0       	ldi	r22, 0x00	; 0
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <memset>
    19be:	ce 01       	movw	r24, r28
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	08 95       	ret

000019ca <strnlen_P>:
    19ca:	fc 01       	movw	r30, r24
    19cc:	05 90       	lpm	r0, Z+
    19ce:	61 50       	subi	r22, 0x01	; 1
    19d0:	70 40       	sbci	r23, 0x00	; 0
    19d2:	01 10       	cpse	r0, r1
    19d4:	d8 f7       	brcc	.-10     	; 0x19cc <strnlen_P+0x2>
    19d6:	80 95       	com	r24
    19d8:	90 95       	com	r25
    19da:	8e 0f       	add	r24, r30
    19dc:	9f 1f       	adc	r25, r31
    19de:	08 95       	ret

000019e0 <memset>:
    19e0:	dc 01       	movw	r26, r24
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <memset+0x6>
    19e4:	6d 93       	st	X+, r22
    19e6:	41 50       	subi	r20, 0x01	; 1
    19e8:	50 40       	sbci	r21, 0x00	; 0
    19ea:	e0 f7       	brcc	.-8      	; 0x19e4 <memset+0x4>
    19ec:	08 95       	ret

000019ee <strnlen>:
    19ee:	fc 01       	movw	r30, r24
    19f0:	61 50       	subi	r22, 0x01	; 1
    19f2:	70 40       	sbci	r23, 0x00	; 0
    19f4:	01 90       	ld	r0, Z+
    19f6:	01 10       	cpse	r0, r1
    19f8:	d8 f7       	brcc	.-10     	; 0x19f0 <strnlen+0x2>
    19fa:	80 95       	com	r24
    19fc:	90 95       	com	r25
    19fe:	8e 0f       	add	r24, r30
    1a00:	9f 1f       	adc	r25, r31
    1a02:	08 95       	ret

00001a04 <fputc>:
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	18 2f       	mov	r17, r24
    1a0e:	09 2f       	mov	r16, r25
    1a10:	eb 01       	movw	r28, r22
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	81 fd       	sbrc	r24, 1
    1a16:	03 c0       	rjmp	.+6      	; 0x1a1e <fputc+0x1a>
    1a18:	8f ef       	ldi	r24, 0xFF	; 255
    1a1a:	9f ef       	ldi	r25, 0xFF	; 255
    1a1c:	20 c0       	rjmp	.+64     	; 0x1a5e <fputc+0x5a>
    1a1e:	82 ff       	sbrs	r24, 2
    1a20:	10 c0       	rjmp	.+32     	; 0x1a42 <fputc+0x3e>
    1a22:	4e 81       	ldd	r20, Y+6	; 0x06
    1a24:	5f 81       	ldd	r21, Y+7	; 0x07
    1a26:	2c 81       	ldd	r18, Y+4	; 0x04
    1a28:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2a:	42 17       	cp	r20, r18
    1a2c:	53 07       	cpc	r21, r19
    1a2e:	7c f4       	brge	.+30     	; 0x1a4e <fputc+0x4a>
    1a30:	e8 81       	ld	r30, Y
    1a32:	f9 81       	ldd	r31, Y+1	; 0x01
    1a34:	9f 01       	movw	r18, r30
    1a36:	2f 5f       	subi	r18, 0xFF	; 255
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	39 83       	std	Y+1, r19	; 0x01
    1a3c:	28 83       	st	Y, r18
    1a3e:	10 83       	st	Z, r17
    1a40:	06 c0       	rjmp	.+12     	; 0x1a4e <fputc+0x4a>
    1a42:	e8 85       	ldd	r30, Y+8	; 0x08
    1a44:	f9 85       	ldd	r31, Y+9	; 0x09
    1a46:	81 2f       	mov	r24, r17
    1a48:	09 95       	icall
    1a4a:	89 2b       	or	r24, r25
    1a4c:	29 f7       	brne	.-54     	; 0x1a18 <fputc+0x14>
    1a4e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a50:	3f 81       	ldd	r19, Y+7	; 0x07
    1a52:	2f 5f       	subi	r18, 0xFF	; 255
    1a54:	3f 4f       	sbci	r19, 0xFF	; 255
    1a56:	3f 83       	std	Y+7, r19	; 0x07
    1a58:	2e 83       	std	Y+6, r18	; 0x06
    1a5a:	81 2f       	mov	r24, r17
    1a5c:	90 2f       	mov	r25, r16
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <__ultoa_invert>:
    1a68:	fa 01       	movw	r30, r20
    1a6a:	aa 27       	eor	r26, r26
    1a6c:	28 30       	cpi	r18, 0x08	; 8
    1a6e:	51 f1       	breq	.+84     	; 0x1ac4 <__ultoa_invert+0x5c>
    1a70:	20 31       	cpi	r18, 0x10	; 16
    1a72:	81 f1       	breq	.+96     	; 0x1ad4 <__ultoa_invert+0x6c>
    1a74:	e8 94       	clt
    1a76:	6f 93       	push	r22
    1a78:	6e 7f       	andi	r22, 0xFE	; 254
    1a7a:	6e 5f       	subi	r22, 0xFE	; 254
    1a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a80:	9f 4f       	sbci	r25, 0xFF	; 255
    1a82:	af 4f       	sbci	r26, 0xFF	; 255
    1a84:	b1 e0       	ldi	r27, 0x01	; 1
    1a86:	3e d0       	rcall	.+124    	; 0x1b04 <__ultoa_invert+0x9c>
    1a88:	b4 e0       	ldi	r27, 0x04	; 4
    1a8a:	3c d0       	rcall	.+120    	; 0x1b04 <__ultoa_invert+0x9c>
    1a8c:	67 0f       	add	r22, r23
    1a8e:	78 1f       	adc	r23, r24
    1a90:	89 1f       	adc	r24, r25
    1a92:	9a 1f       	adc	r25, r26
    1a94:	a1 1d       	adc	r26, r1
    1a96:	68 0f       	add	r22, r24
    1a98:	79 1f       	adc	r23, r25
    1a9a:	8a 1f       	adc	r24, r26
    1a9c:	91 1d       	adc	r25, r1
    1a9e:	a1 1d       	adc	r26, r1
    1aa0:	6a 0f       	add	r22, r26
    1aa2:	71 1d       	adc	r23, r1
    1aa4:	81 1d       	adc	r24, r1
    1aa6:	91 1d       	adc	r25, r1
    1aa8:	a1 1d       	adc	r26, r1
    1aaa:	20 d0       	rcall	.+64     	; 0x1aec <__ultoa_invert+0x84>
    1aac:	09 f4       	brne	.+2      	; 0x1ab0 <__ultoa_invert+0x48>
    1aae:	68 94       	set
    1ab0:	3f 91       	pop	r19
    1ab2:	2a e0       	ldi	r18, 0x0A	; 10
    1ab4:	26 9f       	mul	r18, r22
    1ab6:	11 24       	eor	r1, r1
    1ab8:	30 19       	sub	r19, r0
    1aba:	30 5d       	subi	r19, 0xD0	; 208
    1abc:	31 93       	st	Z+, r19
    1abe:	de f6       	brtc	.-74     	; 0x1a76 <__ultoa_invert+0xe>
    1ac0:	cf 01       	movw	r24, r30
    1ac2:	08 95       	ret
    1ac4:	46 2f       	mov	r20, r22
    1ac6:	47 70       	andi	r20, 0x07	; 7
    1ac8:	40 5d       	subi	r20, 0xD0	; 208
    1aca:	41 93       	st	Z+, r20
    1acc:	b3 e0       	ldi	r27, 0x03	; 3
    1ace:	0f d0       	rcall	.+30     	; 0x1aee <__ultoa_invert+0x86>
    1ad0:	c9 f7       	brne	.-14     	; 0x1ac4 <__ultoa_invert+0x5c>
    1ad2:	f6 cf       	rjmp	.-20     	; 0x1ac0 <__ultoa_invert+0x58>
    1ad4:	46 2f       	mov	r20, r22
    1ad6:	4f 70       	andi	r20, 0x0F	; 15
    1ad8:	40 5d       	subi	r20, 0xD0	; 208
    1ada:	4a 33       	cpi	r20, 0x3A	; 58
    1adc:	18 f0       	brcs	.+6      	; 0x1ae4 <__ultoa_invert+0x7c>
    1ade:	49 5d       	subi	r20, 0xD9	; 217
    1ae0:	31 fd       	sbrc	r19, 1
    1ae2:	40 52       	subi	r20, 0x20	; 32
    1ae4:	41 93       	st	Z+, r20
    1ae6:	02 d0       	rcall	.+4      	; 0x1aec <__ultoa_invert+0x84>
    1ae8:	a9 f7       	brne	.-22     	; 0x1ad4 <__ultoa_invert+0x6c>
    1aea:	ea cf       	rjmp	.-44     	; 0x1ac0 <__ultoa_invert+0x58>
    1aec:	b4 e0       	ldi	r27, 0x04	; 4
    1aee:	a6 95       	lsr	r26
    1af0:	97 95       	ror	r25
    1af2:	87 95       	ror	r24
    1af4:	77 95       	ror	r23
    1af6:	67 95       	ror	r22
    1af8:	ba 95       	dec	r27
    1afa:	c9 f7       	brne	.-14     	; 0x1aee <__ultoa_invert+0x86>
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	61 05       	cpc	r22, r1
    1b00:	71 05       	cpc	r23, r1
    1b02:	08 95       	ret
    1b04:	9b 01       	movw	r18, r22
    1b06:	ac 01       	movw	r20, r24
    1b08:	0a 2e       	mov	r0, r26
    1b0a:	06 94       	lsr	r0
    1b0c:	57 95       	ror	r21
    1b0e:	47 95       	ror	r20
    1b10:	37 95       	ror	r19
    1b12:	27 95       	ror	r18
    1b14:	ba 95       	dec	r27
    1b16:	c9 f7       	brne	.-14     	; 0x1b0a <__ultoa_invert+0xa2>
    1b18:	62 0f       	add	r22, r18
    1b1a:	73 1f       	adc	r23, r19
    1b1c:	84 1f       	adc	r24, r20
    1b1e:	95 1f       	adc	r25, r21
    1b20:	a0 1d       	adc	r26, r0
    1b22:	08 95       	ret

00001b24 <__prologue_saves__>:
    1b24:	2f 92       	push	r2
    1b26:	3f 92       	push	r3
    1b28:	4f 92       	push	r4
    1b2a:	5f 92       	push	r5
    1b2c:	6f 92       	push	r6
    1b2e:	7f 92       	push	r7
    1b30:	8f 92       	push	r8
    1b32:	9f 92       	push	r9
    1b34:	af 92       	push	r10
    1b36:	bf 92       	push	r11
    1b38:	cf 92       	push	r12
    1b3a:	df 92       	push	r13
    1b3c:	ef 92       	push	r14
    1b3e:	ff 92       	push	r15
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	ca 1b       	sub	r28, r26
    1b4e:	db 0b       	sbc	r29, r27
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	09 94       	ijmp

00001b5c <__epilogue_restores__>:
    1b5c:	2a 88       	ldd	r2, Y+18	; 0x12
    1b5e:	39 88       	ldd	r3, Y+17	; 0x11
    1b60:	48 88       	ldd	r4, Y+16	; 0x10
    1b62:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b64:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b66:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b68:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b6a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b6c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b6e:	b9 84       	ldd	r11, Y+9	; 0x09
    1b70:	c8 84       	ldd	r12, Y+8	; 0x08
    1b72:	df 80       	ldd	r13, Y+7	; 0x07
    1b74:	ee 80       	ldd	r14, Y+6	; 0x06
    1b76:	fd 80       	ldd	r15, Y+5	; 0x05
    1b78:	0c 81       	ldd	r16, Y+4	; 0x04
    1b7a:	1b 81       	ldd	r17, Y+3	; 0x03
    1b7c:	aa 81       	ldd	r26, Y+2	; 0x02
    1b7e:	b9 81       	ldd	r27, Y+1	; 0x01
    1b80:	ce 0f       	add	r28, r30
    1b82:	d1 1d       	adc	r29, r1
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	ed 01       	movw	r28, r26
    1b90:	08 95       	ret

00001b92 <_exit>:
    1b92:	f8 94       	cli

00001b94 <__stop_program>:
    1b94:	ff cf       	rjmp	.-2      	; 0x1b94 <__stop_program>
